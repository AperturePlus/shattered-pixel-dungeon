@startuml
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Bestiary {
+ {static} ArrayList<Class<? extends Mob>> getMobRotation(int)
- {static} ArrayList<Class<? extends Mob>> standardMobRotation(int)
+ {static} void addRareMobs(int,ArrayList<Class<? extends Mob>>)
- {static} void swapMobAlts(ArrayList<Class<? extends Mob>>)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.Elixir {
+ {abstract}void apply(Hero)
+ boolean isKnown()
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_2_X_Changes {
+ {static} void addAllChanges(ArrayList<ChangeInfo>)
+ {static} void add_v0_2_4_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_2_3_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_2_2_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_2_1_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_2_0_Changes(ArrayList<ChangeInfo>)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ArcaneArmor {
- int level
- int interval
- {static} String LEVEL
- {static} String INTERVAL
+ boolean act()
+ int level()
+ void set(int,int)
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndError {
}
class com.shatteredpixel.shatteredpixeldungeon.effects.particles.SmokeParticle {
+ {static} Factory FACTORY
+ {static} Factory SPEW
+ void reset(float,float)
+ void resetSpew(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Bolas {
+ int max(int)
+ int proc(Char,Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfDread {
+ void doRead()
}

class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfForesight {
+ void doRead()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Weakness {
+ {static} float DURATION
+ int icon()
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blizzard {
# void evolve()
+ void use(BlobEmitter)
+ String tileDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.HandAxe {
+ int max(int)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Explosive {
- {static} ItemSprite.Glowing BLACK
- {static} ItemSprite.Glowing WARM
- {static} ItemSprite.Glowing HOT
- int durability
- {static} String DURABILITY
+ int proc(Weapon,Char,Char,int)
+ boolean curse()
+ ItemSprite.Glowing glowing()
+ String desc()
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.GnollSprite {
}
class com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel {
- {static} int WIDTH
- {static} int HEIGHT
+ {static} Rect diggableArea
+ {static} Rect mainArena
+ {static} Rect gate
+ {static} int[] pylonPositions
- ArenaVisuals customArenaVisuals
- {static} short n
- {static} short W
- {static} short e
- {static} short s
- {static} short[] entrance1
- {static} short[] entrance2
- {static} short[] entrance3
- {static} short[] entrance4
- {static} short[][] entranceVariants
- {static} short[] corner1
- {static} short[] corner2
- {static} short[] corner3
- {static} short[] corner4
- {static} short[][] cornerVariants
+ void playLevelMusic()
+ String tilesTex()
+ String waterTex()
# boolean build()
+ void restoreFromBundle(Bundle)
# void createMobs()
+ Actor addRespawner()
# void createItems()
+ int randomRespawnCell(Char)
+ boolean setCellToWater(boolean,int)
+ void occupyCell(Char)
+ void seal()
+ void unseal()
+ void activatePylon()
+ void eliminatePylon()
+ String tileName(int)
+ String tileDesc(int)
+ Group addVisuals()
- void buildEntrance()
- void buildCorners()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel$CityEntrance {
- {static} short[] entryWay
+ Tilemap create()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel$EntranceOverhang {
- {static} short[] entryWay
+ Tilemap create()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel$ArenaVisuals {
+ Tilemap create()
+ void updateState()
+ String name(int,int)
+ String desc(int,int)
+ Image image(int,int)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel$PylonEnergy {
- {static} CharSprite energySourceSprite
- {static} Emitter.Factory DIRECTED_SPARKS
# void evolve()
+ void fullyClear()
+ String tileDesc()
+ void use(BlobEmitter)
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.DuelistArmor {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy {
+ float energy
+ int cooldown
- {static} float MAX_COOLDOWN
+ {static} String ENERGY
+ {static} String COOLDOWN
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ boolean act()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void gainEnergy(Mob)
+ int energyCap()
+ void abilityUsed(MonkAbility)
+ boolean abilitiesEmpowered(Hero)
+ void processCombinedEnergy(Talent.CombinedEnergyAbilityTracker)
+ String actionName()
+ int actionIcon()
+ Visual secondaryVisual()
+ int indicatorColor()
+ void doAction()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility {
+ {static} MonkAbility[] abilities
+ String name()
+ String desc()
+ {abstract}int energyCost()
+ {abstract}int cooldown()
+ String targetingPrompt()
+ {abstract}void doAbility(Hero,Integer)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$UnarmedAbilityTracker {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$JustHitTracker {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$FlurryEmpowerTracker {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Flurry {
+ int energyCost()
+ int cooldown()
+ String desc()
+ String targetingPrompt()
+ void doAbility(Hero,Integer)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Focus {
+ int energyCost()
+ int cooldown()
+ void doAbility(Hero,Integer)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Focus$FocusBuff {
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Focus$FocusActivation {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Dash {
+ int energyCost()
+ int cooldown()
+ String targetingPrompt()
+ void doAbility(Hero,Integer)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$DragonKick {
+ int energyCost()
+ int cooldown()
+ String desc()
+ String targetingPrompt()
+ void doAbility(Hero,Integer)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Meditate {
+ int energyCost()
+ int cooldown()
+ void doAbility(Hero,Integer)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Meditate$MeditateResistance {
}
class com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith {
- {static} int WIDTH_P
- {static} int WIDTH_L
- {static} int GAP
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$WndReforge {
- {static} int WIDTH
- {static} int BTN_SIZE
- {static} float GAP
- {static} float BTN_GAP
- ItemButton btnPressed
- ItemButton btnItem1
- ItemButton btnItem2
- RedButton btnReforge
# WndBag.ItemSelector itemSelector
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$HardenSelector {
+ String textPrompt()
+ Class<? extends Bag> preferredBag()
+ boolean itemSelectable(Item)
+ void onSelect(Item)
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$UpgradeSelector {
+ String textPrompt()
+ Class<? extends Bag> preferredBag()
+ boolean itemSelectable(Item)
+ void onSelect(Item)
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$WndSmith {
- {static} int WIDTH
- {static} int BTN_SIZE
- {static} int BTN_GAP
- {static} int GAP
+ void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$WndSmith$RewardWindow {
}
class com.shatteredpixel.shatteredpixeldungeon.ui.MenuPane {
- Image bg
- Image depthIcon
- BitmapText depthText
- Button depthButton
- Image challengeIcon
- BitmapText challengeText
- Button challengeButton
- JournalButton btnJournal
- MenuButton btnMenu
- Toolbar.PickedUpItem pickedUp
- BitmapText version
- DangerIndicator danger
+ {static} int WIDTH
# void createChildren()
# void layout()
+ void pickup(Item,int)
+ void flashForPage(Document,String)
+ void updateKeys()
}


class com.shatteredpixel.shatteredpixeldungeon.ui.MenuPane$JournalButton {
- Image bg
- Image journalIcon
- KeyDisplay keyIcon
- Document flashingDoc
- String flashingPage
- float time
+ GameAction keyAction()
# void createChildren()
# void layout()
+ void update()
+ void updateKeyDisplay()
# void onPointerDown()
# void onPointerUp()
# void onClick()
# String hoverText()
}


class com.shatteredpixel.shatteredpixeldungeon.ui.MenuPane$MenuButton {
- Image image
# void createChildren()
# void layout()
# void onPointerDown()
# void onPointerUp()
# void onClick()
+ GameAction keyAction()
# String hoverText()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.HolyDart {
+ int proc(Char,Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfTransmutation {
# boolean usableOnItem(Item)
# void onItemSelected(Item)
+ {static} Item changeItem(Item)
- {static} MagesStaff changeStaff(MagesStaff)
- {static} TippedDart changeTippedDart(TippedDart)
- {static} Weapon changeWeapon(Weapon)
- {static} Ring changeRing(Ring)
- {static} Artifact changeArtifact(Artifact)
- {static} Trinket changeTrinket(Trinket)
- {static} Wand changeWand(Wand)
- {static} Plant.Seed changeSeed(Plant.Seed)
- {static} Runestone changeStone(Runestone)
- {static} Scroll changeScroll(Scroll)
- {static} Potion changePotion(Potion)
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.ui.HealthBar {
- {static} int COLOR_BG
- {static} int COLOR_HP
- {static} int COLOR_SHLD
- {static} int HEIGHT
- ColorBlock Bg
- ColorBlock Shld
- ColorBlock Hp
- float health
- float shield
# void createChildren()
# void layout()
+ void level(float)
+ void level(float,float)
+ void level(Char)
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.BadgesScene {
+ void create()
+ void destroy()
# void onBackPressed()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.ChasmBridgeEntranceRoom {
+ int minWidth()
+ int minHeight()
+ boolean isEntrance()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfStamina {
+ void apply(Hero)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfLevitation {
+ void shatter(int)
+ void apply(Hero)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfIcyTouch {
+ void apply(Hero)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfIcyTouch$Recipe {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.Ratmogrify {
+ {static} boolean useRatroicEnergy
+ String targetingPrompt()
+ int targetedPos(Char,int)
# void activate(ClassArmor,Hero,Integer)
+ int icon()
+ Talent[] talents()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.Ratmogrify$TransmogRat {
- Mob original
- boolean allied
- float timeLeft
- {static} String ORIGINAL
- {static} String ALLIED
+ void setup(Mob)
+ Mob getOriginal()
# boolean act()
# void spend(float)
+ void makeAlly()
+ int attackSkill(Char)
+ int drRoll()
+ int damageRoll()
+ float attackDelay()
+ void rollToDropLoot()
+ String name()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfMirrorImage {
- {static} int NIMAGES
+ void doRead()
+ {static} int spawnImages(Hero,int)
+ int value()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretSummoningRoom {
+ int maxWidth()
+ int maxHeight()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.PetrifiedSeed {
# int upgradeEnergyCost()
+ String desc()
+ {static} float grassLootMultiplier()
+ {static} float grassLootMultiplier(int)
+ {static} float stoneInsteadOfSeedChance()
+ {static} float stoneInsteadOfSeedChance(int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfAntiMagic {
+ void doRead()
}

class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.ParchmentScrap {
# int upgradeEnergyCost()
+ String desc()
+ {static} float enchantChanceMultiplier()
+ {static} float enchantChanceMultiplier(int)
+ {static} float curseChanceMultiplier()
+ {static} float curseChanceMultiplier(int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.ExoticCrystals {
# int upgradeEnergyCost()
+ String desc()
+ {static} float consumableExoticChance()
+ {static} float consumableExoticChance(int)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Sheep {
- {static} String[] LINE_KEYS
+ float lifespan
- boolean initialized
- {static} String LIFESPAN
# boolean act()
+ int defenseSkill(Char)
+ void damage(int,Object)
+ boolean add(Buff)
+ boolean interact(Char)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


enum com.shatteredpixel.shatteredpixeldungeon.utils.Holiday {
+  NONE
+  LUNAR_NEW_YEAR
+  APRIL_FOOLS
+  EASTER
+  PRIDE
+  SHATTEREDPD_BIRTHDAY
+  HALLOWEEN
+  PD_BIRTHDAY
+  WINTER_HOLIDAYS
+  NEW_YEARS
- {static} Holiday cached
+ {static} void clearCachedHoliday()
+ {static} Holiday getCurrentHoliday()
+ {static} Holiday getHolidayForDate(GregorianCalendar)
+ {static} boolean isLunarNewYear(int,int)
+ {static} boolean isEaster(int,int,boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Dirk {
+ int max(int)
+ int damageRoll(Char)
+ String targetingPrompt()
+ boolean useTargeting()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.GrippingTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.effects.Splash {
- {static} HashMap<Integer,SplashFactory> FACTORIES
+ {static} void at(int,int,int)
+ {static} void at(PointF,int,int)
+ {static} void at(PointF,float,float,int,int)
+ {static} void around(Visual,int,int)
+ {static} void at(PointF,float,float,int,int,float)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.Splash$SplashFactory {
+ int color
+ float dir
+ float cone
+ void emit(Emitter,int,float,float)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Greatsword {
# int baseChargeUse(Hero,Char)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.RipperSprite {
- Animation stab
- Animation prep
- Animation leap
- boolean alt
+ void leapPrep(int)
+ void jump(int,int,float,float,Callback)
+ void attack(int)
+ void onComplete(Animation)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.changelist.WndChanges {
}
class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Elastic {
- {static} ItemSprite.Glowing PINK
+ int proc(Weapon,Char,Char,int)
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Thief {
+ Item item
- {static} String ITEM
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ float speed()
+ int damageRoll()
+ float attackDelay()
+ float lootChance()
+ void rollToDropLoot()
+ Item createLoot()
+ int attackSkill(Char)
+ int drRoll()
+ int attackProc(Char,int)
+ int defenseProc(Char,int)
# boolean steal(Hero)
+ String description()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Thief$Wandering {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Thief$Fleeing {
# void escaped()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfDragonsBreath {
# {static} boolean identifiedByUse
- CellSelector.Listener targeter
# void drink(Hero)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.changelist.ChangeButton {
# Image icon
# String title
# String[] messages
# void onClick()
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretHoneypotRoom {
+ void paint(Level)
- void placeItem(Item,Level)
}

class com.shatteredpixel.shatteredpixeldungeon.ui.RedButton {
}
abstract class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ShieldBuff {
- int shielding
- {static} String SHIELDING
+ boolean attachTo(Char)
+ void detach()
+ int shielding()
+ void setShield(int)
+ void incShield()
+ void incShield(int)
+ void decShield()
+ void decShield(int)
+ int absorbDamage(int)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Scorpio {
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
# boolean canAttack(Char)
+ int attackProc(Char,int)
# boolean getCloser(int)
+ void aggro(Char)
+ Item createLoot()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.MonkSprite {
- Animation kick
+ void attack(int)
+ void onComplete(Animation)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndGame {
- {static} int WIDTH
- {static} int BTN_HEIGHT
- {static} int GAP
- int pos
- void addButton(RedButton)
- void addButtons(RedButton,RedButton)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.NecromancerSprite {
- Animation charging
- Emitter summoningBones
+ void link(Char)
+ void update()
+ void die()
+ void kill()
+ void cancelSummoning()
+ void finishSummoning()
+ void charge()
+ void zap(int)
+ void onComplete(Animation)
}


class com.shatteredpixel.shatteredpixeldungeon.items.bombs.HolyBomb {
+ void explode(int)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.bombs.HolyBomb$HolyDamage {
}
class com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Polarized {
- {static} ItemSprite.Glowing BLACK
+ int proc(Weapon,Char,Char,int)
+ boolean curse()
+ ItemSprite.Glowing glowing()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.levels.painters.Painter {
+ {abstract}boolean paint(Level,ArrayList<Room>)
+ {static} void set(Level,int,int)
+ {static} void set(Level,int,int,int)
+ {static} void set(Level,Point,int)
+ {static} void fill(Level,int,int,int,int,int)
+ {static} void fill(Level,Rect,int)
+ {static} void fill(Level,Rect,int,int)
+ {static} void fill(Level,Rect,int,int,int,int,int)
+ {static} void drawLine(Level,Point,Point,int)
+ {static} void fillEllipse(Level,Rect,int)
+ {static} void fillEllipse(Level,Rect,int,int)
+ {static} void fillEllipse(Level,int,int,int,int,int)
+ {static} void fillDiamond(Level,Rect,int)
+ {static} void fillDiamond(Level,Rect,int,int)
+ {static} void fillDiamond(Level,int,int,int,int,int)
+ {static} Point drawInside(Level,Room,Point,int,int)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility {
# float baseChargeUse
+ void use(ClassArmor,Hero)
+ String targetingPrompt()
+ boolean useTargeting()
+ int targetedPos(Char,int)
+ float chargeUse(Hero)
# {abstract}void activate(ClassArmor,Hero,Integer)
+ String name()
+ String shortDesc()
+ String desc()
+ int icon()
+ {abstract}Talent[] talents()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndOptions {
# {static} int WIDTH_P
# {static} int WIDTH_L
# {static} int MARGIN
# {static} int BUTTON_HEIGHT
# void layoutBody(float,String,String)
# boolean enabled(int)
# void onSelect(int)
# boolean hasInfo(int)
# void onInfo(int)
# boolean hasIcon(int)
# Image getIcon(int)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGuard {
- int sapperID
- {static} String SAPPER_ID
+ void linkSapper(GnollSapper)
+ boolean hasSapper()
+ void loseSapper()
+ void damage(int,Object)
+ int damageRoll()
+ int attackProc(Char,int)
+ int attackSkill(Char)
+ int drRoll()
# boolean canAttack(Char)
+ String description()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGuard$Wandering {
# int randomDestination()
}

class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfRage {
+ void doRead()
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.HealingDart {
+ int proc(Char,Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.ui.RightClickMenu {
- NinePatch bg
- PointerArea blocker
- Image icon
- RenderedTextBlock titleText
- ColorBlock separator
- RedButton[] buttons
- Item item
- void setup(Image,String,String)
+ void onSelect(int)
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.CaveExitRoom {
+ int minHeight()
+ int minWidth()
+ float[] sizeCatProbs()
+ boolean isExit()
+ void paint(Level)
+ boolean canPlaceCharacter(Point,Level)
+ boolean connect(Room)
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.ShopkeeperSprite {
- PixelParticle coin
+ void onComplete(Animation)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ToxicImbue {
+ {static} float DURATION
# float left
- {static} String LEFT
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void set(float)
+ boolean act()
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ boolean attachTo(Char)
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass {
+ {static} String AC_ACTIVATE
+ int sandBags
- {static} String SANDBAGS
- {static} String BUFF
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ void activate(Char)
+ boolean doUnequip(Hero,boolean,boolean)
# ArtifactBuff passiveBuff()
+ void charge(Hero,float)
+ Item upgrade()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass$hourglassRecharge {
+ boolean act()
}

class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass$timeStasis {
+ boolean attachTo(Char)
+ boolean act()
+ void detach()
+ void fx(boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass$timeFreeze {
~ float turnsToCost
~ ArrayList<Integer> presses
- {static} String PRESSES
- {static} String TURNSTOCOST
+ void processTime(float)
+ void setDelayedPress(int)
+ void triggerPresses()
+ void disarmPresses()
+ void detach()
+ void fx(boolean)
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass$sandBag {
+ boolean doPickUp(Hero,int)
+ int value()
+ boolean isUpgradable()
+ boolean isIdentified()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Gauntlet {
+ int max(int)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndChooseSubclass {
- {static} int WIDTH
- {static} float GAP
}

class com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar {
- Tool btnWait
- Tool btnSearch
- Tool btnInventory
- QuickslotTool[] btnQuick
- SlotSwapTool btnSwap
- PickedUpItem pickedUp
- boolean lastEnabled
+ boolean examining
- {static} Toolbar instance
- {static} CellSelector.Listener informer
+ {static} boolean swappedQuickslots
+ {static} SlotSwapTool SWAP_INSTANCE
+ void destroy()
# void createChildren()
# void layout()
+ {static} void updateLayout()
+ void update()
+ void alpha(float)
+ void pickup(Item,int)
}


enum com.shatteredpixel.shatteredpixeldungeon.ui.Mode {
+  SPLIT
+  GROUP
+  CENTER
}

class com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar$Tool {
- {static} int BGCOLOR
- Image base
- Image icon
+ void frame(int,int,int,int)
+ void icon(int,int,int,int)
# void createChildren()
# void layout()
+ void alpha(float)
# void onPointerDown()
# void onPointerUp()
+ void enable(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar$QuickslotTool {
- QuickSlotButton slot
- int borderLeft
- int borderRight
+ void border(int,int)
# void layout()
+ void alpha(float)
+ void enable(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar$SlotSwapTool {
- Image[] icons
- Item[] items
+ void destroy()
# void onClick()
+ void updateVisuals()
# void layout()
+ void alpha(float)
+ void enable(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar$PickedUpItem {
- {static} float DURATION
- float startScale
- float startX
- float endX
- float left
+ void reset(Item,int,float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.StormCloud {
# void evolve()
+ void use(BlobEmitter)
+ String tileDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfElements {
+ {static} HashSet<Class> RESISTS
+ String statsInfo()
# RingBuff buff()
+ {static} float resist(Char,Class)
}


class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfElements$Resistance {
}
class com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite {
- {static} float FADE_TIME
- {static} float FALL_TIME
+ void update()
+ void onComplete(Animation)
+ void fall()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.particles.WebParticle {
+ {static} Emitter.Factory FACTORY
+ void reset(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.PlantsRoom {
+ int minWidth()
+ int minHeight()
+ float[] sizeCatProbs()
+ void merge(Level,Room,Rect,int)
+ void paint(Level)
- {static} Plant.Seed randomSeed()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.AssassinsBlade {
+ int max(int)
+ int damageRoll(Char)
+ String targetingPrompt()
+ boolean useTargeting()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Bee {
- int level
- int potPos
- int potHolder
- {static} String LEVEL
- {static} String POTPOS
- {static} String POTHOLDER
- {static} String ALIGMNENT
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void spawn(int)
+ void setPotInfo(int,Char)
+ int potPos()
+ int potHolderID()
+ int attackSkill(Char)
+ int damageRoll()
+ int attackProc(Char,int)
+ boolean add(Buff)
# Char chooseEnemy()
# boolean getCloser(int)
+ String description()
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.MageArmor {
}
class com.shatteredpixel.shatteredpixeldungeon.ui.tags.ActionIndicator {
~ Visual primaryVis
~ Visual secondVis
+ {static} Action action
+ {static} ActionIndicator instance
- boolean needsRefresh
+ GameAction keyAction()
+ void destroy()
# void layout()
+ void update()
# void onClick()
# String hoverText()
+ {static} void setAction(Action)
+ {static} void clearAction()
+ {static} void clearAction(Action)
+ {static} void refresh()
}


interface com.shatteredpixel.shatteredpixeldungeon.ui.tags.ActionIndicator$Action {
~ String actionName()
~ int actionIcon()
~ Visual primaryVisual()
~ Visual secondaryVisual()
~ int indicatorColor()
~ void doAction()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Ooze {
+ {static} float DURATION
- float left
- {static} String LEFT
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int icon()
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void set(float)
+ boolean act()
}


class com.shatteredpixel.shatteredpixeldungeon.items.keys.IronKey {
}
class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.GrassyGraveRoom {
+ void merge(Level,Room,Rect,int)
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Feint {
+ int icon()
+ String targetingPrompt()
+ int targetedPos(Char,int)
# void activate(ClassArmor,Hero,Integer)
+ Talent[] talents()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Feint$AfterImage {
+ boolean canInteract(Char)
# boolean act()
+ void damage(int,Object)
+ int defenseSkill(Char)
+ boolean add(Buff)
+ CharSprite sprite()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Feint$AfterImage$FeintConfusion {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Feint$AfterImage$AfterImageSprite {
+ void updateArmor()
+ void resetColor()
+ void die()
}

class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.WondrousResin {
# int upgradeEnergyCost()
+ String desc()
+ {static} float positiveCurseEffectChance()
+ {static} float positiveCurseEffectChance(int)
+ {static} float extraCurseEffectChance()
+ {static} float extraCurseEffectChance(int)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.StatueRoom {
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Bulk {
- {static} ItemSprite.Glowing BLACK
+ int proc(Armor,Char,Char,int)
+ ItemSprite.Glowing glowing()
+ boolean curse()
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfLiquidFlame {
+ void shatter(int)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfAugmentation {
# boolean usableOnItem(Item)
# void onItemSelected(Item)
+ void apply(Weapon,Weapon.Augment)
+ void apply(Armor,Armor.Augment)
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfAugmentation$WndAugment {
- {static} int WIDTH
- {static} int MARGIN
- {static} int BUTTON_WIDTH
- {static} int BUTTON_HEIGHT
+ void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.particles.PoisonParticle {
+ {static} Emitter.Factory MISSILE
+ {static} Emitter.Factory SPLASH
+ void resetMissile(float,float)
+ void resetSplash(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.items.food.ChargrilledMeat {
+ int value()
+ {static} Food cook(int)
}

class com.shatteredpixel.shatteredpixeldungeon.utils.DungeonSeed {
+ {static} long TOTAL_SEEDS
+ {static} long randomSeed()
+ {static} long convertFromCode(String)
+ {static} String convertToCode(long)
+ {static} long convertFromText(String)
+ {static} String formatText(String)
}


class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.MossyClump {
- ArrayList<Boolean> levelFeels
- int shuffles
- {static} String FEELS
- {static} String SHUFFLES
# int upgradeEnergyCost()
+ String desc()
+ {static} float overrideNormalLevelChance()
+ {static} float overrideNormalLevelChance(int)
+ {static} Level.Feeling getNextFeeling()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.plants.Earthroot {
+ void activate(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Earthroot$Seed {
}
class com.shatteredpixel.shatteredpixeldungeon.plants.Earthroot$Armor {
- {static} float STEP
- int pos
- int level
- {static} String POS
- {static} String LEVEL
+ boolean act()
- {static} int blocking()
+ int absorb(int)
+ void level(int)
+ int icon()
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CavesFissureRoom {
- {static} double A
+ int minWidth()
+ int minHeight()
+ float[] sizeCatProbs()
+ boolean canMerge(Level,Room,Point,int)
+ boolean canPlaceItem(Point,Level)
+ boolean canPlaceCharacter(Point,Level)
+ void paint(Level)
- void buildBridge(Level,float,PointF,int)
# {static} float angleBetweenPoints(PointF,PointF)
# int xyToRoomCoords(int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CircleBasinRoom {
+ int minWidth()
+ int minHeight()
+ float[] sizeCatProbs()
+ Rect resize(int,int)
# float fill()
# int clustering()
# boolean ensurePath()
# boolean cleanEdges()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.ui.BadgesGrid {
~ ArrayList<BadgeButton> badgeButtons
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.ui.BadgesGrid$BadgeButton {
- Badges.Badge badge
- boolean unlocked
- Image icon
# void layout()
+ void update()
# void onClick()
# String hoverText()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.Dart {
# {static} String AC_TIP
# {static} Crossbow bow
# boolean processingChargedShot
- int chargedShotPos
- WndBag.ItemSelector itemSelector
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ int min(int)
+ int max(int)
- void updateCrossbow()
+ boolean crossbowHasEnchant(Char)
+ boolean hasEnchant(Class<? extends Enchantment>,Char)
+ float accuracyFactor(Char,Char)
+ int proc(Char,Char,int)
+ int throwPos(Hero,int)
# void onThrow(int)
# void processChargedShot(Char,int)
# void decrementDurability()
+ void throwSound()
+ String info()
+ boolean isUpgradable()
+ int value()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.BridgeRoom {
+ void paint(Level)
+ boolean canMerge(Level,Room,Point,int)
}

class com.shatteredpixel.shatteredpixeldungeon.Challenges {
+ {static} int NO_FOOD
+ {static} int NO_ARMOR
+ {static} int NO_HEALING
+ {static} int NO_HERBALISM
+ {static} int SWARM_INTELLIGENCE
+ {static} int DARKNESS
+ {static} int NO_SCROLLS
+ {static} int CHAMPION_ENEMIES
+ {static} int STRONGER_BOSSES
+ {static} int MAX_VALUE
+ {static} String[] NAME_IDS
+ {static} int[] MASKS
+ {static} int activeChallenges()
+ {static} boolean isItemBlocked(Item)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.traps.CorrosionTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.SpiritBow {
+ {static} String AC_SHOOT
+ boolean sniperSpecial
+ float sniperSpecialBonusDamage
- {static} Class[] harmfulPlants
- int targetPos
- CellSelector.Listener shooter
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ int proc(Char,Char,int)
+ String info()
+ int STRReq(int)
+ int min(int)
+ int max(int)
+ int targetingPos(Hero,int)
+ int damageRoll(Char)
# float baseDelay(Char)
# float speedMultiplier(Char)
+ int level()
+ int buffedLvl()
+ boolean isUpgradable()
+ SpiritArrow knockArrow()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.SpiritBow$SpiritArrow {
~ int flurryCount
~ Actor flurryActor
+ Emitter emitter()
+ int damageRoll(Char)
+ boolean hasEnchant(Class<? extends Enchantment>,Char)
+ int proc(Char,Char,int)
+ float delayFactor(Char)
+ float accuracyFactor(Char,Char)
+ int STRReq(int)
# void onThrow(int)
+ void throwSound()
+ void cast(Hero,int)
}


class com.shatteredpixel.shatteredpixeldungeon.items.quest.Pickaxe {
+ {static} String AC_MINE
+ {static} float TIME_TO_MINE
- {static} Glowing BLOODY
+ boolean bloodStained
- {static} String BLOODSTAINED
+ int STRReq(int)
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ int proc(Char,Char,int)
+ boolean keptThroughLostInventory()
+ String defaultAction()
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.builders.BranchesBuilder {
+ ArrayList<Room> build(ArrayList<Room>)
# float randomBranchAngle(Room)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Charm {
+ int object
+ boolean ignoreHeroAllies
+ {static} float DURATION
- {static} String OBJECT
- {static} String IGNORE_ALLIES
+ boolean ignoreNextHit
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int icon()
+ float iconFadePercent()
+ void recover(Object)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Crab {
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
}

class com.shatteredpixel.shatteredpixeldungeon.items.wands.CursedWand {
- {static} float COMMON_CHANCE
- {static} float UNCOMMON_CHANCE
- {static} float RARE_CHANCE
- {static} float VERY_RARE_CHANCE
+ {static} void cursedZap(Item,Char,Ballistica,Callback)
+ {static} void tryForWandProc(Char,Item)
+ {static} boolean cursedEffect(Item,Char,Char)
+ {static} boolean cursedEffect(Item,Char,int)
- {static} boolean commonEffect(Item,Char,int)
- {static} boolean uncommonEffect(Item,Char,int)
- {static} boolean rareEffect(Item,Char,int)
- {static} boolean veryRareEffect(Item,Char,int)
- {static} void cursedFX(Char,Ballistica,Callback)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.features.LevelTransition {
+ Type type
+ int destDepth
+ int destBranch
+ Type destType
+ int centerCell
+ {static} String TYPE
+ {static} String DEST_DEPTH
+ {static} String DEST_BRANCH
+ {static} String DEST_TYPE
+ int cell()
+ int width()
+ int height()
+ boolean inside(Point)
+ boolean inside(int)
+ Point center()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


enum com.shatteredpixel.shatteredpixeldungeon.levels.features.Type {
+  SURFACE
+  REGULAR_ENTRANCE
+  REGULAR_EXIT
+  BRANCH_ENTRANCE
+  BRANCH_EXIT
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfMindVision {
+ void apply(Hero)
+ int value()
}

abstract class com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite {
- Animation crumple
+ void crumple()
+ void endCrumple()
+ void link(Char)
# {abstract}int texOffset()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite$Blue {
# int texOffset()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite$Green {
# int texOffset()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite$Red {
# int texOffset()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.Belongings {
- Hero owner
+ Backpack backpack
+ KindOfWeapon weapon
+ Armor armor
+ Artifact artifact
+ KindofMisc misc
+ Ring ring
+ KindOfWeapon thrownWeapon
+ KindOfWeapon abilityWeapon
+ KindOfWeapon secondWep
- boolean lostInvent
- {static} String WEAPON
- {static} String ARMOR
- {static} String ARTIFACT
- {static} String MISC
- {static} String RING
- {static} String SECOND_WEP
+ KindOfWeapon attackingWeapon()
+ void lostInventory(boolean)
+ boolean lostInventory()
+ KindOfWeapon weapon()
+ Armor armor()
+ Artifact artifact()
+ KindofMisc misc()
+ Ring ring()
+ KindOfWeapon secondWep()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ {static} void preview(GamesInProgress.Info,Bundle)
+ ArrayList<Bag> getBags()
+ T getItem(Class<T>)
+ ArrayList<T> getAllItems(Class<T>)
+ boolean contains(Item)
+ Item getSimilar(Item)
+ ArrayList<Item> getAllSimilar(Item)
+ void identify()
+ void observe()
+ void uncurseEquipped()
+ Item randomUnequipped()
+ int charge(float)
+ Iterator<Item> iterator()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.Belongings$Backpack {
+ int capacity()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.Belongings$ItemIterator {
- int index
- Iterator<Item> backpackIterator
- Item[] equipped
- int backpackIndex
+ boolean hasNext()
+ Item next()
+ void remove()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.NaturesPower {
# void activate(ClassArmor,Hero,Integer)
+ int icon()
+ Talent[] talents()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.NaturesPower$naturesPowerTracker {
+ {static} float DURATION
+ int extensionsLeft
+ void extend(int)
+ int icon()
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.items.journal.Guidebook {
+ boolean doPickUp(Hero,int)
+ boolean isUpgradable()
+ boolean isIdentified()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.WarHammer {
+ int max(int)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.BurnedRoom {
+ float[] sizeCatProbs()
+ boolean canMerge(Level,Room,Point,int)
# float fill()
# int clustering()
# boolean ensurePath()
# boolean cleanEdges()
+ void paint(Level)
+ boolean canPlaceWater(Point)
+ boolean canPlaceGrass(Point)
+ boolean canPlaceTrap(Point)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Dazzling {
- {static} ItemSprite.Glowing BLACK
+ int proc(Weapon,Char,Char,int)
+ boolean curse()
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Goo {
- int pumpedUp
- int healInc
- String PUMPEDUP
- String HEALINC
+ int damageRoll()
+ int attackSkill(Char)
+ int defenseSkill(Char)
+ int drRoll()
+ boolean act()
# boolean canAttack(Char)
+ int attackProc(Char,int)
+ void updateSpriteState()
# boolean doAttack(Char)
+ boolean attack(Char,float,float,float)
# boolean getCloser(int)
# boolean getFurther(int)
+ void damage(int,Object)
+ void die(Object)
+ void notice()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfIntuition {
- {static} Class curGuess
# boolean usableOnItem(Item)
# void onItemSelected(Item)
}


class com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfIntuition$IntuitionUseTracker {
}
class com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfIntuition$WndGuess {
- {static} int WIDTH
- {static} int BTN_SIZE
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CirclePitRoom {
+ int minWidth()
+ int minHeight()
+ float[] sizeCatProbs()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Trident {
}
class com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v1_X_Changes {
+ {static} void addAllChanges(ArrayList<ChangeInfo>)
+ {static} void add_v1_4_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v1_3_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v1_2_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v1_1_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v1_0_Changes(ArrayList<ChangeInfo>)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob {
+ int volume
+ int[] cur
# int[] off
+ BlobEmitter emitter
+ Rect area
+ boolean alwaysVisible
- {static} String CUR
- {static} String START
- {static} String LENGTH
+ void storeInBundle(Bundle)
- int[] trim(int,int)
+ void restoreFromBundle(Bundle)
+ boolean act()
+ void setupArea()
+ void use(BlobEmitter)
# void evolve()
+ void seed(Level,int,int)
+ void clear(int)
+ void fullyClear()
+ void onBuildFlagMaps(Level)
+ String tileDesc()
+ {static} T seed(int,int,Class<T>)
+ {static} T seed(int,int,Class<T>,Level)
+ {static} int volumeAt(int,Class<? extends Blob>)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.AquariumRoom {
+ int minWidth()
+ int minHeight()
+ float[] sizeCatProbs()
+ boolean canPlaceItem(Point,Level)
+ boolean canPlaceCharacter(Point,Level)
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Pylon {
- int targetNeighbor
- {static} String ALIGNMENT
- {static} String TARGET_NEIGHBOUR
# boolean act()
- void shockChar(Char)
+ void activate()
+ CharSprite sprite()
+ void beckon(int)
+ String description()
+ boolean interact(Char)
+ boolean add(Buff)
+ boolean isInvulnerable(Class)
+ void damage(int,Object)
+ void die(Object)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.MasterThievesArmband {
+ {static} String AC_STEAL
- CellSelector.Listener targeter
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
# ArtifactBuff passiveBuff()
+ void charge(Hero,float)
+ Item upgrade()
+ String desc()
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.MasterThievesArmband$StolenTracker {
+ void setItemStolen(boolean)
+ boolean itemWasStolen()
}

class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.MasterThievesArmband$Thievery {
+ boolean act()
+ void gainCharge(float)
+ boolean steal(Item)
+ float stealChance(Item)
+ int chargesToUse(Item)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge {
+ int icon()
+ String targetingPrompt()
+ int targetedPos(Char,int)
+ float chargeUse(Hero)
# void activate(ClassArmor,Hero,Integer)
+ Talent[] talents()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge$EliminationMatchTracker {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge$DuelParticipant {
+ {static} float DURATION
- int left
- int takenDmg
- {static} String LEFT
- {static} String TAKEN_DMG
+ int icon()
+ float iconFadePercent()
+ String iconTextDisplay()
+ void addDamage(int)
+ boolean act()
+ void detach()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge$SpectatorFreeze {
+ void fx(boolean)
+ void detach()
}

class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfWealth {
- float triesToDrop
- int dropsToRare
- {static} String TRIES_TO_DROP
- {static} String DROPS_TO_RARE
- {static} int latestDropTier
+ String statsInfo()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
# RingBuff buff()
+ {static} float dropChanceMultiplier(Char)
+ {static} ArrayList<Item> tryForBonusDrop(Char,int)
+ {static} void showFlareForBonusDrop(Visual)
+ {static} Item genConsumableDrop(int)
- {static} Item genLowValueConsumable()
- {static} Item genMidValueConsumable()
- {static} Item genHighValueConsumable()
- {static} Item genEquipmentDrop(int)
}


class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfWealth$Wealth {
- void triesToDrop(float)
- float triesToDrop()
- void dropsToRare(int)
- int dropsToRare()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Regrowth {
# void evolve()
+ void use(BlobEmitter)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.ConnectionRoom {
- {static} ArrayList<Class<? extends ConnectionRoom>> rooms
- {static} float[][] chances
+ int minWidth()
+ int maxWidth()
+ int minHeight()
+ int maxHeight()
+ int minConnections(int)
+ {static} ConnectionRoom createRoom()
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact {
# Buff passiveBuff
# Buff activeBuff
# int exp
# int levelCap
# int charge
# float partialCharge
# int chargeCap
# int cooldown
- {static} String EXP
- {static} String CHARGE
- {static} String PARTIALCHARGE
+ boolean doEquip(Hero)
+ void activate(Char)
+ boolean doUnequip(Hero,boolean,boolean)
+ boolean isUpgradable()
+ int visiblyUpgraded()
+ int buffedVisiblyUpgraded()
+ int buffedLvl()
+ void transferUpgrade(int)
+ String info()
+ String status()
+ Item random()
+ int value()
# ArtifactBuff passiveBuff()
# ArtifactBuff activeBuff()
+ void charge(Hero,float)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact$ArtifactBuff {
+ boolean attachTo(Char)
+ int itemLevel()
+ boolean isCursed()
+ void charge(Hero,float)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Brute {
# boolean hasRaged
- {static} String HAS_RAGED
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
+ void die(Object)
+ boolean isAlive()
# void triggerEnrage()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Brute$BruteRage {
+ boolean act()
+ int icon()
+ String desc()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.DeathMark {
+ String targetingPrompt()
+ int targetedPos(Char,int)
+ float chargeUse(Hero)
# void activate(ClassArmor,Hero,Integer)
+ {static} void processFearTheReaper(Char)
+ int icon()
+ Talent[] talents()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.DeathMark$DoubleMarkTracker {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.DeathMark$DeathMarkTracker {
+ {static} float DURATION
~ int initialHP
- {static} String INITIAL_HP
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
- void setInitialHP(int)
+ boolean attachTo(Char)
+ void detach()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


enum com.shatteredpixel.shatteredpixeldungeon.journal.Catalog {
+  WEAPONS
+  ARMOR
+  WANDS
+  RINGS
+  ARTIFACTS
+  POTIONS
+  SCROLLS
- LinkedHashMap<Class<? extends Item>,Boolean> seen
+ {static} LinkedHashMap<Catalog,Badges.Badge> catalogBadges
- {static} String CATALOG_ITEMS
+ Collection<Class<? extends Item>> items()
+ boolean allSeen()
+ {static} boolean isSeen(Class<? extends Item>)
+ {static} void setSeen(Class<? extends Item>)
+ {static} void store(Bundle)
+ {static} void restore(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.TengusMask {
- {static} String AC_WEAR
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ boolean doPickUp(Hero,int)
+ boolean isUpgradable()
+ boolean isIdentified()
+ void choose(HeroSubClass)
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ChaliceOfBlood {
+ {static} String AC_PRICK
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
- void prick(Hero)
+ Item upgrade()
+ void restoreFromBundle(Bundle)
# ArtifactBuff passiveBuff()
+ void charge(Hero,float)
+ String desc()
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ChaliceOfBlood$chaliceRegen {
}
class com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfFear {
# void activate(int)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.features.Door {
+ {static} void enter(int)
+ {static} void leave(int)
}

class com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_8_X_Changes {
+ {static} void addAllChanges(ArrayList<ChangeInfo>)
+ {static} void add_v0_8_2_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_8_1_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_8_0_Changes(ArrayList<ChangeInfo>)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing {
- int phase
- int summonsMade
- float summonCooldown
- float abilityCooldown
- int MIN_COOLDOWN
- int MAX_COOLDOWN
- int lastAbility
- {static} int NONE
- {static} int LINK
- {static} int TELE
- {static} String PHASE
- {static} String SUMMONS_MADE
- {static} String SUMMON_CD
- {static} String ABILITY_CD
- {static} String LAST_ABILITY
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
# boolean act()
- boolean summonSubject(int)
- boolean summonSubject(int,Class<? extends Mob>)
- HashSet<Mob> getSubjects()
- boolean lifeLinkSubject()
- boolean teleportSubject()
+ void notice()
+ boolean isInvulnerable(Class)
+ void damage(int,Object)
+ boolean isAlive()
+ void die(Object)
+ boolean isImmune(Class)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$DKGhoul {
# boolean act()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$DKMonk {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$DKWarlock {
# void zap()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$DKGolem {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$Summoning {
- int delay
- int pos
- Class<? extends Mob> summon
- Emitter particles
- {static} String DELAY
- {static} String POS
- {static} String SUMMON
+ int getPos()
+ boolean act()
+ void fx(boolean)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$KingDamager {
+ boolean act()
+ void detach()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$DKBarrior {
+ boolean act()
+ int icon()
}

abstract class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll {
+ {static} HashMap<Class<? extends Scroll>,Class<? extends ExoticScroll>> regToExo
+ {static} HashMap<Class<? extends ExoticScroll>,Class<? extends Scroll>> exoToReg
+ boolean isKnown()
+ void setKnown()
+ void reset()
+ int value()
+ int energyVal()
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll$ScrollToExotic {
+ boolean testIngredients(ArrayList<Item>)
+ int cost(ArrayList<Item>)
+ Item brew(ArrayList<Item>)
+ Item sampleOutput(ArrayList<Item>)
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.RotHeartSprite {
- Emitter cloud
+ void link(Char)
+ void turnTo(int,int)
+ void update()
+ void die()
+ int blood()
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Camouflage {
- {static} ItemSprite.Glowing GREEN
+ int proc(Armor,Char,Char,int)
+ {static} void activate(Char,int)
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.SandalsOfNature {
+ {static} String AC_FEED
+ {static} String AC_ROOT
+ ArrayList<Class> seeds
+ Class curSeedEffect
- {static} HashMap<Class<? extends Plant.Seed>,Integer> seedColors
- {static} HashMap<Class<? extends Plant.Seed>,Integer> seedChargeReqs
- {static} String SEEDS
- {static} String CUR_SEED_EFFECT
# WndBag.ItemSelector itemSelector
# CellSelector.Listener cellSelector
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
# ArtifactBuff passiveBuff()
+ void charge(Hero,float)
+ ItemSprite.Glowing glowing()
+ String name()
+ String desc()
+ Item upgrade()
+ boolean canUseSeed(Item)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.SandalsOfNature$Naturalism {
+ void charge()
}

class com.shatteredpixel.shatteredpixeldungeon.items.spells.ReclaimTrap {
- Class<? extends Trap> storedTrap
- {static} ItemSprite.Glowing[] COLORS
- {static} String STORED_TRAP
+ ArrayList<String> actions(Hero)
# void affectTarget(Ballistica,Hero)
+ String desc()
+ ItemSprite.Glowing glowing()
+ int value()
+ int energyVal()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.spells.ReclaimTrap$Recipe {
- {static} int OUT_QUANTITY
}

abstract class com.shatteredpixel.shatteredpixeldungeon.plants.Plant {
+ int image
+ int pos
# Class<? extends Plant.Seed> seedClass
- {static} String POS
+ void trigger()
+ {abstract}void activate(Char)
+ void wither()
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
+ String name()
+ String desc()
}


class com.shatteredpixel.shatteredpixeldungeon.plants.Plant$Seed {
+ {static} String AC_PLANT
- {static} float TIME_TO_PLANT
# Class<? extends Plant> plantClass
+ ArrayList<String> actions(Hero)
# void onThrow(int)
+ void execute(Hero,String)
+ Plant couch(int,Level)
+ boolean isUpgradable()
+ boolean isIdentified()
+ int value()
+ int energyVal()
+ String desc()
+ String info()
}


class com.shatteredpixel.shatteredpixeldungeon.plants.Plant$Seed$PlaceHolder {
+ boolean isSimilar(Item)
+ String info()
}

class com.shatteredpixel.shatteredpixeldungeon.ui.Window {
# int width
# int height
# int xOffset
# int yOffset
# PointerArea blocker
# ShadowBox shadow
# NinePatch chrome
+ {static} int WHITE
+ {static} int TITLE_COLOR
+ {static} int SHPX_COLOR
+ void resize(int,int)
+ Point getOffset()
+ void offset(Point)
+ void offset(int,int)
+ void boundOffsetWithMargin(int)
+ void hide()
+ void destroy()
+ boolean onSignal(KeyEvent)
+ void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Entanglement {
- {static} ItemSprite.Glowing BROWN
+ int proc(Armor,Char,Char,int)
+ Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.RingTunnelRoom {
- Rect connSpace
+ int minWidth()
+ int minHeight()
+ void paint(Level)
# Rect getConnectionSpace()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.levels.Level {
# int width
# int height
# int length
# {static} float TIME_TO_RESPAWN
+ int version
+ int[] map
+ boolean[] visited
+ boolean[] mapped
+ boolean[] discoverable
+ int viewDistance
+ boolean[] heroFOV
+ boolean[] passable
+ boolean[] losBlocking
+ boolean[] flamable
+ boolean[] secret
+ boolean[] solid
+ boolean[] avoid
+ boolean[] water
+ boolean[] pit
+ boolean[] openSpace
+ Feeling feeling
+ int entrance
+ int exit
+ ArrayList<LevelTransition> transitions
+ boolean locked
+ HashSet<Mob> mobs
+ SparseArray<Heap> heaps
+ HashMap<Class<? extends Blob>,Blob> blobs
+ SparseArray<Plant> plants
+ SparseArray<Trap> traps
+ HashSet<CustomTilemap> customTiles
+ HashSet<CustomTilemap> customWalls
# ArrayList<Item> itemsToSpawn
# Group visuals
# Group wallVisuals
+ int color1
+ int color2
- {static} String VERSION
- {static} String WIDTH
- {static} String HEIGHT
- {static} String MAP
- {static} String VISITED
- {static} String MAPPED
- {static} String TRANSITIONS
- {static} String LOCKED
- {static} String HEAPS
- {static} String PLANTS
- {static} String TRAPS
- {static} String CUSTOM_TILES
- {static} String CUSTOM_WALLS
- {static} String MOBS
- {static} String BLOBS
- {static} String FEELING
- ArrayList<Class<? extends Mob>> mobsToSpawn
- Respawner respawner
- {static} boolean[] heroMindFov
- {static} boolean[] modifiableBlocking
+ void create()
+ void setSize(int,int)
+ void reset()
+ void playLevelMusic()
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
+ int tunnelTile()
+ int width()
+ int height()
+ int length()
+ String tilesTex()
+ String waterTex()
# {abstract}boolean build()
+ Mob createMob()
# {abstract}void createMobs()
# {abstract}void createItems()
+ int entrance()
+ int exit()
+ LevelTransition getTransition(LevelTransition.Type)
+ LevelTransition getTransition(int)
+ boolean activateTransition(Hero,LevelTransition)
+ {static} void beforeTransition()
+ void seal()
+ void unseal()
+ ArrayList<Item> getItemsToPreserveFromSealedResurrect()
+ Group addVisuals()
+ Group addWallVisuals()
+ int mobLimit()
+ int mobCount()
+ Mob findMob(int)
+ Actor addRespawner()
+ float respawnCooldown()
+ boolean spawnMob(int)
+ int randomRespawnCell(Char)
+ int randomDestination(Char)
+ void addItemToSpawn(Item)
+ Item findPrizeItem()
+ Item findPrizeItem(Class<? extends Item>)
+ void buildFlagMaps()
+ void destroy(int)
+ void cleanWalls()
+ {static} void set(int,int)
+ {static} void set(int,int,Level)
+ Heap drop(Item,int)
+ Plant plant(Plant.Seed,int)
+ void uproot(int)
+ Trap setTrap(Trap,int)
+ void disarmTrap(int)
+ void discover(int)
+ boolean setCellToWater(boolean,int)
+ int fallCell(boolean)
+ void occupyCell(Char)
+ void pressCell(int)
- void pressCell(int,boolean)
+ void updateFieldOfView(Char,boolean[])
+ boolean isLevelExplored(int)
+ int distance(int,int)
+ boolean adjacent(int,int)
+ float trueDistance(int,int)
+ boolean insideMap(int)
+ Point cellToPoint(int)
+ int pointToCell(Point)
+ String tileName(int)
+ String tileDesc(int)
}


enum com.shatteredpixel.shatteredpixeldungeon.levels.Feeling {
+  NONE
+  CHASM
+  WATER
+  GRASS
+  DARK
+  LARGE
+  TRAPS
+  SECRETS
}

class com.shatteredpixel.shatteredpixeldungeon.levels.Level$Respawner {
# boolean act()
# void resetCooldown()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.CaveEntranceRoom {
+ int minHeight()
+ int minWidth()
+ float[] sizeCatProbs()
+ boolean isEntrance()
+ void paint(Level)
+ boolean connect(Room)
}

class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight {
+ {static} String AC_SCRY
- CellSelector.Listener scry
- {static} String WARN
- boolean warn
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
# ArtifactBuff passiveBuff()
+ void charge(Hero,float)
+ String desc()
- float maxDist()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight$Foresight {
+ boolean act()
+ void checkAwareness()
+ void charge(int)
+ int icon()
}

class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight$CharAwareness {
+ int charID
- {static} String CHAR_ID
+ void detach()
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight$HeapAwareness {
+ int pos
+ int depth
+ int branch
- {static} String POS
- {static} String DEPTH
- {static} String BRANCH
+ void detach()
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.LarvaSprite {
+ int blood()
+ void die()
}

class com.shatteredpixel.shatteredpixeldungeon.items.Honeypot {
+ {static} String AC_SHATTER
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
# void onThrow(int)
+ Item shatter(Char,int)
+ boolean isUpgradable()
+ boolean isIdentified()
+ int value()
}


class com.shatteredpixel.shatteredpixeldungeon.items.Honeypot$ShatteredPot {
+ boolean doPickUp(Hero,int)
+ void doDrop(Hero)
# void onThrow(int)
+ void pickupPot(Char)
+ void dropPot(Char,int)
+ void movePot(int,int)
+ void destroyPot(int)
- void updateBee(Bee,int,Char)
- ArrayList<Bee> findBees(int)
- ArrayList<Bee> findBees(Char)
+ boolean isUpgradable()
+ boolean isIdentified()
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.CavesFissureExitRoom {
+ float[] sizeCatProbs()
+ boolean isExit()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfDragonsBlood {
+ void apply(Hero)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfDragonsBlood$Recipe {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.WildMagic {
~ Actor wildMagicActor
+ String targetingPrompt()
# void activate(ClassArmor,Hero,Integer)
- void zapWand(ArrayList<Wand>,Hero,int)
- void afterZap(Wand,ArrayList<Wand>,Hero,int)
+ int icon()
+ Talent[] talents()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.WildMagic$WildMagicTracker {
}
abstract class com.shatteredpixel.shatteredpixeldungeon.levels.painters.RegularPainter {
- float waterFill
- int waterSmoothness
- float grassFill
- int grassSmoothness
- int nTraps
- Class<? extends Trap>[] trapClasses
- float[] trapChances
+ RegularPainter setWater(float,int)
+ RegularPainter setGrass(float,int)
+ RegularPainter setTraps(int,Class<?>[],float[])
# int padding(Level)
+ boolean paint(Level,ArrayList<Room>)
# {abstract}void decorate(Level,ArrayList<Room>)
- void placeDoors(Room)
# void paintDoors(Level,ArrayList<Room>)
# boolean mergeRooms(Level,Room,Room,Point,int)
# void paintWater(Level,ArrayList<Room>)
# void paintGrass(Level,ArrayList<Room>)
# void paintTraps(Level,ArrayList<Room>)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.MirrorImage {
- Hero hero
- int heroID
+ int armTier
- {static} String HEROID
# boolean act()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void duplicate(Hero)
+ int damageRoll()
+ int attackSkill(Char)
+ int defenseSkill(Char)
+ float attackDelay()
# boolean canAttack(Char)
+ int drRoll()
+ int attackProc(Char,int)
+ CharSprite sprite()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.MirrorImage$MirrorInvis {
+ int icon()
}

class com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTerrainTilemap {
~ {static} DungeonTerrainTilemap instance
# int getTileVisual(int,int,boolean)
+ {static} Image tile(int,int)
# boolean needsRender(int)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.CrabSprite {
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Corruption {
- float buildToDamage
+ {static} void corruptionHeal(Char)
+ boolean act()
+ void fx(boolean)
+ int icon()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene {
- {static} int FRAME_WIDTH
- {static} int FRAME_HEIGHT
- {static} int FRAME_MARGIN_TOP
- {static} int FRAME_MARGIN_X
- {static} int BUTTON_HEIGHT
- {static} int SKY_WIDTH
- {static} int SKY_HEIGHT
- {static} int NSTARS
- {static} int NCLOUDS
- Pet[] rats
- Camera viewport
- float ratJumpTimer
+ void create()
+ void update()
+ void destroy()
# void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$Sky {
- {static} int[] day
- {static} int[] night
- SmartTexture texture
- FloatBuffer verticesBuffer
+ void draw()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$Cloud {
- {static} int lastIndex
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$Avatar {
- {static} int WIDTH
- {static} int HEIGHT
}

class com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$Pet {
+ void jump()
+ void onComplete(Animation)
}

class com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$GrassPatch {
+ {static} int WIDTH
+ {static} int HEIGHT
- float tx
- float ty
- double a
- double angle
- boolean forward
+ void update()
# void updateMatrix()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.SacrificialFire {
~ BlobEmitter curEmitter
- int bonusSpawns
- Item prize
- {static} String BONUS_SPAWNS
- {static} String PRIZE
# void evolve()
+ void use(BlobEmitter)
+ String tileDesc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void setPrize(Item)
+ void sacrifice(Char)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.SacrificialFire$Marked {
+ {static} float DURATION
+ void detach()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.particles.FlameParticle {
+ {static} Emitter.Factory FACTORY
+ void reset(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.UnstableSpellbook {
+ {static} String AC_READ
+ {static} String AC_ADD
- ArrayList<Class> scrolls
- {static} String SCROLLS
# WndBag.ItemSelector itemSelector
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
# ArtifactBuff passiveBuff()
+ void charge(Hero,float)
+ Item upgrade()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.UnstableSpellbook$ExploitHandler {
+ Scroll scroll
+ boolean act()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.UnstableSpellbook$bookRecharge {
+ boolean act()
}

class com.shatteredpixel.shatteredpixeldungeon.effects.particles.SacrificialParticle {
+ {static} Emitter.Factory FACTORY
+ void reset(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave {
+ int min(int)
+ int max(int)
+ void onZap(Ballistica)
+ {static} void throwChar(Char,Ballistica,int,boolean,boolean,Object)
+ void onHit(MagesStaff,Char,Char,int)
+ void fx(Ballistica,Callback)
+ void staffFx(MagesStaff.StaffParticle)
}

class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave$Knockback {
}
class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave$BlastWaveOnHit {
# float procChanceMultiplier(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave$BlastWave {
- {static} float TIME_TO_FADE
- float time
+ void reset(int)
+ void update()
+ {static} void blast(int)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GreatCrab {
- int moving
# boolean getCloser(int)
+ void damage(int,Object)
+ int defenseSkill(Char)
+ void die(Object)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GreatCrab$Wandering {
# int randomDestination()
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Mageroyal {
+ void activate(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Mageroyal$Seed {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Piranha {
# boolean act()
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
+ boolean surprisedBy(Char,boolean)
+ void dieOnLand()
+ void die(Object)
+ float spawningWeight()
+ boolean reset()
# boolean getCloser(int)
# boolean getFurther(int)
+ {static} Piranha random()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Piranha$Sleeping {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Piranha$Wandering {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Piranha$Hunting {
+ boolean act(boolean,boolean)
}

enum com.shatteredpixel.shatteredpixeldungeon.Rankings {
+  INSTANCE
+ {static} int TABLE_SIZE
+ {static} String RANKINGS_FILE
+ ArrayList<Record> records
+ int lastRecord
+ int totalNumber
+ int wonNumber
+ int localTotal
+ int localWon
+ Record latestDaily
+ Record latestDailyReplay
+ LinkedHashMap<Long,Integer> dailyScoreHistory
+ {static} String HERO
+ {static} String STATS
+ {static} String BADGES
+ {static} String HANDLERS
+ {static} String CHALLENGES
+ {static} String GAME_VERSION
+ {static} String SEED
+ {static} String CUSTOM_SEED
+ {static} String DAILY
+ {static} String DAILY_REPLAY
- {static} String RECORDS
- {static} String LATEST
- {static} String TOTAL
- {static} String WON
+ {static} String LATEST_DAILY
+ {static} String DAILY_HISTORY_DATES
+ {static} String DAILY_HISTORY_SCORES
+ {static} Comparator<Record> scoreComparator
+ void submit(boolean,Object)
- int score(boolean)
+ int calculateScore()
+ void saveGameData(Record)
+ void loadGameData(Record)
+ void save()
+ void load()
}


class com.shatteredpixel.shatteredpixeldungeon.Record {
- {static} String CAUSE
- {static} String WIN
- {static} String SCORE
- {static} String CLASS
- {static} String TIER
- {static} String LEVEL
- {static} String DEPTH
- {static} String ASCEND
- {static} String DATA
- {static} String ID
- {static} String SEED
- {static} String DAILY
- {static} String DATE
- {static} String VERSION
+ Class cause
+ boolean win
+ HeroClass heroClass
+ int armorTier
+ int herolevel
+ int depth
+ boolean ascending
+ Bundle gameData
+ String gameID
+ int score
+ String customSeed
+ boolean daily
+ String date
+ String version
+ String desc()
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MineGiantRoom {
+ float[] sizeCatProbs()
# float fill()
+ int mobSpawnWeight()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.items.spells.SummonElemental {
+ {static} String AC_IMBUE
- Class<? extends Elemental> summonClass
- {static} String SUMMON_CLASS
+ WndBag.ItemSelector selector
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
# void onCast(Hero)
+ ItemSprite.Glowing glowing()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.spells.SummonElemental$InvisAlly {
+ void fx(boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.items.spells.SummonElemental$Recipe {
- {static} int OUT_QUANTITY
}

enum com.shatteredpixel.shatteredpixeldungeon.messages.Languages {
+  ENGLISH
+  CHINESE
- String name
- String code
- Status status
- String[] reviewers
- String[] translators
+ String nativeName()
+ String code()
+ Status status()
+ String[] reviewers()
+ String[] translators()
+ {static} Languages matchLocale(Locale)
+ {static} Languages matchCode(String)
}


enum com.shatteredpixel.shatteredpixeldungeon.messages.Status {
+  X_UNFINISH
+  __UNREVIEW
+  O_COMPLETE
}

class com.shatteredpixel.shatteredpixeldungeon.items.bombs.RegrowthBomb {
+ boolean explodesDestructively()
+ void explode(int)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.DisplacingDart {
+ int proc(Char,Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction {
+ int dst
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Move {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$PickUp {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$OpenChest {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Buy {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Interact {
+ Char ch
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Unlock {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$LvlTransition {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Mine {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Alchemy {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Attack {
+ Char target
}

class com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel {
- State state
- Tengu tengu
- {static} String STATE
- {static} String TENGU
- {static} String STORED_ITEMS
- {static} String TRIGGERED
- {static} int ENTRANCE_POS
- {static} Rect entranceRoom
- {static} Rect startHallway
- {static} Rect[] startCells
- {static} Rect tenguCell
- {static} Point tenguCellCenter
- {static} Point tenguCellDoor
- {static} Point[] startTorches
- {static} Rect pauseSafeArea
- {static} Rect arena
- {static} int W
- {static} int D
- {static} int e
- {static} int E
- {static} int C
- {static} Point endStart
- {static} Point levelExit
- {static} int[] endMap
- ArrayList<Item> storedItems
- boolean[] triggered
+ void playLevelMusic()
+ State state()
+ String tilesTex()
+ String waterTex()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
# boolean build()
- void setMapStart()
- void setMapPause()
- void setMapArena()
- void setMapEnd()
- void clearEntities(Rect)
- void cleanMapState()
+ Group addVisuals()
+ void progress()
+ void occupyCell(Char)
# void createMobs()
+ Actor addRespawner()
# void createItems()
+ ArrayList<Item> getItemsToPreserveFromSealedResurrect()
- int randomPrisonCellPos()
+ int randomTenguCellPos()
+ void cleanTenguCell()
+ void placeTrapsInTenguCell(float)
+ int randomRespawnCell(Char)
+ String tileName(int)
+ String tileDesc(int)
}


enum com.shatteredpixel.shatteredpixeldungeon.levels.State {
+  START
+  FIGHT_START
+  FIGHT_PAUSE
+  FIGHT_ARENA
+  WON
}

class com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel$FadingTraps {
~ Rect area
- float fadeDuration
- float initialAlpha
- float fadeDelay
+ void setCoveringArea(Rect)
+ Tilemap create()
+ String name(int,int)
+ String desc(int,int)
- void setFade()
- void remove()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel$ExitVisual {
~ int TEX_WIDTH
- {static} byte[] render
+ Tilemap create()
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel$ExitVisualWalls {
~ int TEX_WIDTH
- {static} byte[] render
+ Tilemap create()
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.Banner {
- State state
- float time
- int color
- float fadeTime
- float showTime
+ void show(int,float,float)
+ void show(int,float)
+ void update()
}


enum com.shatteredpixel.shatteredpixeldungeon.ui.State {
+  FADE_IN
+  STATIC
+  FADE_OUT
}

class com.shatteredpixel.shatteredpixeldungeon.Statistics {
+ {static} int goldCollected
+ {static} int deepestFloor
+ {static} int highestAscent
+ {static} int enemiesSlain
+ {static} int foodEaten
+ {static} int itemsCrafted
+ {static} int piranhasKilled
+ {static} int ankhsUsed
+ {static} int progressScore
+ {static} int heldItemValue
+ {static} int treasureScore
+ {static} SparseArray<Boolean> floorsExplored
+ {static} int exploreScore
+ {static} int[] bossScores
+ {static} int totalBossScore
+ {static} int[] questScores
+ {static} int totalQuestScore
+ {static} float winMultiplier
+ {static} float chalMultiplier
+ {static} int totalScore
+ {static} int upgradesUsed
+ {static} int sneakAttacks
+ {static} int thrownAttacks
+ {static} int spawnersAlive
+ {static} float duration
+ {static} boolean qualifiedForNoKilling
+ {static} boolean completedWithNoKilling
+ {static} boolean qualifiedForBossRemainsBadge
+ {static} boolean qualifiedForBossChallengeBadge
+ {static} boolean amuletObtained
+ {static} boolean gameWon
+ {static} boolean ascended
- {static} String GOLD
- {static} String DEEPEST
- {static} String HIGHEST
- {static} String SLAIN
- {static} String FOOD
- {static} String ALCHEMY
- {static} String PIRANHAS
- {static} String ANKHS
- {static} String PROG_SCORE
- {static} String ITEM_VAL
- {static} String TRES_SCORE
- {static} String FLR_EXPL
- {static} String EXPL_SCORE
- {static} String BOSS_SCORES
- {static} String TOT_BOSS
- {static} String QUEST_SCORES
- {static} String TOT_QUEST
- {static} String WIN_MULT
- {static} String CHAL_MULT
- {static} String TOTAL_SCORE
- {static} String UPGRADES
- {static} String SNEAKS
- {static} String THROWN
- {static} String SPAWNERS
- {static} String DURATION
- {static} String NO_KILLING_QUALIFIED
- {static} String BOSS_REMAINS_QUALIFIED
- {static} String BOSS_CHALLENGE_QUALIFIED
- {static} String AMULET
- {static} String WON
- {static} String ASCENDED
+ {static} void reset()
+ {static} void storeInBundle(Bundle)
+ {static} void restoreFromBundle(Bundle)
+ {static} void preview(GamesInProgress.Info,Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.CorrosiveGas {
- int strength
- Class source
- {static} String STRENGTH
- {static} String SOURCE
# void evolve()
+ CorrosiveGas setStrength(int)
+ CorrosiveGas setStrength(int,Class)
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
+ void use(BlobEmitter)
+ String tileDesc()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Slime {
+ int damageRoll()
+ int attackSkill(Char)
+ void damage(int,Object)
+ float lootChance()
+ Item createLoot()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa {
- int phase
- float abilityCooldown
- {static} int MIN_ABILITY_CD
- {static} int MAX_ABILITY_CD
- float summonCooldown
- {static} int MIN_SUMMON_CD
- {static} int MAX_SUMMON_CD
- ArrayList<Class> fistSummons
- ArrayList<Class> challengeSummons
- ArrayList<Class> regularSummons
- ArrayList<Integer> targetedCells
- {static} String PHASE
- {static} String ABILITY_CD
- {static} String SUMMON_CD
- {static} String FIST_SUMMONS
- {static} String REGULAR_SUMMONS
- {static} String CHALLENGE_SUMMONS
- {static} String TARGETED_CELLS
- {static} Class getPairedFist(Class)
+ int attackSkill(Char)
# boolean act()
+ boolean isAlive()
+ boolean isInvulnerable(Class)
+ void damage(int,Object)
+ void addFist(YogFist)
+ void updateVisibility(Level)
- YogFist findFist()
+ void beckon(int)
+ void clearEnemy()
+ void aggro(Char)
+ void die(Object)
+ void notice()
+ String description()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa$Larva {
+ int attackSkill(Char)
+ int damageRoll()
+ int drRoll()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa$YogRipper {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa$YogEye {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa$YogScorpio {
}
class com.shatteredpixel.shatteredpixeldungeon.scenes.SupporterScene {
- {static} int BTN_HEIGHT
- {static} int GAP
+ void create()
# void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.SupporterScene$SupporterMessage {
~ NinePatch bg
~ RenderedTextBlock text
~ Image icon
# void createChildren()
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.HeroicLeap {
+ String targetingPrompt()
+ float chargeUse(Hero)
+ void activate(ClassArmor,Hero,Integer)
+ int icon()
+ Talent[] talents()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.HeroicLeap$DoubleJumpTracker {
}
class com.shatteredpixel.shatteredpixeldungeon.levels.HallsBossLevel {
- {static} int WIDTH
- {static} int HEIGHT
- {static} int ROOM_LEFT
- {static} int ROOM_RIGHT
- {static} int ROOM_TOP
- {static} int ROOM_BOTTOM
+ void playLevelMusic()
+ String tilesTex()
+ String waterTex()
# boolean build()
# void createMobs()
+ Actor addRespawner()
# void createItems()
+ int randomRespawnCell(Char)
+ void occupyCell(Char)
+ void seal()
+ void unseal()
+ void restoreFromBundle(Bundle)
+ boolean activateTransition(Hero,LevelTransition)
+ String tileName(int)
+ String tileDesc(int)
+ Group addVisuals()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.HallsBossLevel$CenterPieceVisuals {
- {static} int[] map
+ Tilemap create()
- void updateState()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.HallsBossLevel$CenterPieceWalls {
- {static} int[] map
+ Tilemap create()
- void updateState()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.AboutScene {
+ void create()
# void onBackPressed()
- void addLine(float,Group)
}

class com.shatteredpixel.shatteredpixeldungeon.scenes.AboutScene$CreditsBlock {
~ boolean large
~ RenderedTextBlock title
~ Image avatar
~ Flare flare
~ RenderedTextBlock body
~ RenderedTextBlock link
~ ColorBlock linkUnderline
~ PointerArea linkButton
# void layout()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.items.stones.InventoryStone {
+ {static} String AC_USE
# Class<? extends Bag> preferredBag
# WndBag.ItemSelector itemSelector
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
# void activate(int)
# void useAnimation()
- String inventoryTitle()
# boolean usableOnItem(Item)
# {abstract}void onItemSelected(Item)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.builders.FigureEightBuilder {
- int curveExponent
- float curveIntensity
- float curveOffset
- Room landmarkRoom
~ ArrayList<Room> firstLoop
~ PointF firstLoopCenter
+ FigureEightBuilder setLoopShape(int,float,float)
- float targetAngle(float)
- double curveEquation(double)
+ FigureEightBuilder setLandmarkRoom(Room)
+ ArrayList<Room> build(ArrayList<Room>)
# float randomBranchAngle(Room)
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene {
- {static} InputButton[] inputs
- {static} CombineButton[] combines
- {static} OutputSlot[] outputs
- IconButton cancel
- IconButton repeat
- {static} ArrayList<Item> lastIngredients
- {static} Recipe lastRecipe
- Emitter smokeEmitter
- Emitter bubbleEmitter
- Emitter sparkEmitter
- Emitter lowerBubbles
- SkinnedBlock water
- Image energyIcon
- RenderedTextBlock energyLeft
- IconButton energyAdd
- boolean energyAddBlinking
- {static} int BTN_SIZE
# WndBag.ItemSelector itemSelector
- {static} AlchemistsToolkit toolkit
+ void create()
+ void update()
# void onBackPressed()
- ArrayList<T> filterInput(Class<? extends T>)
- void updateState()
- void combine(int)
+ void craftItem(ArrayList<Item>,Item)
+ void populate(ArrayList<Item>,Belongings)
+ void destroy()
+ void clearSlots()
+ void createEnergy()
+ {static} void assignToolkit(AlchemistsToolkit)
+ {static} void clearToolkit()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene$InputButton {
# NinePatch bg
# ItemSlot slot
- Item item
# void createChildren()
# void layout()
+ Item item()
+ void item(Item)
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene$CombineButton {
# int slot
# RedButton button
# RenderedTextBlock costText
# void createChildren()
# void layout()
+ void enable(boolean)
+ void enable(boolean,int)
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene$OutputSlot {
# NinePatch bg
# ItemSlot slot
# void createChildren()
# void layout()
+ void item(Item)
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfExperience {
+ void apply(Hero)
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.items.spells.Recycle {
# boolean usableOnItem(Item)
# void onItemSelected(Item)
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.items.spells.Recycle$Recipe {
- {static} int OUT_QUANTITY
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.HeroSprite {
- {static} int FRAME_WIDTH
- {static} int FRAME_HEIGHT
- {static} int RUN_FRAMERATE
- {static} TextureFilm tiers
- Animation fly
- Animation read
+ void updateArmor()
+ void place(int)
+ void move(int,int)
+ void idle()
+ void jump(int,int,float,float,Callback)
+ void read()
+ void bloodBurstA(PointF,int)
+ void update()
+ void sprint(float)
+ {static} TextureFilm tiers()
+ {static} Image avatar(HeroClass,int)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.WardSprite {
- Animation[] tierIdles
- float baseY
+ void zap(int)
+ void turnTo(int,int)
+ void die()
+ void resetColor()
+ void linkVisuals(Char)
+ void updateTier(int)
+ void place(int)
+ void update()
+ int blood()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.SheepSprite {
}
class com.shatteredpixel.shatteredpixeldungeon.items.quest.DarkGold {
+ boolean isUpgradable()
+ boolean isIdentified()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.GuardianTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.GuardianTrap$Guardian {
+ void createWeapon(boolean)
+ void beckon(int)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.GuardianTrap$GuardianSprite {
+ void resetColor()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.CausticBrew {
+ void shatter(int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.CausticBrew$Recipe {
}
class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfChallenge {
+ void doRead()
}

class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfChallenge$ChallengeArena {
- ArrayList<Integer> arenaPositions
- ArrayList<Emitter> arenaEmitters
- {static} float DURATION
~ int left
- {static} String ARENA_POSITIONS
- {static} String LEFT
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void setup(int)
+ boolean act()
+ void fx(boolean)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Brimstone {
- {static} ItemSprite.Glowing ORANGE
+ int proc(Armor,Char,Char,int)
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.CircleBasinEntranceRoom {
+ float[] sizeCatProbs()
+ boolean isEntrance()
+ void paint(Level)
+ boolean connect(Room)
}

class com.shatteredpixel.shatteredpixeldungeon.journal.Notes {
- {static} ArrayList<Record> records
- {static} String RECORDS
+ {static} void reset()
+ {static} void storeInBundle(Bundle)
+ {static} void restoreFromBundle(Bundle)
+ {static} boolean add(Landmark)
+ {static} boolean remove(Landmark)
+ {static} boolean add(Key)
+ {static} boolean remove(Key)
+ {static} int keyCount(Key)
+ {static} ArrayList<Record> getRecords()
+ {static} ArrayList<T> getRecords(Class<T>)
+ {static} void remove(Record)
}


abstract class com.shatteredpixel.shatteredpixeldungeon.journal.Notes$Record {
# int depth
- {static} String DEPTH
+ int depth()
+ {abstract}String desc()
+ {abstract}boolean equals(Object)
+ int compareTo(Record)
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
}


enum com.shatteredpixel.shatteredpixeldungeon.journal.Landmark {
+  WELL_OF_HEALTH
+  WELL_OF_AWARENESS
+  ALCHEMY
+  GARDEN
+  STATUE
+  SACRIFICIAL_FIRE
+  SHOP
+  GHOST
+  WANDMAKER
+  TROLL
+  IMP
+  DEMON_SPAWNER
+ String desc()
}


class com.shatteredpixel.shatteredpixeldungeon.journal.Notes$LandmarkRecord {
# Landmark landmark
- {static} String LANDMARK
+ String desc()
+ boolean equals(Object)
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.journal.Notes$KeyRecord {
# Key key
- {static} String KEY
+ int depth()
+ String desc()
+ Class<? extends Key> type()
+ int quantity()
+ void quantity(int)
+ boolean equals(Object)
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfStormClouds {
+ void shatter(int)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.Shockwave {
+ String targetingPrompt()
+ int targetedPos(Char,int)
# void activate(ClassArmor,Hero,Integer)
+ int icon()
+ Talent[] talents()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.TrapsRoom {
- {static} Class<? extends Trap>[][] levelTraps
+ void paint(Level)
- {static} Item prize(Level)
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CloakOfShadows {
+ {static} String AC_STEALTH
- {static} String STEALTHED
- {static} String BUFF
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ void activate(Char)
+ boolean doUnequip(Hero,boolean,boolean)
+ boolean collect(Bag)
# void onDetach()
# ArtifactBuff passiveBuff()
# ArtifactBuff activeBuff()
+ void charge(Hero,float)
+ void directCharge(int)
+ Item upgrade()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int value()
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CloakOfShadows$cloakRecharge {
+ boolean act()
}

class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CloakOfShadows$cloakStealth {
~ int turnsToCost
- {static} String TURNSTOCOST
- {static} String BARRIER_INC
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ boolean attachTo(Char)
+ boolean act()
+ void dispel()
+ void fx(boolean)
+ void detach()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.DemonSpawnerRoom {
+ void paint(Level)
+ boolean connect(Room)
+ boolean canPlaceTrap(Point)
+ boolean canPlaceWater(Point)
+ boolean canPlaceGrass(Point)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.DemonSpawnerRoom$CustomFloor {
+ Tilemap create()
}

class com.shatteredpixel.shatteredpixeldungeon.ui.buttons.QuickSlotButton {
- {static} QuickSlotButton[] instance
- int slotNum
- ItemSlot slot
- Image crossB
- Image crossM
+ {static} int targetingSlot
+ {static} Char lastTarget
- WndBag.ItemSelector itemSelector
+ {static} int lastVisible
+ void destroy()
+ {static} void reset()
# void createChildren()
# void layout()
+ void alpha(float)
+ void update()
+ GameAction keyAction()
+ GameAction secondaryTooltipAction()
# String hoverText()
# void onClick()
# void onRightClick()
# void onMiddleClick()
# boolean onLongClick()
+ {static} void set(Item)
+ {static} void set(int,Item)
- {static} Item select(int)
+ void item(Item)
+ void enable(boolean)
- void enableSlot()
+ void slotMargins(int,int,int,int)
+ {static} void useTargeting(int)
- void useTargeting()
+ {static} int autoAim(Char)
+ {static} int autoAim(Char,Item)
+ {static} void refresh()
+ {static} void target(Char)
+ {static} void cancel()
}


class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfEvasion {
+ String statsInfo()
# RingBuff buff()
+ {static} float evasionMultiplier(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfEvasion$Evasion {
}
class com.shatteredpixel.shatteredpixeldungeon.ui.LootIndicator {
- ItemSlot slot
- Item lastItem
- int lastQuantity
# void createChildren()
# void layout()
+ void update()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.items.spells.Spell {
+ {static} String AC_CAST
# float talentFactor
# float talentChance
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ boolean isIdentified()
+ boolean isUpgradable()
# {abstract}void onCast(Hero)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.changelist.WndChangesTabbed {
# {static} int WIDTH_MIN
# {static} int WIDTH_MAX
# {static} int GAP
- ArrayList<RenderedTextBlock> texts
- String numToNumeral(int)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.CavesFissureEntranceRoom {
+ float[] sizeCatProbs()
+ boolean isEntrance()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.GnollSapperSprite {
+ void onComplete(Animation)
}

class com.shatteredpixel.shatteredpixeldungeon.ui.CurrencyIndicator {
- {static} float TIME
- int lastGold
- int lastEnergy
- BitmapText gold
- BitmapText energy
- float goldTime
- float energyTime
# void createChildren()
# void layout()
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.Endure {
# void activate(ClassArmor,Hero,Integer)
+ int icon()
+ Talent[] talents()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.Endure$EndureTracker {
+ boolean enduring
+ int damageBonus
+ int hitsLeft
+ {static} String ENDURING
+ {static} String DAMAGE_BONUS
+ {static} String HITS_LEFT
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String desc()
+ float adjustDamageTaken(float)
+ void endEnduring()
+ float damageFactor(float)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.particles.BlastParticle {
+ {static} Factory FACTORY
+ void reset(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfMagicalSight {
+ void apply(Hero)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand {
+ {static} String AC_ZAP
- {static} float TIME_TO_ZAP
+ int maxCharges
+ int curCharges
+ float partialCharge
# Charger charger
+ boolean curChargeKnown
+ boolean curseInfusionBonus
+ int resinBonus
- {static} int USES_TO_ID
- float usesLeftToID
- float availableUsesToID
# int collisionProperties
- {static} String USES_LEFT_TO_ID
- {static} String AVAILABLE_USES
- {static} String CUR_CHARGES
- {static} String CUR_CHARGE_KNOWN
- {static} String PARTIALCHARGE
- {static} String CURSE_INFUSION_BONUS
- {static} String RESIN_BONUS
# {static} CellSelector.Listener zapper
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ int targetingPos(Hero,int)
+ {abstract}void onZap(Ballistica)
+ {abstract}void onHit(MagesStaff,Char,Char,int)
+ {static} float procChanceMultiplier(Char)
+ boolean tryToZap(Hero,int)
+ boolean collect(Bag)
+ void gainCharge(float)
+ void gainCharge(float,boolean)
+ void charge(Char)
+ void charge(Char,float)
# void wandProc(Char,int)
# {static} void wandProc(Char,int,int)
+ void onDetach()
+ void stopCharging()
+ void level(int)
+ Item identify(boolean)
+ void onHeroGainExp(float,Hero)
+ String info()
+ String statsDesc()
+ boolean isIdentified()
+ String status()
+ int level()
+ Item upgrade()
+ Item degrade()
+ int buffedLvl()
+ void updateLevel()
# int initialCharges()
# int chargesPerCast()
+ void fx(Ballistica,Callback)
+ void staffFx(MagesStaff.StaffParticle)
# void wandUsed()
+ Item random()
+ ItemSprite.Glowing glowing()
+ int value()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void reset()
+ int collisionProperties(int)
}


class com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand$PlaceHolder {
+ boolean isSimilar(Item)
+ void onZap(Ballistica)
+ void onHit(MagesStaff,Char,Char,int)
+ String info()
}

class com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand$Charger {
- {static} float BASE_CHARGE_DELAY
- {static} float SCALING_CHARGE_ADDITION
- {static} float NORMAL_SCALE_FACTOR
- {static} float CHARGE_BUFF_BONUS
~ float scalingFactor
+ boolean attachTo(Char)
+ boolean act()
- void recharge()
+ Wand wand()
+ void gainCharge(float)
- void setScaleFactor(float)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.ChasmRoom {
+ float[] sizeCatProbs()
+ int minHeight()
+ int minWidth()
# float fill()
# int clustering()
# boolean ensurePath()
# boolean cleanEdges()
+ void merge(Level,Room,Rect,int)
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.PrismaticImage {
- Hero hero
- int heroID
+ int armTier
- int deathTimer
- {static} String HEROID
- {static} String TIMER
# boolean act()
+ void die(Object)
+ boolean isActive()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void duplicate(Hero,int)
+ int damageRoll()
+ int attackSkill(Char)
+ int defenseSkill(Char)
+ int drRoll()
+ int defenseProc(Char,int)
+ void damage(int,Object)
+ float speed()
+ int attackProc(Char,int)
+ CharSprite sprite()
+ boolean isImmune(Class)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.PrismaticImage$Wandering {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.TreasuryRoom {
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.SpawnerSprite {
- float baseY
+ void place(int)
+ void update()
+ void die()
+ void bloodBurstA(PointF,int)
}


class com.shatteredpixel.shatteredpixeldungeon.SPDSettings {
+ {static} String KEY_VERSION
+ {static} String KEY_FULLSCREEN
+ {static} String KEY_LANDSCAPE
+ {static} String KEY_POWER_SAVER
+ {static} String KEY_ZOOM
+ {static} String KEY_BRIGHTNESS
+ {static} String KEY_GRID
+ {static} String KEY_CAMERA_FOLLOW
+ {static} String KEY_SCREEN_SHAKE
+ {static} String KEY_UI_SIZE
+ {static} String KEY_SCALE
+ {static} String KEY_QUICK_SWAP
+ {static} String KEY_FLIPTOOLBAR
+ {static} String KEY_FLIPTAGS
+ {static} String KEY_BARMODE
+ {static} String KEY_SLOTWATERSKIN
+ {static} String KEY_SYSTEMFONT
+ {static} String KEY_VIBRATION
+ {static} String KEY_LAST_CLASS
+ {static} String KEY_CHALLENGES
+ {static} String KEY_CUSTOM_SEED
+ {static} String KEY_LAST_DAILY
+ {static} String KEY_INTRO
+ {static} String KEY_SUPPORT_NAGGED
+ {static} String KEY_CONTROLLER_SENS
+ {static} String KEY_MOVE_SENS
+ {static} String KEY_NEWS
+ {static} String KEY_UPDATES
+ {static} String KEY_BETAS
+ {static} String KEY_WIFI
+ {static} String KEY_NEWS_LAST_READ
+ {static} String KEY_MUSIC
+ {static} String KEY_MUSIC_VOL
+ {static} String KEY_SOUND_FX
+ {static} String KEY_SFX_VOL
+ {static} String KEY_IGNORE_SILENT
+ {static} String KEY_MUSIC_BG
+ {static} String KEY_LANG
+ {static} String KEY_WINDOW_WIDTH
+ {static} String KEY_WINDOW_HEIGHT
+ {static} String KEY_WINDOW_MAXIMIZED
+ {static} void version(int)
+ {static} int version()
+ {static} void fullscreen(boolean)
+ {static} boolean fullscreen()
+ {static} void landscape(boolean)
+ {static} Boolean landscape()
+ {static} void powerSaver(boolean)
+ {static} boolean powerSaver()
+ {static} void zoom(int)
+ {static} int zoom()
+ {static} void brightness(int)
+ {static} int brightness()
+ {static} void visualGrid(int)
+ {static} int visualGrid()
+ {static} void cameraFollow(int)
+ {static} int cameraFollow()
+ {static} void screenShake(int)
+ {static} int screenShake()
+ {static} void interfaceSize(int)
+ {static} int interfaceSize()
+ {static} void scale(int)
+ {static} int scale()
+ {static} void quickSwapper(boolean)
+ {static} boolean quickSwapper()
+ {static} void flipToolbar(boolean)
+ {static} boolean flipToolbar()
+ {static} void flipTags(boolean)
+ {static} boolean flipTags()
+ {static} void toolbarMode(String)
+ {static} String toolbarMode()
+ {static} void quickslotWaterskin(boolean)
+ {static} boolean quickslotWaterskin()
+ {static} void systemFont(boolean)
+ {static} boolean systemFont()
+ {static} void vibration(boolean)
+ {static} boolean vibration()
+ {static} void intro(boolean)
+ {static} boolean intro()
+ {static} void lastClass(int)
+ {static} int lastClass()
+ {static} void challenges(int)
+ {static} int challenges()
+ {static} void customSeed(String)
+ {static} String customSeed()
+ {static} void lastDaily(long)
+ {static} long lastDaily()
+ {static} void supportNagged(boolean)
+ {static} boolean supportNagged()
+ {static} void controllerPointerSensitivity(int)
+ {static} int controllerPointerSensitivity()
+ {static} void movementHoldSensitivity(int)
+ {static} int movementHoldSensitivity()
+ {static} void news(boolean)
+ {static} boolean news()
+ {static} void updates(boolean)
+ {static} boolean updates()
+ {static} void betas(boolean)
+ {static} boolean betas()
+ {static} void WiFi(boolean)
+ {static} boolean WiFi()
+ {static} void newsLastRead(long)
+ {static} long newsLastRead()
+ {static} void music(boolean)
+ {static} boolean music()
+ {static} void musicVol(int)
+ {static} int musicVol()
+ {static} void soundFx(boolean)
+ {static} boolean soundFx()
+ {static} void SFXVol(int)
+ {static} int SFXVol()
+ {static} void ignoreSilentMode(boolean)
+ {static} boolean ignoreSilentMode()
+ {static} void playMusicInBackground(boolean)
+ {static} boolean playMusicInBackground()
+ {static} void language(Languages)
+ {static} Languages language()
+ {static} void windowResolution(Point)
+ {static} Point windowResolution()
+ {static} void windowMaximized(boolean)
+ {static} boolean windowMaximized()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Wraith {
- {static} float SPAWN_DELAY
# int level
- {static} String LEVEL
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int damageRoll()
+ int attackSkill(Char)
+ void adjustStats(int)
+ float spawningWeight()
+ boolean reset()
+ {static} void spawnAround(int)
+ {static} void spawnAround(int,Class<? extends Wraith>)
+ {static} Wraith spawnAt(int)
+ {static} Wraith spawnAt(int,Class<? extends Wraith>)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.SkullsRoom {
+ int minWidth()
+ int minHeight()
+ float[] sizeCatProbs()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.scenes.RankingsScene {
- {static} float ROW_HEIGHT_MAX
- {static} float ROW_HEIGHT_MIN
- {static} float MAX_ROW_WIDTH
- {static} float GAP
- Archs archs
+ void create()
+ void destroy()
# void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.RankingsScene$Record {
- {static} float GAP
- {static} int[] TEXT_WIN
- {static} int[] TEXT_LOSE
- {static} int FLARE_WIN
- {static} int FLARE_LOSE
- Rankings.Record rec
# Image shield
- Flare flare
- BitmapText position
- RenderedTextBlock desc
- Image steps
- BitmapText depth
- Image classIcon
- BitmapText level
# void createChildren()
# void layout()
# void onClick()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.ElementalStrike {
- {static} HashMap<Class<? extends Weapon.Enchantment>,Integer> effectTypes
- int storedKineticDamage
- int oldEnemyPos
+ String targetingPrompt()
+ int targetedPos(Char,int)
# void activate(ClassArmor,Hero,Integer)
- void preAttackEffect(ConeAOE,Hero,Weapon.Enchantment)
- void perCellEffect(ConeAOE,Weapon.Enchantment)
- void perCharEffect(ConeAOE,Hero,Char,Weapon.Enchantment)
+ String desc()
+ int icon()
+ Talent[] talents()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.ElementalStrike$DirectedPowerTracker {
+ float enchBoost
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.ElementalStrike$ElementalStrikeLuckyTracker {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.ElementalStrike$ElementalStrikeFurrowCounter {
}
class com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_4_X_Changes {
+ {static} void addAllChanges(ArrayList<ChangeInfo>)
+ {static} void add_v0_4_3_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_4_2_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_4_1_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_4_0_Changes(ArrayList<ChangeInfo>)
}

class com.shatteredpixel.shatteredpixeldungeon.items.food.MysteryMeat {
# void satisfy(Hero)
+ int value()
+ {static} void effect(Hero)
}

class com.shatteredpixel.shatteredpixeldungeon.items.food.MysteryMeat$PlaceHolder {
+ boolean isSimilar(Item)
+ String info()
}

abstract class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon {
# boolean sticky
+ {static} float MAX_DURABILITY
# float durability
# float baseUses
+ boolean holster
# MissileWeapon parent
+ int tier
- {static} String DURABILITY
- {static} boolean bundleRestoring
+ int min()
+ int min(int)
+ int max()
+ int max(int)
+ int STRReq(int)
+ int buffedLvl()
+ Item upgrade()
+ ArrayList<String> actions(Hero)
+ boolean collect(Bag)
+ boolean isSimilar(Item)
+ int throwPos(Hero,int)
+ float accuracyFactor(Char,Char)
# float adjacentAccFactor(Char,Char)
+ void doThrow(Hero)
# void onThrow(int)
+ int proc(Char,Char,int)
+ Item random()
+ String status()
+ float castDelay(Char,int)
# void rangedHit(Char,int)
# void rangedMiss(int)
+ float durabilityLeft()
+ void repair(float)
+ float durabilityPerUse()
# float durabilityPerUse(boolean)
# void decrementDurability()
+ int damageRoll(Char)
+ void reset()
+ Item merge(Item)
+ Item split(int)
+ boolean doPickUp(Hero,int)
+ boolean isIdentified()
+ String info()
+ int value()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon$PlaceHolder {
+ boolean isSimilar(Item)
+ String info()
}

class com.shatteredpixel.shatteredpixeldungeon.effects.Pushing {
- CharSprite sprite
- int from
- int to
- Effect effect
- Char ch
- Callback callback
# boolean act()
+ {static} boolean pushingExistsForChar(Char)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.Pushing$Effect {
- {static} float DELAY
- PointF end
- float delay
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Bat {
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
+ int attackProc(Char,int)
+ float lootChance()
+ Item createLoot()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Corrosion {
- float damage
# float left
- Class source
- {static} String DAMAGE
- {static} String LEFT
- {static} String SOURCE
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void set(float,int)
+ void set(float,int,Class)
+ int icon()
+ void tintIcon(Image)
+ String iconTextDisplay()
+ String desc()
+ boolean act()
+ void onDeath()
}


class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfSharpshooting {
+ String statsInfo()
# RingBuff buff()
+ {static} int levelDamageBonus(Char)
+ {static} float durabilityMultiplier(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfSharpshooting$Aim {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Guard {
- boolean chainsUsed
- String CHAINSUSED
+ int damageRoll()
- boolean chain(int)
- void pullEnemy(Char,int)
+ int attackSkill(Char)
+ int drRoll()
+ float lootChance()
+ Item createLoot()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Guard$Hunting {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Blacksmith {
# boolean act()
+ boolean interact(Char)
- void tell(String)
+ int defenseSkill(Char)
+ void damage(int,Object)
+ boolean add(Buff)
+ boolean reset()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Blacksmith$Quest {
- {static} int type
+ {static} int OLD
+ {static} int CRYSTAL
+ {static} int GNOLL
+ {static} int FUNGI
- {static} boolean alternative
- {static} boolean spawned
- {static} boolean given
- {static} boolean started
- {static} boolean bossBeaten
- {static} boolean completed
+ {static} int favor
+ {static} Item pickaxe
+ {static} int reforges
+ {static} int hardens
+ {static} int upgrades
+ {static} int smiths
+ {static} ArrayList<Item> smithRewards
+ {static} Weapon.Enchantment smithEnchant
+ {static} Armor.Glyph smithGlyph
- {static} String NODE
- {static} String TYPE
- {static} String ALTERNATIVE
- {static} String SPAWNED
- {static} String GIVEN
- {static} String STARTED
- {static} String BOSS_BEATEN
- {static} String COMPLETED
- {static} String FAVOR
- {static} String PICKAXE
- {static} String REFORGES
- {static} String HARDENS
- {static} String UPGRADES
- {static} String SMITHS
- {static} String SMITH_REWARDS
- {static} String ENCHANT
- {static} String GLYPH
+ {static} void reset()
+ {static} void storeInBundle(Bundle)
+ {static} void restoreFromBundle(Bundle)
+ {static} ArrayList<Room> spawn(ArrayList<Room>)
+ {static} void generateRewards(boolean)
+ {static} int Type()
+ {static} boolean given()
+ {static} boolean started()
+ {static} void start()
+ {static} boolean beatBoss()
+ {static} boolean bossBeaten()
+ {static} boolean completed()
+ {static} void complete()
+ {static} boolean rewardsAvailable()
+ {static} boolean oldQuestMineBlocked()
+ {static} boolean oldBloodQuest()
+ {static} boolean oldMiningQuest()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.PhantomPiranhaSprite {
- Emitter sparkles
+ void link(Char)
+ void update()
+ void die()
+ void kill()
+ void onComplete(MovieClip.Animation)
}


class com.shatteredpixel.shatteredpixeldungeon.items.bombs.FrostBomb {
+ void explode(int)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Quarterstaff {
+ int max(int)
+ int defenseFactor(Char)
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Quarterstaff$DefensiveStance {
+ int icon()
+ float iconFadePercent()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfShroudingFog {
+ void shatter(int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfMight {
+ boolean doEquip(Hero)
+ boolean doUnequip(Hero,boolean,boolean)
+ Item upgrade()
+ void level(int)
- void updateTargetHT()
+ String statsInfo()
# RingBuff buff()
+ {static} int strengthBonus(Char)
+ {static} float HTMultiplier(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfMight$Might {
}
abstract class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist {
- float rangedCooldown
# boolean canRangedInMelee
- boolean invulnWarned
+ {static} String RANGED_COOLDOWN
# void incrementRangedCooldown()
# boolean act()
# boolean canAttack(Char)
# boolean isNearYog()
+ boolean isInvulnerable(Class)
# boolean doAttack(Char)
+ void damage(int,Object)
# {abstract}void zap()
+ void onZapComplete()
+ int attackSkill(Char)
+ int damageRoll()
+ int drRoll()
+ String description()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$BurningFist {
+ boolean act()
# void zap()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$SoiledFist {
+ boolean act()
+ void damage(int,Object)
# void zap()
- boolean canSpreadGrass(int)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$RottingFist {
# boolean act()
+ void damage(int,Object)
# void zap()
+ int attackProc(Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$RustedFist {
+ int damageRoll()
+ void damage(int,Object)
# void zap()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$BrightFist {
# void incrementRangedCooldown()
# void zap()
+ void damage(int,Object)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$BrightFist$LightBeam {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$DarkFist {
# void incrementRangedCooldown()
# void zap()
+ void damage(int,Object)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$DarkFist$DarkBolt {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Web {
# void evolve()
+ void seed(Level,int,int)
+ {static} void affectChar(Char)
+ void use(BlobEmitter)
+ void clear(int)
+ void fullyClear()
+ void onBuildFlagMaps(Level)
+ String tileDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage {
+ {static} DocumentPage pageForDoc(Document)
}

class com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage$Sewers {
+ Document document()
}

class com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage$Prison {
+ Document document()
}

class com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage$Caves {
+ Document document()
}

class com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage$City {
+ Document document()
}

class com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage$Halls {
+ Document document()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.BattleAxe {
+ int max(int)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mimic {
- int level
+ ArrayList<Item> items
- {static} String LEVEL
- {static} String ITEMS
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ boolean add(Buff)
+ String name()
+ String description()
# boolean act()
+ CharSprite sprite()
+ boolean interact(Char)
+ void onAttackComplete()
+ int defenseProc(Char,int)
+ void damage(int,Object)
+ void die(Object)
+ void stopHiding()
+ int damageRoll()
+ int drRoll()
+ void beckon(int)
+ int attackSkill(Char)
+ void setLevel(int)
+ void adjustStats(int)
+ void rollToDropLoot()
+ float spawningWeight()
+ boolean reset()
+ {static} Mimic spawnAt(int,Item)
+ {static} Mimic spawnAt(int,Class,Item)
+ {static} Mimic spawnAt(int,boolean,Item)
+ {static} Mimic spawnAt(int,Class,boolean,Item)
# void generatePrize(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Rat {
- {static} String RAT_ALLY
# boolean act()
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Vertigo {
+ {static} float DURATION
+ int icon()
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Eye {
- Ballistica beam
- int beamTarget
- int beamCooldown
+ boolean beamCharged
- {static} String BEAM_TARGET
- {static} String BEAM_COOLDOWN
- {static} String BEAM_CHARGED
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
# boolean canAttack(Char)
# boolean act()
# boolean doAttack(Char)
+ void damage(int,Object)
+ void deathGaze()
+ Item createLoot()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Eye$DeathGaze {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Eye$Hunting {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Projecting {
- {static} ItemSprite.Glowing PURPLE
+ int proc(Weapon,Char,Char,int)
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.LeatherArmor {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero {
+ {static} int MAX_LEVEL
+ {static} int STARTING_STR
- {static} float TIME_TO_REST
- {static} float TIME_TO_SEARCH
- {static} float HUNGER_FOR_SEARCH
+ HeroClass heroClass
+ HeroSubClass subClass
+ ArmorAbility armorAbility
+ ArrayList<LinkedHashMap<Talent,Integer>> talents
+ LinkedHashMap<Talent,Talent> metamorphedTalents
- int attackSkill
- int defenseSkill
+ boolean ready
+ boolean damageInterrupt
+ HeroAction curAction
+ HeroAction lastAction
- Char enemy
+ boolean resting
+ Belongings belongings
+ int STR
+ float awareness
+ int lvl
+ int exp
+ int HTBoost
- ArrayList<Mob> visibleEnemies
+ ArrayList<Mob> mindVisionEnemies
- {static} String CLASS
- {static} String SUBCLASS
- {static} String ABILITY
- {static} String ATTACK
- {static} String DEFENSE
- {static} String STRENGTH
- {static} String LEVEL
- {static} String EXPERIENCE
- {static} String HTBOOST
- boolean canSelfTrample
+ boolean waitOrPickup
- boolean walkingToVisibleTrapInFog
+ boolean justMoved
- Berserk berserk
+ void updateHT(boolean)
+ int STR()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ {static} void preview(GamesInProgress.Info,Bundle)
+ boolean hasTalent(Talent)
+ int pointsInTalent(Talent)
+ void upgradeTalent(Talent)
+ int talentPointsSpent(int)
+ int talentPointsAvailable(int)
+ int bonusTalentPoints(int)
+ String className()
+ String name()
+ void hitSound(float)
+ boolean blockSound(float)
+ void live()
+ int tier()
+ boolean shoot(Char,MissileWeapon)
+ int attackSkill(Char)
+ int defenseSkill(Char)
+ String defenseVerb()
+ int drRoll()
+ int damageRoll()
+ float speed()
+ boolean canSurpriseAttack()
+ boolean canAttack(Char)
+ float attackDelay()
+ void spend(float)
+ void spendConstant(float)
+ void spendAndNextConstant(float)
+ void spendAndNext(float)
+ boolean act()
+ void busy()
- void ready()
+ void interrupt()
+ void resume()
+ boolean canSelfTrample()
- boolean actMove(HeroAction.Move)
- boolean actInteract(HeroAction.Interact)
- boolean actBuy(HeroAction.Buy)
- boolean actAlchemy(HeroAction.Alchemy)
- boolean actPickUp(HeroAction.PickUp)
- boolean actOpenChest(HeroAction.OpenChest)
- boolean actUnlock(HeroAction.Unlock)
- boolean actMine(HeroAction.Mine)
- boolean actTransition(HeroAction.LvlTransition)
- boolean actAttack(HeroAction.Attack)
+ Char enemy()
+ void rest(boolean)
+ int attackProc(Char,int)
+ int defenseProc(Char,int)
+ void damage(int,Object)
+ void checkVisibleMobs()
+ int visibleEnemies()
+ Mob visibleEnemy(int)
+ ArrayList<Mob> getVisibleEnemies()
- boolean getCloser(int)
+ boolean handle(int)
+ void earnExp(int,Class)
+ int maxExp()
+ {static} int maxExp(int)
+ boolean isStarving()
+ boolean add(Buff)
+ boolean remove(Buff)
+ float stealth()
+ void die(Object)
+ {static} void reallyDie(Object)
+ boolean isAlive()
+ void move(int,boolean)
+ void onAttackComplete()
+ void onMotionComplete()
+ void onOperateComplete()
+ boolean isImmune(Class)
+ boolean isInvulnerable(Class)
+ boolean search(boolean)
+ void resurrect()
+ void next()
}


interface com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero$Doom {
+ void onDeath()
}

abstract class com.shatteredpixel.shatteredpixeldungeon.items.KindofMisc {
+ boolean doEquip(Hero)
+ boolean doUnequip(Hero,boolean,boolean)
+ boolean isEquipped(Hero)
}

class com.shatteredpixel.shatteredpixeldungeon.ui.CharHealthIndicator {
- {static} int HEIGHT
- Char target
# void createChildren()
+ void update()
+ void target(Char)
+ Char target()
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfMetamorphosis {
# {static} boolean identifiedByUse
+ void doRead()
+ {static} void onMetamorph(Talent,Talent)
- void confirmCancelation(Window)
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfMetamorphosis$WndMetamorphChoose {
+ {static} WndMetamorphChoose INSTANCE
~ TalentsPane pane
+ void hide()
+ void onBackPressed()
+ void offset(int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfMetamorphosis$WndMetamorphReplace {
+ {static} WndMetamorphReplace INSTANCE
+ Talent replacing
+ int tier
~ LinkedHashMap<Talent,Integer> replaceOptions
- void setup(Talent,int,LinkedHashMap<Talent,Integer>)
+ void hide()
+ void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.ThrowingSpike {
}
class com.shatteredpixel.shatteredpixeldungeon.windows.WndBag {
+ {static} Window INSTANCE
# {static} int COLS_P
# {static} int COLS_L
# {static} int SLOT_WIDTH_P
# {static} int SLOT_WIDTH_L
# {static} int SLOT_HEIGHT_P
# {static} int SLOT_HEIGHT_L
# {static} int SLOT_MARGIN
# {static} int TITLE_HEIGHT
- ItemSelector selector
- int nCols
- int nRows
- int slotWidth
- int slotHeight
# int count
# int col
# int row
- {static} Bag lastBag
+ {static} WndBag lastBag(ItemSelector)
+ {static} WndBag getBag(ItemSelector)
# void placeTitle(Bag,int)
# void placeItems(Bag)
# void placeItem(Item)
+ boolean onSignal(KeyEvent)
+ void onBackPressed()
# void onClick(Tab)
+ void hide()
# int tabHeight()
- Image icon(Bag)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndBag$BagTab {
- Bag bag
- int index
+ GameAction keyAction()
# String hoverText()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndBag$Placeholder {
+ String name()
+ boolean isIdentified()
+ boolean isEquipped(Hero)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.windows.WndBag$ItemSelector {
+ {abstract}String textPrompt()
+ Class<? extends Bag> preferredBag()
+ {abstract}boolean itemSelectable(Item)
+ {abstract}void onSelect(Item)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite {
- TorchHalo light
- float baseY
+ void zap(int)
+ void attack(int)
+ void link(Char)
+ void die()
+ void kill()
+ void onComplete(Animation)
+ void place(int)
+ PointF point(PointF)
+ void move(int,int)
+ void update()
+ void turnTo(int,int)
# {abstract}int texOffset()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite$Blue {
# int texOffset()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite$Green {
# int texOffset()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite$Red {
# int texOffset()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretWellRoom {
- {static} Class<?>[] WATERS
+ boolean canConnect(Point)
+ void paint(Level)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndUseItem {
- {static} float BUTTON_HEIGHT
- {static} float GAP
- {static} float layoutButtons(ArrayList<RedButton>,float,float)
}


class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfAccuracy {
+ String statsInfo()
# RingBuff buff()
+ {static} float accuracyMultiplier(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfAccuracy$Accuracy {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollSapper {
+ int spawnPos
- int partnerID
- int abilityCooldown
- boolean lastAbilityWasRockfall
+ int throwingRockFromPos
+ int throwingRockToPos
- {static} String SPAWN_POS
- {static} String PARTNER_ID
- {static} String ABILITY_COOLDOWN
- {static} String LAST_ABILITY_WAS_ROCKFALL
- {static} String ROCK_FROM_POS
- {static} String ROCK_TO_POS
+ void linkPartner(Char)
+ void losePartner()
+ Actor getPartner()
+ void die(Object)
+ int damageRoll()
+ int attackSkill(Char)
+ void damage(int,Object)
+ int drRoll()
+ boolean reset()
+ float spawningWeight()
# boolean act()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollSapper$Hunting {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollSapper$Wandering {
# int randomDestination()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.ConfusionGas {
# void evolve()
+ void use(BlobEmitter)
+ String tileDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.ShadowClone {
+ String targetingPrompt()
+ boolean useTargeting()
+ float chargeUse(Hero)
# void activate(ClassArmor,Hero,Integer)
+ int icon()
+ Talent[] talents()
- {static} ShadowAlly getShadowAlly()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.ShadowClone$ShadowAlly {
- {static} String DEF_SKILL
# boolean act()
+ void defendPos(int)
+ void followHero()
+ void targetChar(Char)
+ int attackSkill(Char)
+ int damageRoll()
+ int attackProc(Char,int)
+ int drRoll()
+ boolean isImmune(Class)
+ int defenseProc(Char,int)
+ void damage(int,Object)
+ float speed()
+ boolean canInteract(Char)
+ boolean interact(Char)
- {static} void appear(Char,int)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.ShadowClone$ShadowSprite {
- Emitter smoke
+ void onComplete(Tweener)
+ void resetColor()
+ void link(Char)
+ void update()
+ void kill()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.LockedFloor {
- float left
- String LEFT
+ boolean act()
+ void addTime(float)
+ void removeTime(float)
+ boolean regenOn()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int icon()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.traps.CursingTrap {
+ void activate()
+ {static} void curse(Hero)
- {static} void curse(Item)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.PhantomPiranha {
+ void damage(int,Object)
+ int defenseProc(Char,int)
+ void dieOnLand()
- boolean teleportAway()
}

class com.shatteredpixel.shatteredpixeldungeon.effects.particles.ElmoParticle {
+ {static} Emitter.Factory FACTORY
+ void reset(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.FungalSentrySprite {
- int cellToAttack
+ void attack(int)
+ void onComplete(Animation)
+ void turnTo(int,int)
+ int blood()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom {
- Door entrance
- {static} String ENTRANCE
- {static} ArrayList<Class<? extends SpecialRoom>> EQUIP_SPECIALS
- {static} ArrayList<Class<? extends SpecialRoom>> CONSUMABLE_SPECIALS
- {static} ArrayList<Class<? extends SpecialRoom>> CRYSTAL_KEY_SPECIALS
- {static} ArrayList<Class<? extends SpecialRoom>> POTION_SPAWN_ROOMS
+ {static} ArrayList<Class<? extends Room>> runSpecials
+ {static} ArrayList<Class<? extends Room>> floorSpecials
- {static} int pitNeededDepth
- {static} String ROOMS
- {static} String PIT
+ int minWidth()
+ int maxWidth()
+ int minHeight()
+ int maxHeight()
+ int maxConnections(int)
+ Door entrance()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ {static} void initForRun()
+ {static} void initForFloor()
- {static} void useType(Class<? extends Room>)
+ {static} void resetPitRoom(int)
+ {static} SpecialRoom createRoom()
+ {static} void restoreRoomsFromBundle(Bundle)
+ {static} void storeRoomsInBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.BadgesList {
- ArrayList<ListItem> items
# void layout()
+ void onClick(float,float)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.BadgesList$ListItem {
- {static} float HEIGHT
- Badges.Badge badge
- Image icon
- RenderedTextBlock label
# void createChildren()
# void layout()
+ boolean onClick(float,float)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FrostImbue {
+ {static} float DURATION
+ void proc(Char)
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ boolean attachTo(Char)
}


class com.shatteredpixel.shatteredpixeldungeon.items.quest.DwarfToken {
+ boolean isUpgradable()
+ boolean isIdentified()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfEarthenArmor {
+ void apply(Hero)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Shopkeeper {
+ {static} int MAX_BUYBACK_HISTORY
+ ArrayList<Item> buybackItems
- int turnsSinceHarmed
- {static} WndBag.ItemSelector itemSelector
+ {static} String BUYBACK_ITEMS
+ {static} String TURNS_SINCE_HARMED
# boolean act()
+ void damage(int,Object)
+ boolean add(Buff)
+ void processHarm()
+ void flee()
+ void destroy()
+ boolean reset()
+ {static} int sellPrice(Item)
+ {static} WndBag sell()
+ {static} boolean canSell(Item)
+ boolean interact(Char)
+ String chatText()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.PhysicalEmpower {
+ int dmgBoost
+ int left
- {static} String BOOST
- {static} String LEFT
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void set(int,int)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.ShopRoom {
# ArrayList<Item> itemsToSpawn
+ int minWidth()
+ int minHeight()
+ int spacesNeeded()
+ void paint(Level)
# void placeShopkeeper(Level)
# void placeItems(Level)
# {static} ArrayList<Item> generateItems()
# {static} Bag ChooseBag(Belongings)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.BadgeBanner {
- State state
+ {static} float DEFAULT_SCALE
+ {static} int SIZE
- {static} float FADE_IN_TIME
- {static} float STATIC_TIME
- {static} float FADE_OUT_TIME
- int index
- float time
- {static} TextureFilm atlas
+ {static} ArrayList<BadgeBanner> showing
- {static} HashMap<Integer,Point> highlightPositions
+ void setup(int)
+ void update()
+ void kill()
+ void destroy()
+ {static} void highlight(Image,int)
+ {static} BadgeBanner show(int)
+ {static} boolean isShowingBadges()
+ {static} Image image(int)
}


enum com.shatteredpixel.shatteredpixeldungeon.effects.State {
+  FADE_IN
+  STATIC
+  FADE_OUT
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.StatuesExitRoom {
+ float[] sizeCatProbs()
+ boolean isExit()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretChestChasmRoom {
+ int minWidth()
+ int maxWidth()
+ int minHeight()
+ int maxHeight()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene {
+ void create()
- void placeTorch(float,float)
}

class com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene$NewsButton {
~ int unreadCount
+ void update()
# void onClick()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene$ChangesButton {
~ boolean updateShown
+ void update()
# void onClick()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene$SettingsButton {
+ void update()
# void onClick()
}

class com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene$SupportButton {
# void onClick()
}

class com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_5_X_Changes {
+ {static} void addAllChanges(ArrayList<ChangeInfo>)
+ {static} void add_v0_5_0_Changes(ArrayList<ChangeInfo>)
}

class com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Displacement {
- {static} ItemSprite.Glowing BLACK
+ int proc(Armor,Char,Char,int)
+ ItemSprite.Glowing glowing()
+ boolean curse()
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfMastery {
# {static} boolean identifiedByUse
# WndBag.ItemSelector itemSelector
# void drink(Hero)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.WalledGooRoom {
+ void paint(Level)
+ boolean canPlaceWater(Point)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.SuspiciousChestRoom {
+ int minWidth()
+ int minHeight()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretLarderRoom {
+ int minHeight()
+ int minWidth()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.items.special.Ankh {
+ {static} String AC_BLESS
- boolean blessed
- {static} Glowing WHITE
- {static} String BLESSED
+ boolean isUpgradable()
+ boolean isIdentified()
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ String desc()
+ boolean isBlessed()
+ void bless()
+ Glowing glowing()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int value()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.traps.ConfusionTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RotLasher {
# boolean act()
+ void damage(int,Object)
+ int attackProc(Char,int)
+ boolean reset()
# boolean getCloser(int)
# boolean getFurther(int)
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RotLasher$Waiting {
# boolean noticeEnemy()
}

class com.shatteredpixel.shatteredpixeldungeon.items.spells.BeaconOfReturning {
+ int returnDepth
+ int returnBranch
+ int returnPos
- {static} ItemSprite.Glowing WHITE
- {static} String DEPTH
- {static} String BRANCH
- {static} String POS
# void onCast(Hero)
# void onThrow(int)
+ void doDrop(Hero)
- void setBeacon(Hero)
- void returnBeacon(Hero)
+ String desc()
+ ItemSprite.Glowing glowing()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int value()
+ int energyVal()
}


class com.shatteredpixel.shatteredpixeldungeon.items.spells.BeaconOfReturning$Recipe {
- {static} int OUT_QUANTITY
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.GrimTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.items.bombs.WoollyBomb {
+ void explode(int)
+ int value()
}

abstract class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.WellWater {
# void evolve()
# boolean affect(int)
# {abstract}boolean affectHero(Hero)
# {abstract}Item affectItem(Item,int)
# {abstract}Notes.Landmark record()
+ {static} void affectCell(int)
}

class com.shatteredpixel.shatteredpixeldungeon.effects.Beam {
- {static} double A
- float duration
- float timeLeft
+ void update()
+ void draw()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.Beam$DeathRay {
}
class com.shatteredpixel.shatteredpixeldungeon.effects.Beam$LightRay {
}
class com.shatteredpixel.shatteredpixeldungeon.effects.Beam$HealthRay {
}
abstract class com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon {
+ float ACC
+ float DLY
+ int RCH
+ Augment augment
- {static} int USES_TO_ID
- float usesLeftToID
- float availableUsesToID
+ Enchantment enchantment
+ boolean enchantHardened
+ boolean curseInfusionBonus
+ boolean masteryPotionBonus
- {static} String USES_LEFT_TO_ID
- {static} String AVAILABLE_USES
- {static} String ENCHANTMENT
- {static} String ENCHANT_HARDENED
- {static} String CURSE_INFUSION_BONUS
- {static} String MASTERY_POTION_BONUS
- {static} String AUGMENT
+ int proc(Char,Char,int)
+ void onHeroGainExp(float,Hero)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void reset()
+ float accuracyFactor(Char,Char)
+ float delayFactor(Char)
# float baseDelay(Char)
# float speedMultiplier(Char)
+ int reachFactor(Char)
+ int STRReq()
+ {abstract}int STRReq(int)
# {static} int STRReq(int,int)
+ int level()
+ Item upgrade()
+ Item upgrade(boolean)
+ String name()
+ Item random()
+ Weapon enchant(Enchantment)
+ Weapon enchant()
+ boolean hasEnchant(Class<? extends Enchantment>,Char)
+ boolean hasGoodEnchant()
+ boolean hasCurseEnchant()
+ ItemSprite.Glowing glowing()
}


enum com.shatteredpixel.shatteredpixeldungeon.items.weapon.Augment {
+  SPEED
+  DAMAGE
+  NONE
- float damageFactor
- float delayFactor
+ int damageFactor(int)
+ float delayFactor(float)
}


abstract class com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon$Enchantment {
+ {static} Class<?>[] common
+ {static} Class<?>[] uncommon
+ {static} Class<?>[] rare
+ {static} float[] typeChances
- {static} Class<?>[] curses
+ {abstract}int proc(Weapon,Char,Char,int)
# float procChanceMultiplier(Char)
+ {static} float genericProcChanceMultiplier(Char)
+ String name()
+ String name(String)
+ String desc()
+ boolean curse()
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
+ {abstract}ItemSprite.Glowing glowing()
+ {static} Enchantment random(Class<? extends Enchantment>)
+ {static} Enchantment randomCommon(Class<? extends Enchantment>)
+ {static} Enchantment randomUncommon(Class<? extends Enchantment>)
+ {static} Enchantment randomRare(Class<? extends Enchantment>)
+ {static} Enchantment randomCurse(Class<? extends Enchantment>)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Vulnerable {
+ {static} float DURATION
+ int icon()
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfWarding {
- boolean wardAvailable
+ int collisionProperties(int)
+ boolean tryToZap(Hero,int)
+ void onZap(Ballistica)
+ void fx(Ballistica,Callback)
+ void onHit(MagesStaff,Char,Char,int)
+ void staffFx(MagesStaff.StaffParticle)
+ String statsDesc()
}


class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfWarding$Ward {
+ int tier
- int wandLevel
+ int totalZaps
- {static} String TIER
- {static} String WAND_LEVEL
- {static} String TOTAL_ZAPS
+ String name()
+ void upgrade(int)
+ void wandHeal(int)
+ void wandHeal(int,float)
+ int defenseSkill(Char)
+ int drRoll()
# boolean canAttack(Char)
# boolean doAttack(Char)
- void zap()
+ void onZapComplete()
# boolean getCloser(int)
# boolean getFurther(int)
+ CharSprite sprite()
+ void updateSpriteState()
+ void destroy()
+ boolean canInteract(Char)
+ boolean interact(Char)
+ String description()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Tomahawk {
+ int min(int)
+ int max(int)
+ int proc(Char,Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.painters.HallsPainter {
# void decorate(Level,ArrayList<Room>)
}

class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.EtherealChains {
+ {static} String AC_CAST
- CellSelector.Listener caster
+ ArrayList<String> actions(Hero)
+ int targetingPos(Hero,int)
+ void execute(Hero,String)
- void chainEnemy(Ballistica,Hero,Char)
- void chainLocation(Ballistica,Hero)
# ArtifactBuff passiveBuff()
+ void charge(Hero,float)
+ String desc()
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.EtherealChains$chainsRecharge {
+ boolean act()
+ void gainExp(float)
}

class com.shatteredpixel.shatteredpixeldungeon.effects.Transmuting {
- {static} float FADE_IN_TIME
- {static} float TRANSMUTING_TIME
- {static} float FADE_OUT_TIME
- {static} float ALPHA
~ Image oldSprite
~ Image newSprite
- Char target
- Phase phase
- float duration
- float passed
+ void update()
+ {static} void show(Char,Item,Item)
+ {static} void show(Char,Talent,Talent)
}


enum com.shatteredpixel.shatteredpixeldungeon.effects.Phase {
+  FADE_IN
+  TRANSMUTING
+  FADE_OUT
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.RitualEntranceRoom {
+ boolean isEntrance()
# void placeloot(Level,Point)
}

class com.shatteredpixel.shatteredpixeldungeon.plants.BlandfruitBush {
+ void activate(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.plants.BlandfruitBush$Seed {
}
class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Blazing {
- {static} ItemSprite.Glowing ORANGE
+ int proc(Weapon,Char,Char,int)
+ Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.SeniorSprite {
- Animation kick
+ void attack(int)
+ void onComplete(Animation)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndDailies {
- {static} int WIDTH
- {static} int HEIGHT
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.LibraryRingRoom {
+ int minWidth()
+ int minHeight()
+ float[] sizeCatProbs()
+ Rect resize(int,int)
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Kunai {
- Char enemy
# void onThrow(int)
+ int damageRoll(Char)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.MagicWellRoom {
- {static} Class<?>[] WATERS
+ Class<? extends WellWater> overrideWater
+ void paint(Level)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.buttons.ItemButton {
# NinePatch bg
# ItemSlot slot
# void createChildren()
# void onClick()
# boolean onLongClick()
# void layout()
+ Item item()
+ void item(Item)
+ void clear()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.CircleArc {
- float duration
- float lifespan
- float sweep
- boolean dirty
- boolean lightMode
- SmartTexture texture
# float[] vertices
- FloatBuffer verticesBuffer
- ShortBuffer indices
- int nTris
- float rad
+ CircleArc color(int,boolean)
+ CircleArc show(Visual,float)
+ CircleArc show(Group,PointF,float)
+ void setSweep(float)
+ float getSweep()
- void updateTriangles()
+ void update()
+ void draw()
}


class com.shatteredpixel.shatteredpixeldungeon.items.Torch {
+ {static} String AC_LIGHT
+ {static} float TIME_TO_LIGHT
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ boolean isUpgradable()
+ boolean isIdentified()
+ int value()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.StenchGas {
# void evolve()
+ void use(BlobEmitter)
+ String tileDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.ThrowingKnife {
+ int max(int)
+ int damageRoll(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.items.remains.SealShard {
# void doEffect(Hero)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Shuriken {
+ int max(int)
+ float delayFactor(Char)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AllyBuff {
+ boolean attachTo(Char)
+ {static} void affectAndLoot(Mob,Hero,Class<? extends AllyBuff>)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ScrollEmpower {
- int left
- {static} String LEFT
+ void reset(int)
+ void use()
+ void detach()
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


abstract class com.shatteredpixel.shatteredpixeldungeon.levels.builders.Builder {
- {static} double A
+ {abstract}ArrayList<Room> build(ArrayList<Room>)
# {static} void findNeighbours(ArrayList<Room>)
# {static} Rect findFreeSpace(Point,ArrayList<Room>,int)
# {static} float angleBetweenRooms(Room,Room)
# {static} float angleBetweenPoints(PointF,PointF)
# {static} float placeRoom(ArrayList<Room>,Room,Room,float)
}


abstract class com.shatteredpixel.shatteredpixeldungeon.ui.OptionSlider {
- PointerArea pointerArea
- RenderedTextBlock title
- RenderedTextBlock minTxt
- RenderedTextBlock maxTxt
- int minVal
- int maxVal
- int selectedVal
- NinePatch sliderNode
- NinePatch BG
- ColorBlock sliderBG
- ColorBlock[] sliderTicks
- float tickDist
# {abstract}void onChange()
+ int getSelectedValue()
+ void setSelectedValue(int)
# void createChildren()
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica {
+ ArrayList<Integer> path
+ Integer sourcePos
+ Integer collisionPos
+ Integer collisionProperties
+ Integer dist
+ {static} int STOP_TARGET
+ {static} int STOP_CHARS
+ {static} int STOP_SOLID
+ {static} int IGNORE_SOFT_SOLID
+ {static} int PROJECTILE
+ {static} int MAGIC_BOLT
+ {static} int WONT_STOP
- void build(int,int,boolean,boolean,boolean,boolean)
- void collide(int)
+ List<Integer> subPath(int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Foliage {
# void evolve()
+ void use(BlobEmitter)
+ String tileDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoItem {
- {static} float GAP
- {static} int WIDTH_MIN
- {static} int WIDTH_MAX
- {static} WndInfoItem INSTANCE
+ void hide()
- void fillFields(Heap)
- void fillFields(Item)
- void layoutFields(IconTitle,RenderedTextBlock)
}


class com.shatteredpixel.shatteredpixeldungeon.journal.Journal {
+ {static} String JOURNAL_FILE
- {static} boolean loaded
~ {static} boolean saveNeeded
+ {static} void loadGlobal()
+ {static} void saveGlobal()
+ {static} void saveGlobal(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite {
+ {static} int SIZE
- {static} float DROP_INTERVAL
+ Heap heap
- Glowing glowing
# Emitter emitter
- float phase
- boolean glowUp
- float dropInterval
# float perspectiveRaise
# boolean renderShadow
# float shadowWidth
# float shadowHeight
# float shadowOffset
- float[] shadowMatrix
+ void link()
+ void link(Heap)
+ void revive()
+ void visible(boolean)
+ PointF worldToCamera(int)
+ void place(int)
+ void drop()
+ void drop(int)
+ ItemSprite view(Item)
+ ItemSprite view(Heap)
+ ItemSprite view(int,Glowing)
+ void frame(int)
+ void glow(Glowing)
+ void kill()
# void updateMatrix()
+ void draw()
+ void update()
+ {static} int pick(int,int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite$Glowing {
+ int color
+ float red
+ float green
+ float blue
+ float period
}

class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfUpgrade {
# boolean usableOnItem(Item)
# void onItemSelected(Item)
+ {static} void upgrade(Hero)
+ {static} void weakenCurse(Hero)
+ {static} void removeCurse(Hero)
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.ui.Archs {
- {static} float SCROLL_SPEED
- SkinnedBlock arcsBg
- SkinnedBlock arcsFg
- Image darkness
- {static} float offsB
- {static} float offsF
+ boolean reversed
# void createChildren()
# void layout()
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.traps.AlarmTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndList {
- {static} int WIDTH
- {static} int MARGIN
- {static} int GAP
}

class com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Potential {
- {static} ItemSprite.Glowing WHITE
+ int proc(Armor,Char,Char,int)
+ Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FetidRat {
+ int attackSkill(Char)
+ int drRoll()
+ int attackProc(Char,int)
+ int defenseProc(Char,int)
+ void die(Object)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FetidRat$Wandering {
# int randomDestination()
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndQuest {
}
class com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.ShockingBrew {
+ void shatter(int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.ShockingBrew$Recipe {
}
class com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_7_X_Changes {
+ {static} void addAllChanges(ArrayList<ChangeInfo>)
+ {static} void add_v0_7_5_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_7_4_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_7_3_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_7_2_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_7_1_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_7_0_Changes(ArrayList<ChangeInfo>)
}

class com.shatteredpixel.shatteredpixeldungeon.items.Stylus {
- {static} float TIME_TO_INSCRIBE
- {static} String AC_INSCRIBE
- WndBag.ItemSelector itemSelector
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ boolean isUpgradable()
+ boolean isIdentified()
- void inscribe(Armor)
+ int value()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Daze {
+ {static} float DURATION
+ int icon()
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.SlimeSprite {
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.items.food.SupplyRation {
# float eatingTime()
# void satisfy(Hero)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.PerimeterRoom {
- {static} Point[] corners
+ void paint(Level)
+ {static} void fillPerimiterPaths(Level,Room,int)
- {static} int spaceBetween(int,int)
- {static} int distanceBetweenPoints(Room,Point,Point)
- {static} void fillBetweenPoints(Level,Room,Point,Point,int)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.TalentsPane {
~ ArrayList<TalentTierPane> panes
~ ArrayList<ColorBlock> separators
~ ColorBlock sep
~ ColorBlock blocker
~ RenderedTextBlock blockText
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.ui.TalentsPane$TalentTierPane {
- int tier
+ RenderedTextBlock title
~ ArrayList<TalentButton> buttons
~ ArrayList<Image> stars
- void setupStars()
# void layout()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental {
# boolean summonedALly
# int rangedCooldown
# ArrayList<Class<? extends Buff>> harmfulBuffs
- {static} String COOLDOWN
- {static} String SUMMONED_ALLY
+ int damageRoll()
+ int attackSkill(Char)
+ void setSummonedALly()
+ int drRoll()
# boolean act()
# boolean canAttack(Char)
# boolean doAttack(Char)
+ int attackProc(Char,int)
# void zap()
+ void onZapComplete()
+ boolean add(Buff)
# {abstract}void meleeProc(Char,int)
# {abstract}void rangedProc(Char)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ {static} Class<? extends Elemental> random()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$FireElemental {
# void meleeProc(Char,int)
# void rangedProc(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$NewbornFireElemental {
- int targetingPos
- {static} String TARGETING_POS
# boolean act()
# boolean canAttack(Char)
# boolean doAttack(Char)
# void zap()
+ int attackSkill(Char)
+ int damageRoll()
# void meleeProc(Char,int)
+ void die(Object)
+ boolean reset()
+ String description()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$AllyNewBornElemental {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$FrostElemental {
# void meleeProc(Char,int)
# void rangedProc(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$ShockElemental {
# void meleeProc(Char,int)
# void rangedProc(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$ChaosElemental {
# void meleeProc(Char,int)
# void rangedProc(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.features.Chasm {
+ {static} boolean jumpConfirmed
- {static} int heroPos
+ {static} void heroJump(Hero)
+ {static} void heroFall(int)
+ void onDeath()
+ {static} void heroLand()
+ {static} void mobFall(Mob)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.features.Chasm$Falling {
+ boolean act()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Ghost {
# boolean act()
+ int defenseSkill(Char)
+ float speed()
# Char chooseEnemy()
+ void damage(int,Object)
+ boolean add(Buff)
+ boolean reset()
+ boolean interact(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Ghost$Wandering {
# int randomDestination()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Ghost$Quest {
- {static} boolean spawned
- {static} int type
- {static} boolean given
- {static} boolean processed
- {static} int depth
+ {static} Weapon weapon
+ {static} Armor armor
+ {static} Weapon.Enchantment enchant
+ {static} Armor.Glyph glyph
- {static} String NODE
- {static} String SPAWNED
- {static} String TYPE
- {static} String GIVEN
- {static} String PROCESSED
- {static} String DEPTH
- {static} String WEAPON
- {static} String ARMOR
- {static} String ENCHANT
- {static} String GLYPH
+ {static} void reset()
+ {static} void storeInBundle(Bundle)
+ {static} void restoreFromBundle(Bundle)
+ {static} void spawn(SewerLevel,Room)
+ {static} void process()
+ {static} boolean active()
+ {static} void complete()
+ {static} boolean processed()
+ {static} boolean completed()
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfPrismaticImage {
+ void doRead()
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoTrap {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Bless {
+ {static} float DURATION
+ int icon()
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Stamina {
+ {static} float DURATION
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Roots {
+ {static} float DURATION
+ boolean attachTo(Char)
+ void detach()
+ int icon()
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.RitualRoom {
+ int minWidth()
+ int minHeight()
+ float[] sizeCatProbs()
+ void paint(Level)
# void placeloot(Level,Point)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Vampiric {
- {static} ItemSprite.Glowing RED
+ int proc(Weapon,Char,Char,int)
+ Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Dread {
# int left
+ int object
+ {static} float DURATION
- {static} String LEFT
- {static} String OBJECT
+ boolean attachTo(Char)
+ boolean act()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int icon()
+ float iconFadePercent()
+ String iconTextDisplay()
+ void tintIcon(Image)
+ String desc()
+ void recover()
}


class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfDisintegration {
+ int min(int)
+ int max(int)
+ int targetingPos(Hero,int)
+ void onZap(Ballistica)
+ void onHit(MagesStaff,Char,Char,int)
- int distance()
+ void fx(Ballistica,Callback)
+ void staffFx(MagesStaff.StaffParticle)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Wayward {
- {static} ItemSprite.Glowing BLACK
+ int proc(Weapon,Char,Char,int)
+ boolean curse()
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Wayward$WaywardBuff {
+ {static} float DURATION
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.RitualSiteRoom {
+ int minWidth()
+ int minHeight()
+ void paint(Level)
+ boolean canPlaceItem(Point,Level)
+ boolean canPlaceCharacter(Point,Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.RitualSiteRoom$RitualMarker {
~ int TEX_WIDTH
+ Tilemap create()
+ String name(int,int)
+ String desc(int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Cripple {
+ {static} float DURATION
+ int icon()
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.SegmentedLibraryRoom {
+ float[] sizeCatProbs()
+ void paint(Level)
- void createWalls(Level,Rect)
}

class com.shatteredpixel.shatteredpixeldungeon.QuickSlot {
+ {static} int SIZE
- Item[] slots
- String PLACEHOLDERS
- String PLACEMENTS
+ void setSlot(int,Item)
+ void clearSlot(int)
+ void reset()
+ Item getItem(int)
+ int getSlot(Item)
+ Boolean isPlaceholder(int)
+ Boolean isNonePlaceholder(int)
+ void clearItem(Item)
+ boolean contains(Item)
+ void replacePlaceholder(Item)
+ void convertToPlaceholder(Item)
+ Item randomNonePlaceholder()
+ void storePlaceholders(Bundle)
+ void restorePlaceholders(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.remains.BrokenHilt {
# void doEffect(Hero)
}

class com.shatteredpixel.shatteredpixeldungeon.scenes.ChangesScene {
+ {static} int changesSelected
- NinePatch rightPanel
- ScrollPane rightScroll
- IconTitle changeTitle
- RenderedTextBlock changeBody
+ void create()
- void updateChangesText(Image,String,String)
+ {static} void showChangeInfo(Image,String,String)
# void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Terror {
+ int object
- {static} String OBJECT
+ {static} float DURATION
+ boolean ignoreNextHit
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int icon()
+ float iconFadePercent()
+ void recover()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff {
+ Char target
+ buffType type
+ boolean announced
+ boolean revivePersists
# HashSet<Class> resistances
# HashSet<Class> immunities
+ HashSet<Class> resistances()
+ HashSet<Class> immunities()
+ boolean attachTo(Char)
+ void detach()
+ boolean act()
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ void fx(boolean)
+ String heroMessage()
+ String name()
+ String desc()
# String dispTurns(float)
+ float visualcooldown()
+ {static} T append(Char,Class<T>)
+ {static} T append(Char,Class<T>,float)
+ {static} T affect(Char,Class<T>)
+ {static} T affect(Char,Class<T>,float)
+ {static} T prolong(Char,Class<T>,float)
+ {static} T count(Char,Class<T>,float)
+ {static} void detach(Char,Class<? extends Buff>)
}


enum com.shatteredpixel.shatteredpixeldungeon.actors.buffs.buffType {
+  POSITIVE
+  NEGATIVE
+  NEUTRAL
}

class com.shatteredpixel.shatteredpixeldungeon.tiles.GridTileMap {
- int gridSetting
+ void updateMap()
# int getTileVisual(int,int,boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.items.spells.WildEnergy {
# void fx(Ballistica,Callback)
# void affectTarget(Ballistica,Hero)
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.items.spells.WildEnergy$Recipe {
- {static} int OUT_QUANTITY
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SacrificeRoom {
+ int minWidth()
+ int minHeight()
+ void paint(Level)
+ {static} Item prize(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.SpiritHawk {
+ String targetingPrompt()
+ boolean useTargeting()
+ float chargeUse(Hero)
# void activate(ClassArmor,Hero,Integer)
+ int icon()
+ Talent[] talents()
- {static} HawkAlly getHawk()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.SpiritHawk$HawkAlly {
- int dodgesUsed
- float timeRemaining
- {static} String DODGES_USED
- {static} String TIME_REMAINING
+ int attackSkill(Char)
+ int defenseSkill(Char)
+ int damageRoll()
+ int attackProc(Char,int)
# boolean act()
# void spend(float)
+ void destroy()
+ void defendPos(int)
+ void followHero()
+ void targetChar(Char)
+ String description()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.SpiritHawk$HawkSprite {
+ int blood()
+ void die()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.AquaBrew {
+ void shatter(int)
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.AquaBrew$Recipe {
- {static} int OUT_QUANTITY
}

class com.shatteredpixel.shatteredpixeldungeon.Dungeon {
+ {static} int challenges
+ {static} int mobsToChampion
+ {static} Hero hero
+ {static} Level level
+ {static} QuickSlot quickslot
+ {static} int depth
+ {static} int branch
+ {static} ArrayList<Integer> generatedLevels
+ {static} int gold
+ {static} int energy
+ {static} HashSet<Integer> chapters
+ {static} SparseArray<ArrayList<Item>> droppedItems
+ {static} int initialVersion
+ {static} int version
+ {static} boolean daily
+ {static} boolean dailyReplay
+ {static} String customSeedText
+ {static} long seed
- {static} String INIT_VER
- {static} String VERSION
- {static} String SEED
- {static} String CUSTOM_SEED
- {static} String DAILY
- {static} String DAILY_REPLAY
- {static} String CHALLENGES
- {static} String MOBS_TO_CHAMPION
- {static} String HERO
- {static} String DEPTH
- {static} String BRANCH
- {static} String GENERATED_LEVELS
- {static} String GOLD
- {static} String ENERGY
- {static} String DROPPED
- {static} String PORTED
- {static} String LEVEL
- {static} String LIMDROPS
- {static} String CHAPTERS
- {static} String QUESTS
- {static} String BADGES
- {static} boolean[] passable
+ {static} void init()
+ {static} boolean isChallenged(int)
+ {static} boolean levelHasBeenGenerated(int,int)
+ {static} Level newLevel()
+ {static} void resetLevel()
+ {static} long seedCurDepth()
+ {static} long seedForDepth(int,int)
+ {static} boolean shopOnLevel()
+ {static} boolean bossLevel()
+ {static} boolean bossLevel(int)
+ {static} int scalingDepth()
+ {static} boolean interfloorTeleportAllowed()
+ {static} void switchLevel(Level,int)
+ {static} void dropToChasm(Item)
+ {static} boolean posNeeded()
+ {static} boolean souNeeded()
+ {static} boolean asNeeded()
+ {static} boolean enchStoneNeeded()
+ {static} boolean intStoneNeeded()
+ {static} boolean trinketCataNeeded()
+ {static} boolean labRoomNeeded()
+ {static} void saveGame(int)
+ {static} void saveLevel(int)
+ {static} void saveAll()
+ {static} void loadGame(int)
+ {static} void loadGame(int,boolean)
+ {static} Level loadLevel(int)
+ {static} void deleteGame(int,boolean)
+ {static} void preview(GamesInProgress.Info,Bundle)
+ {static} void fail(Object)
+ {static} void win(Object)
+ {static} void updateLevelExplored()
+ {static} void observe()
+ {static} void observe(int)
- {static} void setupPassable()
+ {static} boolean[] findPassable(Char,boolean[],boolean[],boolean)
+ {static} boolean[] findPassable(Char,boolean[],boolean[],boolean,boolean)
+ {static} PathFinder.Path findPath(Char,int,boolean[],boolean[],boolean)
+ {static} int findStep(Char,int,boolean[],boolean[],boolean)
+ {static} int flee(Char,int,boolean[],boolean[],boolean)
}


enum com.shatteredpixel.shatteredpixeldungeon.LimitedDrops {
+  STRENGTH_POTIONS
+  UPGRADE_SCROLLS
+  ARCANE_STYLI
+  ENCH_STONE
+  INT_STONE
+  TRINKET_CATA
+  LAB_ROOM
+  SWARM_HP
+  NECRO_HP
+  BAT_HP
+  WARLOCK_HP
+  COOKING_HP
+  BLANDFRUIT_SEED
+  SLIME_WEP
+  SKELE_WEP
+  THEIF_MISC
+  GUARD_ARM
+  SHAMAN_WAND
+  DM200_EQUIP
+  GOLEM_EQUIP
+  VELVET_POUCH
+  SCROLL_HOLDER
+  POTION_BANDOLIER
+  MAGICAL_HOLSTER
+  LORE_SEWERS
+  LORE_PRISON
+  LORE_CAVES
+  LORE_CITY
+  LORE_HALLS
+ int count
+ boolean dropped()
+ void drop()
+ {static} void reset()
+ {static} void store(Bundle)
+ {static} void restore(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.painters.CavesPainter {
# void decorate(Level,ArrayList<Room>)
# void generateGold(Level,ArrayList<Room>)
}

class com.shatteredpixel.shatteredpixeldungeon.effects.IceBlock {
- float phase
- CharSprite target
+ void update()
+ void melt()
+ {static} IceBlock freeze(CharSprite)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Gloves {
+ int max(int)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.HornOfPlenty {
- int storedFoodEnergy
+ {static} String AC_SNACK
+ {static} String AC_EAT
+ {static} String AC_STORE
- {static} String STORED
# {static} WndBag.ItemSelector itemSelector
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
# ArtifactBuff passiveBuff()
+ void charge(Hero,float)
+ String desc()
+ void level(int)
+ Item upgrade()
+ void gainFoodValue(Food)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.HornOfPlenty$hornRecharge {
+ void gainCharge(float)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.SewerBossLevel {
+ void playLevelMusic()
# ArrayList<Room> initRooms()
# int standardRooms(boolean)
# Builder builder()
# Painter painter()
# int nTraps()
# void createMobs()
+ Actor addRespawner()
# void createItems()
+ int randomRespawnCell(Char)
+ void seal()
+ void unseal()
+ Group addVisuals()
+ void restoreFromBundle(Bundle)
}

class com.shatteredpixel.shatteredpixeldungeon.items.remains.BrokenStaff {
# void doEffect(Hero)
}

class com.shatteredpixel.shatteredpixeldungeon.effects.TorchHalo {
- CharSprite target
- float phase
+ void update()
+ void draw()
+ void putOut()
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Obfuscation {
- {static} ItemSprite.Glowing GREY
+ int proc(Armor,Char,Char,int)
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.ui.Toast {
- {static} float MARGIN_HOR
- {static} float MARGIN_VER
# NinePatch bg
# IconButton close
# RenderedTextBlock text
# void createChildren()
# void layout()
+ void text(String)
# void onClose()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretLibraryRoom {
- {static} HashMap<Class<? extends Scroll>,Float> scrollChances
+ int minWidth()
+ int minHeight()
+ void paint(Level)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_6_X_Changes {
+ {static} void addAllChanges(ArrayList<ChangeInfo>)
+ {static} void add_v0_6_5_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_6_4_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_6_3_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_6_2_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_6_1_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_6_0_Changes(ArrayList<ChangeInfo>)
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.WarlockSprite {
+ void zap(int)
+ void onComplete(Animation)
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndScoreBreakdown {
- {static} int WIDTH
- int GAP
- float statSlot(Group,String,String,float,boolean)
- float addInfo(Group,String,float)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.RunicBlade {
+ int max(int)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.RunicBlade$RunicSlashTracker {
+ float boost
}

class com.shatteredpixel.shatteredpixeldungeon.utils.GLog {
+ {static} String TAG
+ {static} String POSITIVE
+ {static} String NEGATIVE
+ {static} String WARNING
+ {static} String HIGHLIGHT
+ {static} String NEW_LINE
+ {static} Signal<String> update
+ {static} void newLine()
+ {static} void i(String,Object)
+ {static} void p(String,Object)
+ {static} void n(String,Object)
+ {static} void w(String,Object)
+ {static} void h(String,Object)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.ChasmBridgeExitRoom {
+ int minWidth()
+ int minHeight()
+ boolean isExit()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.effects.particles.ShadowParticle {
+ {static} Emitter.Factory MISSILE
+ {static} Emitter.Factory CURSE
+ {static} Emitter.Factory UP
+ void reset(float,float)
+ void resetCurse(float,float)
+ void resetUp(float,float)
+ void update()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.items.Recipe {
- {static} Recipe[] variableRecipes
- {static} Recipe[] oneIngredientRecipes
- {static} Recipe[] twoIngredientRecipes
- {static} Recipe[] threeIngredientRecipes
+ {abstract}boolean testIngredients(ArrayList<Item>)
+ {abstract}int cost(ArrayList<Item>)
+ {abstract}Item brew(ArrayList<Item>)
+ {abstract}Item sampleOutput(ArrayList<Item>)
+ {static} ArrayList<Recipe> findRecipes(ArrayList<Item>)
+ {static} boolean usableInRecipe(Item)
}


abstract class com.shatteredpixel.shatteredpixeldungeon.items.Recipe$SimpleRecipe {
# Class<? extends Item>[] inputs
# int[] inQuantity
# int cost
# Class<? extends Item> output
# int outQuantity
+ ArrayList<Item> getIngredients()
+ boolean testIngredients(ArrayList<Item>)
+ int cost(ArrayList<Item>)
+ Item brew(ArrayList<Item>)
+ Item sampleOutput(ArrayList<Item>)
}


class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfMagicMissile {
+ int min(int)
+ int max(int)
+ void onZap(Ballistica)
+ void onHit(MagesStaff,Char,Char,int)
# int initialCharges()
}

class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfMagicMissile$MagicCharge {
+ {static} float DURATION
- int level
- Wand wandJustApplied
- {static} String LEVEL
+ void setup(Wand)
+ void detach()
+ int level()
+ Wand wandJustApplied()
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfHoneyedHealing {
+ void apply(Hero)
+ void shatter(int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfHoneyedHealing$Recipe {
}
class com.shatteredpixel.shatteredpixeldungeon.sprites.PrismaticSprite {
+ void updateArmor()
+ void update()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.CounterBuff {
- float count
- {static} String COUNT
+ void countUp(float)
+ void countDown(float)
+ float count()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfShielding {
+ void apply(Hero)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Burning {
- {static} float DURATION
- float left
- int burnIncrement
- {static} String LEFT
- {static} String BURN
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ boolean attachTo(Char)
+ boolean act()
+ void reignite(Char)
+ void reignite(Char,float)
+ int icon()
+ float iconFadePercent()
+ String iconTextDisplay()
+ void fx(boolean)
+ String desc()
+ void onDeath()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.StorageRoom {
+ void paint(Level)
- {static} Item prize(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Katana {
+ int max(int)
+ int defenseFactor(Char)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.TormentedSpiritSprite {
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.items.armor.ScaleArmor {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Imp {
- boolean seenBefore
# boolean act()
+ int defenseSkill(Char)
+ void damage(int,Object)
+ boolean add(Buff)
+ boolean reset()
+ boolean interact(Char)
- void tell(String)
+ void flee()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Imp$Quest {
- {static} boolean alternative
- {static} boolean spawned
- {static} boolean given
- {static} boolean completed
+ {static} Ring reward
- {static} String NODE
- {static} String ALTERNATIVE
- {static} String SPAWNED
- {static} String GIVEN
- {static} String COMPLETED
- {static} String REWARD
+ {static} void reset()
+ {static} void storeInBundle(Bundle)
+ {static} void restoreFromBundle(Bundle)
+ {static} void spawn(CityLevel)
+ {static} void process(Mob)
+ {static} void complete()
+ {static} boolean isCompleted()
}


class com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfDisarming {
- {static} int DIST
# void activate(int)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.Surprise {
- {static} float TIME_TO_FADE
- float time
+ void reset(int)
+ void reset(Visual)
+ void update()
+ {static} void hit(Char)
+ {static} void hit(Char,float)
+ {static} void hit(int)
+ {static} void hit(int,float)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretLaboratoryRoom {
- {static} HashMap<Class<? extends Potion>,Float> potionChances
+ void paint(Level)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.WaterBridgeEntranceRoom {
+ int minWidth()
+ int minHeight()
+ boolean isEntrance()
+ void paint(Level)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.items.wands.DamageWand {
+ int min()
+ {abstract}int min(int)
+ int max()
+ {abstract}int max(int)
+ int damageRoll()
+ int damageRoll(int)
+ String statsDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.effects.Identification {
- {static} int[] DOTS
+ void update()
+ void draw()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.Identification$Speck {
- {static} int COLOR
- {static} int SIZE
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.items.quest.GooBlob {
+ boolean isUpgradable()
+ boolean isIdentified()
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.AlbinoSprite {
}
class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.HallwayExitRoom {
+ boolean isExit()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Spear {
+ int max(int)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
+ {static} void spikeAbility(Hero,Integer,float,int,MeleeWeapon)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Shadows {
# float left
- {static} String LEFT
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ boolean attachTo(Char)
+ void detach()
+ boolean act()
+ void prolong()
+ int icon()
+ float iconFadePercent()
+ String desc()
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfArcaneArmor {
+ void apply(Hero)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfArcaneArmor$Recipe {
}
class com.shatteredpixel.shatteredpixeldungeon.ui.HeroIcon {
- {static} TextureFilm film
- {static} int SIZE
+ {static} int NONE
+ {static} int BERSERKER
+ {static} int GLADIATOR
+ {static} int BATTLEMAGE
+ {static} int WARLOCK
+ {static} int ASSASSIN
+ {static} int FREERUNNER
+ {static} int SNIPER
+ {static} int WARDEN
+ {static} int CHAMPION
+ {static} int MONK
+ {static} int HEROIC_LEAP
+ {static} int SHOCKWAVE
+ {static} int ENDURE
+ {static} int ELEMENTAL_BLAST
+ {static} int WILD_MAGIC
+ {static} int WARP_BEACON
+ {static} int SMOKE_BOMB
+ {static} int DEATH_MARK
+ {static} int SHADOW_CLONE
+ {static} int SPECTRAL_BLADES
+ {static} int NATURES_POWER
+ {static} int SPIRIT_HAWK
+ {static} int CHALLENGE
+ {static} int ELEMENTAL_STRIKE
+ {static} int FEINT
+ {static} int RATMOGRIFY
+ {static} int BERSERK
+ {static} int COMBO
+ {static} int PREPARATION
+ {static} int MOMENTUM
+ {static} int SNIPERS_MARK
+ {static} int WEAPON_SWAP
+ {static} int MONK_ABILITIES
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DemonSpawner {
- float spawnCooldown
+ boolean spawnRecorded
+ {static} String SPAWN_COOLDOWN
+ {static} String SPAWN_RECORDED
+ int drRoll()
+ void beckon(int)
+ boolean reset()
# boolean act()
+ void damage(int,Object)
+ void die(Object)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Hunger {
- {static} float STEP
+ {static} float HUNGRY
+ {static} float STARVING
- float level
- float partialDamage
- {static} String LEVEL
- {static} String PARTIALDAMAGE
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ boolean act()
+ void satisfy(float)
+ void affectHunger(float)
+ void affectHunger(float,boolean)
+ boolean isStarving()
+ int hunger()
+ int icon()
+ String name()
+ String desc()
+ void onDeath()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CircleWallRoom {
+ float[] sizeCatProbs()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Unstable {
- {static} ItemSprite.Glowing GREY
- {static} Class<? extends Weapon.Enchantment>[] randomEnchants
+ int proc(Weapon,Char,Char,int)
+ ItemSprite.Glowing glowing()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.Brew {
+ ArrayList<String> actions(Hero)
+ String defaultAction()
+ void doThrow(Hero)
+ {abstract}void shatter(int)
+ boolean isKnown()
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.RotLasherSprite {
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.items.quest.CorpseDust {
+ ArrayList<String> actions(Hero)
+ boolean isUpgradable()
+ boolean isIdentified()
+ boolean doPickUp(Hero,int)
# void onDetach()
}

class com.shatteredpixel.shatteredpixeldungeon.items.quest.CorpseDust$DustGhostSpawner {
~ int spawnPower
- {static} String SPAWNPOWER
+ boolean act()
+ void dispel()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.quest.CorpseDust$DustWraith {
}
class com.shatteredpixel.shatteredpixeldungeon.levels.traps.OozeTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.SpectralNecromancerSprite {
- Animation charging
- Emitter summoningParticles
+ void link(Char)
+ void update()
+ void die()
+ void kill()
+ void cancelSummoning()
+ void finishSummoning()
+ void charge()
+ void zap(int)
+ void onComplete(Animation)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.AdrenalineDart {
+ int proc(Char,Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.GnollGeomancerSprite {
~ boolean isStatue
- Emitter earthArmor
+ void link(Char)
- void updateAnims()
+ void setupArmor()
+ void loseArmor()
+ void update()
+ void die()
+ void kill()
+ void onComplete(Animation)
+ void idle()
+ int blood()
}


class com.shatteredpixel.shatteredpixeldungeon.items.remains.BowFragment {
# void doEffect(Hero)
}

class com.shatteredpixel.shatteredpixeldungeon.Badges {
- {static} HashSet<Badge> global
- {static} HashSet<Badge> local
- {static} boolean saveNeeded
+ {static} String BADGES_FILE
- {static} String BADGES
- {static} HashSet<String> removedBadges
- {static} HashMap<String,String> renamedBadges
- {static} LinkedHashMap<HeroClass,Badge> firstBossClassBadges
- {static} LinkedHashMap<HeroClass,Badge> victoryClassBadges
- {static} LinkedHashMap<HeroSubClass,Badge> thirdBossSubclassBadges
- {static} Badge[][] tierBadgeReplacements
- {static} Badge[][] prerequisiteBadges
- {static} Badge[][] summaryBadgeReplacements
+ {static} void reset()
+ {static} HashSet<Badge> restore(Bundle)
+ {static} void store(Bundle,HashSet<Badge>)
+ {static} void loadLocal(Bundle)
+ {static} void saveLocal(Bundle)
+ {static} void loadGlobal()
+ {static} void saveGlobal()
+ {static} void saveGlobal(boolean)
+ {static} int totalUnlocked(boolean)
+ {static} void validateMonstersSlain()
+ {static} void validateGoldCollected()
+ {static} void validateLevelReached()
+ {static} void validateStrengthAttained()
+ {static} void validateFoodEaten()
+ {static} void validateItemsCrafted()
+ {static} void validatePiranhasKilled()
+ {static} void validateItemLevelAquired(Item)
+ {static} void validateAllBagsBought(Item)
+ {static} void validateItemsIdentified()
+ {static} void validateDeathFromFire()
+ {static} void validateDeathFromPoison()
+ {static} void validateDeathFromGas()
+ {static} void validateDeathFromHunger()
+ {static} void validateDeathFromFalling()
+ {static} void validateDeathFromEnemyMagic()
+ {static} void validateDeathFromFriendlyMagic()
+ {static} void validateDeathFromSacrifice()
+ {static} void validateDeathFromGrimOrDisintTrap()
- {static} void validateDeathFromAll()
+ {static} void validateBossSlain()
+ {static} void validateBossChallengeCompleted()
+ {static} void validateMastery()
+ {static} void validateRatmogrify()
+ {static} void validateMageUnlock()
+ {static} void validateRogueUnlock()
+ {static} void validateHuntressUnlock()
+ {static} void validateDuelistUnlock()
+ {static} void validateMasteryCombo(int)
+ {static} void validateVictory()
+ {static} void validateNoKilling()
+ {static} void validateGrimWeapon()
+ {static} void validateGamesPlayed()
+ {static} void validateHighScore(int)
+ {static} void validateHappyEnd()
+ {static} void validateChampion(int)
- {static} void displayBadge(Badge)
+ {static} boolean isUnlocked(Badge)
+ {static} HashSet<Badge> allUnlocked()
+ {static} void disown(Badge)
+ {static} void unlock(Badge)
+ {static} List<Badge> filterReplacedBadges(boolean)
+ {static} List<Badge> filterReplacedBadges(List<Badge>)
- {static} void leaveBest(Collection<Badge>,Badge)
+ {static} List<Badge> filterBadgesWithoutPrerequisites(List<Badges.Badge>)
- {static} void leaveWorst(Collection<Badge>,Badge)
+ {static} Collection<Badge> addReplacedBadges(Collection<Badges.Badge>)
- {static} void addLower(Collection<Badge>,Badge)
+ {static} String showCompletionProgress(Badge)
}


enum com.shatteredpixel.shatteredpixeldungeon.Badge {
+  MASTERY_WARRIOR
+  MASTERY_MAGE
+  MASTERY_ROGUE
+  MASTERY_HUNTRESS
+  MASTERY_DUELIST
+  FOUND_RATMOGRIFY
+  UNLOCK_MAGE
+  UNLOCK_ROGUE
+  UNLOCK_HUNTRESS
+  UNLOCK_DUELIST
+  MONSTERS_SLAIN_1
+  MONSTERS_SLAIN_2
+  GOLD_COLLECTED_1
+  GOLD_COLLECTED_2
+  ITEM_LEVEL_1
+  LEVEL_REACHED_1
+  STRENGTH_ATTAINED_1
+  FOOD_EATEN_1
+  ITEMS_CRAFTED_1
+  BOSS_SLAIN_1
+  DEATH_FROM_FIRE
+  DEATH_FROM_POISON
+  DEATH_FROM_GAS
+  DEATH_FROM_HUNGER
+  DEATH_FROM_FALLING
+  GAMES_PLAYED_1
+  HIGH_SCORE_1
+  NO_MONSTERS_SLAIN
+  BOSS_SLAIN_REMAINS
+  MONSTERS_SLAIN_3
+  MONSTERS_SLAIN_4
+  GOLD_COLLECTED_3
+  GOLD_COLLECTED_4
+  ITEM_LEVEL_2
+  ITEM_LEVEL_3
+  LEVEL_REACHED_2
+  LEVEL_REACHED_3
+  STRENGTH_ATTAINED_2
+  STRENGTH_ATTAINED_3
+  FOOD_EATEN_2
+  FOOD_EATEN_3
+  ITEMS_CRAFTED_2
+  ITEMS_CRAFTED_3
+  BOSS_SLAIN_2
+  BOSS_SLAIN_3
+  ALL_POTIONS_IDENTIFIED
+  ALL_SCROLLS_IDENTIFIED
+  DEATH_FROM_ENEMY_MAGIC
+  DEATH_FROM_FRIENDLY_MAGIC
+  DEATH_FROM_SACRIFICE
+  BOSS_SLAIN_1_WARRIOR
+  BOSS_SLAIN_1_MAGE
+  BOSS_SLAIN_1_ROGUE
+  BOSS_SLAIN_1_HUNTRESS
+  BOSS_SLAIN_1_DUELIST
+  BOSS_SLAIN_1_ALL_CLASSES
+  GAMES_PLAYED_2
+  HIGH_SCORE_2
+  PIRANHAS
+  GRIM_WEAPON
+  BAG_BOUGHT_VELVET_POUCH
+  BAG_BOUGHT_SCROLL_HOLDER
+  BAG_BOUGHT_POTION_BANDOLIER
+  BAG_BOUGHT_MAGICAL_HOLSTER
+  ALL_BAGS_BOUGHT
+  MASTERY_COMBO
+  MONSTERS_SLAIN_5
+  GOLD_COLLECTED_5
+  ITEM_LEVEL_4
+  LEVEL_REACHED_4
+  STRENGTH_ATTAINED_4
+  STRENGTH_ATTAINED_5
+  FOOD_EATEN_4
+  FOOD_EATEN_5
+  ITEMS_CRAFTED_4
+  ITEMS_CRAFTED_5
+  BOSS_SLAIN_4
+  ALL_RINGS_IDENTIFIED
+  ALL_ARTIFACTS_IDENTIFIED
+  DEATH_FROM_GRIM_TRAP
+  VICTORY
+  BOSS_CHALLENGE_1
+  BOSS_CHALLENGE_2
+  GAMES_PLAYED_3
+  HIGH_SCORE_3
+  ITEM_LEVEL_5
+  LEVEL_REACHED_5
+  HAPPY_END
+  HAPPY_END_REMAINS
+  ALL_WEAPONS_IDENTIFIED
+  ALL_ARMOR_IDENTIFIED
+  ALL_WANDS_IDENTIFIED
+  ALL_ITEMS_IDENTIFIED
+  VICTORY_WARRIOR
+  VICTORY_MAGE
+  VICTORY_ROGUE
+  VICTORY_HUNTRESS
+  VICTORY_DUELIST
+  VICTORY_ALL_CLASSES
+  DEATH_FROM_ALL
+  BOSS_SLAIN_3_GLADIATOR
+  BOSS_SLAIN_3_BERSERKER
+  BOSS_SLAIN_3_WARLOCK
+  BOSS_SLAIN_3_BATTLEMAGE
+  BOSS_SLAIN_3_FREERUNNER
+  BOSS_SLAIN_3_ASSASSIN
+  BOSS_SLAIN_3_SNIPER
+  BOSS_SLAIN_3_WARDEN
+  BOSS_SLAIN_3_CHAMPION
+  BOSS_SLAIN_3_MONK
+  BOSS_SLAIN_3_ALL_SUBCLASSES
+  BOSS_CHALLENGE_3
+  BOSS_CHALLENGE_4
+  GAMES_PLAYED_4
+  HIGH_SCORE_4
+  CHAMPION_1
+  BOSS_CHALLENGE_5
+  GAMES_PLAYED_5
+  HIGH_SCORE_5
+  CHAMPION_2
+  CHAMPION_3
+ boolean meta
+ int image
+ String title()
+ String desc()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.Terrain {
+ {static} int CHASM
+ {static} int EMPTY
+ {static} int GRASS
+ {static} int EMPTY_WELL
+ {static} int WALL
+ {static} int DOOR
+ {static} int OPEN_DOOR
+ {static} int ENTRANCE
+ {static} int ENTRANCE_SP
+ {static} int EXIT
+ {static} int EMBERS
+ {static} int LOCKED_DOOR
+ {static} int CRYSTAL_DOOR
+ {static} int PEDESTAL
+ {static} int WALL_DECO
+ {static} int BARRICADE
+ {static} int EMPTY_SP
+ {static} int HIGH_GRASS
+ {static} int FURROWED_GRASS
+ {static} int SECRET_DOOR
+ {static} int SECRET_TRAP
+ {static} int TRAP
+ {static} int INACTIVE_TRAP
+ {static} int EMPTY_DECO
+ {static} int LOCKED_EXIT
+ {static} int UNLOCKED_EXIT
+ {static} int WELL
+ {static} int BOOKSHELF
+ {static} int ALCHEMY
+ {static} int CUSTOM_DECO_EMPTY
+ {static} int CUSTOM_DECO
+ {static} int STATUE
+ {static} int STATUE_SP
+ {static} int MINE_CRYSTAL
+ {static} int MINE_BOULDER
+ {static} int WATER
+ {static} int PASSABLE
+ {static} int LOS_BLOCKING
+ {static} int FLAMABLE
+ {static} int SECRET
+ {static} int SOLID
+ {static} int AVOID
+ {static} int LIQUID
+ {static} int PIT
+ {static} int[] flags
+ {static} int discover(int)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Recharging {
+ {static} float DURATION
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ float remainder()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.traps.WeakeningTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicImmune {
+ {static} float DURATION
+ boolean attachTo(Char)
+ void detach()
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.AcidicSprite {
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.items.special.Dewdrop {
+ boolean doPickUp(Hero,int)
+ {static} boolean consumeDew(int,Hero,boolean)
+ boolean isUpgradable()
+ boolean isIdentified()
+ Item merge(Item)
+ Item quantity(int)
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.WandmakerSprite {
- ShieldHalo shield
+ void link(Char)
+ void die()
}


class com.shatteredpixel.shatteredpixeldungeon.plants.Starflower {
+ void activate(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Starflower$Seed {
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.items.quest.Embers {
+ boolean isUpgradable()
+ boolean isIdentified()
+ ItemSprite.Glowing glowing()
}

class com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile {
- {static} float SPEED
- Callback callback
- PointF to
- float sx
- float sy
- float time
+ {static} int MAGIC_MISSILE
+ {static} int FROST
+ {static} int FIRE
+ {static} int CORROSION
+ {static} int FOLIAGE
+ {static} int FORCE
+ {static} int BEACON
+ {static} int SHADOW
+ {static} int RAINBOW
+ {static} int EARTH
+ {static} int WARD
+ {static} int SHAMAN_RED
+ {static} int SHAMAN_BLUE
+ {static} int SHAMAN_PURPLE
+ {static} int TOXIC_VENT
+ {static} int ELMO
+ {static} int POISON
+ {static} int MAGIC_MISS_CONE
+ {static} int FROST_CONE
+ {static} int FIRE_CONE
+ {static} int CORROSION_CONE
+ {static} int FOLIAGE_CONE
+ {static} int FORCE_CONE
+ {static} int SHADOW_CONE
+ {static} int RAINBOW_CONE
+ {static} int EARTH_CONE
+ {static} int WARD_CONE
+ {static} int PURPLE_CONE
+ {static} int SPARK_CONE
+ {static} int BLOOD_CONE
+ void reset(int,int,int,Callback)
+ void reset(int,Visual,Visual,Callback)
+ void reset(int,Visual,int,Callback)
+ void reset(int,PointF,PointF,Callback)
+ void size(float)
+ void setSpeed(float)
+ {static} MagicMissile boltFromChar(Group,int,Visual,int,Callback)
# boolean isFrozen()
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$MagicParticle {
+ {static} Emitter.Factory FACTORY
+ {static} Emitter.Factory ATTRACTING
+ void reset(float,float)
+ void resetAttract(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$EarthParticle {
+ {static} Emitter.Factory FACTORY
+ {static} Emitter.Factory BURST
+ {static} Emitter.Factory ATTRACT
+ void reset(float,float)
+ void resetBurst(float,float)
+ void resetAttract(float,float)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$ShamanParticle {
+ {static} Emitter.Factory RED
+ {static} Emitter.Factory BLUE
+ {static} Emitter.Factory PURPLE
~ int startColor
~ int endColor
+ void reset(float,float,int)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$WhiteParticle {
+ {static} Emitter.Factory FACTORY
+ void reset(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$SlowParticle {
- Emitter emitter
+ {static} Emitter.Factory FACTORY
+ void reset(float,float,Emitter)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$ForceParticle {
+ {static} Emitter.Factory FACTORY
+ void reset(int,float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$WardParticle {
+ {static} Emitter.Factory FACTORY
+ {static} Emitter.Factory UP
+ void reset(float,float)
+ void resetUp(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfForce {
+ {static} String AC_ABILITY
# RingBuff buff()
+ {static} int armedDamageBonus(Char)
+ boolean doUnequip(Hero,boolean,boolean)
- {static} float tier(int)
+ {static} int damageRoll(Hero)
- {static} int min(int,float)
- {static} int max(int,float)
+ String statsInfo()
+ void activate(Char)
+ String defaultAction()
+ ArrayList<String> actions(Hero)
+ String actionName(String,Hero)
+ void execute(Hero,String)
+ String info()
+ {static} boolean fightingUnarmed(Hero)
+ {static} boolean unarmedGetsWeaponEnchantment(Hero)
+ {static} boolean unarmedGetsWeaponAugment(Hero)
}


class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfForce$Force {
}
class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfForce$BrawlersStance {
+ boolean active
- int minTurnsLeft
+ {static} String ACTIVE
+ {static} String MIN_TURNS_LEFT
+ void reset()
+ int icon()
+ boolean act()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.WarriorArmor {
}
class com.shatteredpixel.shatteredpixeldungeon.sprites.FetidRatSprite {
- Emitter cloud
+ void link(Char)
+ void update()
+ void kill()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.BruteSprite {
}
class com.shatteredpixel.shatteredpixeldungeon.items.food.Food {
+ {static} float TIME_TO_EAT
+ {static} String AC_EAT
+ float energy
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
# void eatSFX()
# float eatingTime()
# void satisfy(Hero)
+ boolean isUpgradable()
+ boolean isIdentified()
+ int value()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicalSleep {
- {static} float STEP
+ boolean attachTo(Char)
+ boolean act()
+ void detach()
+ int icon()
+ void fx(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Spinner {
- int webCoolDown
- int lastEnemyPos
- {static} String WEB_COOLDOWN
- {static} String LAST_ENEMY_POS
- boolean shotWebVisually
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
# boolean act()
+ int attackProc(Char,int)
+ int webPos()
+ void shootWeb()
# void applyWebToCell(int)
- int left(int)
- int right(int)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Spinner$Hunting {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Spinner$Fleeing {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.EyeOfNewt {
# int upgradeEnergyCost()
+ String desc()
+ {static} float visionRangeMultiplier()
+ {static} float visionRangeMultiplier(int)
+ {static} int mindVisionRange()
+ {static} int mindVisionRange(int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfPassage {
+ void doRead()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Chilling {
- {static} ItemSprite.Glowing TEAL
+ int proc(Weapon,Char,Char,int)
+ Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.Chains {
- {static} double A
- float spent
- float duration
- Callback callback
- Image[] chains
- int numChains
- float distance
- float rotation
- PointF from
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.SpinnerSprite {
+ void link(Char)
+ void zap(int)
+ void onComplete(Animation)
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.LaboratoryRoom {
+ void paint(Level)
- {static} Item prize(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.TenguSprite {
+ void play(Animation)
+ void move(int,int)
+ void update()
+ void attack(int)
+ void onComplete(Animation)
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.TenguSprite$TenguShuriken {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Healing {
- int healingLeft
- float percentHealPerTick
- int flatHealPerTick
- {static} String LEFT
- {static} String PERCENT
- {static} String FLAT
+ boolean act()
- int healingThisTick()
+ void setHeal(int,float,int)
+ void increaseHeal(int)
+ void fx(boolean)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int icon()
+ String iconTextDisplay()
+ String desc()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.painters.SewerPainter {
# void decorate(Level,ArrayList<Room>)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Combo {
- int count
- float comboTime
- float initialComboTime
- {static} String COUNT
- {static} String TIME
- {static} String INITIAL_TIME
- {static} String CLOBBER_USED
- {static} String PARRY_USED
- boolean clobberUsed
- boolean parryUsed
- {static} ComboMove moveBeingUsed
- CellSelector.Listener listener
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ void hit(Char)
+ void addTime(float)
+ void detach()
+ boolean act()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ String actionName()
+ int actionIcon()
+ Visual secondaryVisual()
+ int indicatorColor()
+ void doAction()
+ ComboMove getHighestMove()
+ int getComboCount()
+ boolean canUseMove(ComboMove)
+ void useMove(ComboMove)
- void doAttack(Char)
}


enum com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ComboMove {
+  CLOBBER
+  SLAM
+  PARRY
+  CRUSH
+  FURY
+ int comboReq
+ String title()
+ String desc(int)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Combo$ParryTracker {
+ boolean parried
+ void detach()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Combo$RiposteTracker {
+ Char enemy
+ boolean act()
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfRetribution {
+ void doRead()
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.bombs.ArcaneBomb {
# void onThrow(int)
+ boolean explodesDestructively()
+ void explode(int)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM200 {
- int ventCooldown
- {static} String VENT_COOLDOWN
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
+ float lootChance()
+ Item createLoot()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
# boolean act()
+ void onZapComplete()
- void zap()
# boolean canVent(int)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM200$Hunting {
+ boolean act(boolean,boolean)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket {
+ boolean isIdentified()
+ boolean isUpgradable()
# {abstract}int upgradeEnergyCost()
# {static} int trinketLevel(Class<? extends Trinket>)
}

class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket$PlaceHolder {
# int upgradeEnergyCost()
+ boolean isSimilar(Item)
+ String info()
}

class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket$UpgradeTrinket {
+ boolean testIngredients(ArrayList<Item>)
+ int cost(ArrayList<Item>)
+ Item brew(ArrayList<Item>)
+ Item sampleOutput(ArrayList<Item>)
}

class com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfAggression {
# void activate(int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfAggression$Aggression {
+ {static} float DURATION
+ int icon()
+ float iconFadePercent()
+ void detach()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndTextInput {
- {static} int WIDTH
- {static} int W_LAND_EXTRA
- {static} int MARGIN
- {static} int BUTTON_HEIGHT
# TextInput textBox
# RedButton btnCopy
# RedButton btnPaste
+ void update()
+ void offset(int,int)
+ void onSelect(boolean,String)
+ void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Snake {
- {static} int dodges
+ int damageRoll()
+ int attackSkill(Char)
+ String defenseVerb()
}


class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrinketCatalyst {
- ArrayList<Trinket> rolledTrinkets
- {static} String ROLLED_TRINKETS
+ boolean isIdentified()
+ boolean isUpgradable()
+ boolean doPickUp(Hero,int)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrinketCatalyst$Recipe {
+ boolean testIngredients(ArrayList<Item>)
+ int cost(ArrayList<Item>)
+ Item brew(ArrayList<Item>)
+ Item sampleOutput(ArrayList<Item>)
}

class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrinketCatalyst$WndTrinket {
- {static} int WIDTH
- {static} int BTN_SIZE
- {static} int BTN_GAP
- {static} int GAP
- {static} int NUM_TRINKETS
+ void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrinketCatalyst$WndTrinket$RewardWindow {
}
class com.shatteredpixel.shatteredpixeldungeon.plants.Icecap {
+ void activate(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Icecap$Seed {
}
class com.shatteredpixel.shatteredpixeldungeon.ui.ResumeIndicator {
- Image icon
+ GameAction keyAction()
# void createChildren()
# void layout()
# void onClick()
# String hoverText()
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.Flare {
- float duration
- float lifespan
- boolean lightMode
- SmartTexture texture
- FloatBuffer vertices
- ShortBuffer indices
- int nRays
+ Flare color(int,boolean)
+ Flare show(Visual,float)
+ Flare show(Group,PointF,float)
+ void update()
+ void draw()
- void drawRays()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Javelin {
}
class com.shatteredpixel.shatteredpixeldungeon.plants.Stormvine {
+ void activate(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Stormvine$Seed {
}
class com.shatteredpixel.shatteredpixeldungeon.items.journal.AlchemyPage {
+ Document document()
+ String desc()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.PylonSprite {
- Animation activeIdle
+ void link(Char)
+ void place(int)
+ void activate()
+ void play(Animation)
+ void onComplete(Animation)
+ int blood()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.traps.ExplosiveTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Flow {
- {static} ItemSprite.Glowing BLUE
+ int proc(Armor,Char,Char,int)
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.traps.PitfallTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.PitfallTrap$DelayedPit {
~ int pos
~ int depth
~ int branch
- {static} String POS
- {static} String DEPTH
- {static} String BRANCH
+ boolean act()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Warlock {
- {static} float TIME_TO_ZAP
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
# boolean canAttack(Char)
# boolean doAttack(Char)
# void zap()
+ void onZapComplete()
+ void call()
+ Item createLoot()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Warlock$DarkBolt {
}
class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.ForceCube {
+ void hitSound(float)
# void onThrow(int)
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndKeyBindings {
- {static} int WIDTH
- {static} int BTN_HEIGHT
- {static} int COL1_CENTER
- {static} int COL2_CENTER
- {static} int COL3_CENTER
- {static} int COL4_CENTER
- Component bindingsList
- ArrayList<BindingItem> listItems
- LinkedHashMap<Integer,GameAction> changedBindings
- {static} boolean controller
+ void offset(int,int)
+ void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndKeyBindings$BindingItem {
- {static} int HEIGHT
- {static} int CHANGED
- {static} int DEFAULT
- {static} int UNBOUND
- {static} int UNBOUND_CHANGED
- GameAction gameAction
- int key1
- int key2
- int key3
- int origKey1
- int origKey2
- int origKey3
- RenderedTextBlock actionName
- RenderedTextBlock key1Name
- RenderedTextBlock key2Name
- RenderedTextBlock key3Name
- ColorBlock sep1
- ColorBlock sep2
- ColorBlock sep3
- ColorBlock sep4
+ void updateBindings(int,int,int)
# void layout()
- boolean onClick(float,float)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndKeyBindings$WndChangeBinding {
- int curKeyCode
- int otherBoundKey1
- int otherBoundKey2
- int changedKeyCode
- BindingItem changedAction
- RenderedTextBlock changedKey
- RenderedTextBlock warnErr
- RedButton btnUnbind
- RedButton btnConfirm
- RedButton btnCancel
+ boolean onSignal(KeyEvent)
+ void destroy()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite {
- {static} float SLAM_TIME
# int boltType
- Emitter particles
# {abstract}int texOffset()
# {abstract}Emitter createEmitter()
+ void link(Char)
+ void update()
+ void die()
+ void kill()
+ void attack(int)
+ void zap(int)
+ void onComplete(Animation)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Burning {
# int texOffset()
# Emitter createEmitter()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Soiled {
# int texOffset()
# Emitter createEmitter()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Rotting {
# int texOffset()
# Emitter createEmitter()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Rusted {
# int texOffset()
# Emitter createEmitter()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Bright {
# int texOffset()
# Emitter createEmitter()
+ void zap(int)
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Dark {
# int texOffset()
# Emitter createEmitter()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Chill {
+ {static} float DURATION
+ boolean attachTo(Char)
+ float speedFactor()
+ int icon()
+ float iconFadePercent()
+ void fx(boolean)
+ String desc()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.RatKingSprite {
+ boolean festive
+ void resetAnims()
+ void link(Char)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.ElementalBlast {
- {static} HashMap<Class<? extends Wand>,Integer> effectTypes
- {static} HashMap<Class<? extends Wand>,Float> damageFactors
# void activate(ClassArmor,Hero,Integer)
+ String desc()
+ int icon()
+ Talent[] talents()
}


class com.shatteredpixel.shatteredpixeldungeon.items.special.Amulet {
- {static} String AC_END
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ boolean doPickUp(Hero,int)
- void showAmuletScene(boolean)
+ boolean isIdentified()
+ boolean isUpgradable()
+ String desc()
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfFeatherFall {
+ void apply(Hero)
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfFeatherFall$FeatherBuff {
+ {static} float DURATION
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfFeatherFall$Recipe {
- {static} int OUT_QUANTITY
}

class com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Swiftness {
- {static} ItemSprite.Glowing YELLOW
+ int proc(Armor,Char,Char,int)
+ ItemSprite.Glowing glowing()
}


enum com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent {
+  HEARTY_MEAL
+  VETERANS_INTUITION
+  PROVOKED_ANGER
+  IRON_WILL
+  IRON_STOMACH
+  LIQUID_WILLPOWER
+  RUNIC_TRANSFERENCE
+  LETHAL_MOMENTUM
+  IMPROVISED_PROJECTILES
+  HOLD_FAST
+  STRONGMAN
+  ENDLESS_RAGE
+  DEATHLESS_FURY
+  ENRAGED_CATALYST
+  CLEAVE
+  LETHAL_DEFENSE
+  ENHANCED_COMBO
+  BODY_SLAM
+  IMPACT_WAVE
+  DOUBLE_JUMP
+  EXPANDING_WAVE
+  STRIKING_WAVE
+  SHOCK_FORCE
+  SUSTAINED_RETRIBUTION
+  SHRUG_IT_OFF
+  EVEN_THE_ODDS
+  EMPOWERING_MEAL
+  SCHOLARS_INTUITION
+  LINGERING_MAGIC
+  BACKUP_BARRIER
+  ENERGIZING_MEAL
+  INSCRIBED_POWER
+  WAND_PRESERVATION
+  ARCANE_VISION
+  SHIELD_BATTERY
+  DESPERATE_POWER
+  ALLY_WARP
+  EMPOWERED_STRIKE
+  MYSTICAL_CHARGE
+  EXCESS_CHARGE
+  SOUL_EATER
+  SOUL_SIPHON
+  NECROMANCERS_MINIONS
+  BLAST_RADIUS
+  ELEMENTAL_POWER
+  REACTIVE_BARRIER
+  WILD_POWER
+  FIRE_EVERYTHING
+  CONSERVED_MAGIC
+  TELEFRAG
+  REMOTE_BEACON
+  LONGRANGE_WARP
+  CACHED_RATIONS
+  THIEFS_INTUITION
+  SUCKER_PUNCH
+  PROTECTIVE_SHADOWS
+  MYSTICAL_MEAL
+  INSCRIBED_STEALTH
+  WIDE_SEARCH
+  SILENT_STEPS
+  ROGUES_FORESIGHT
+  ENHANCED_RINGS
+  LIGHT_CLOAK
+  ENHANCED_LETHALITY
+  ASSASSINS_REACH
+  BOUNTY_HUNTER
+  EVASIVE_ARMOR
+  PROJECTILE_MOMENTUM
+  SPEEDY_STEALTH
+  HASTY_RETREAT
+  BODY_REPLACEMENT
+  SHADOW_STEP
+  FEAR_THE_REAPER
+  DEATHLY_DURABILITY
+  DOUBLE_MARK
+  SHADOW_BLADE
+  CLONED_ARMOR
+  PERFECT_COPY
+  NATURES_BOUNTY
+  SURVIVALISTS_INTUITION
+  FOLLOWUP_STRIKE
+  NATURES_AID
+  INVIGORATING_MEAL
+  LIQUID_NATURE
+  REJUVENATING_STEPS
+  HEIGHTENED_SENSES
+  DURABLE_PROJECTILES
+  POINT_BLANK
+  SEER_SHOT
+  FARSIGHT
+  SHARED_ENCHANTMENT
+  SHARED_UPGRADES
+  DURABLE_TIPS
+  BARKSKIN
+  SHIELDING_DEW
+  FAN_OF_BLADES
+  PROJECTING_BLADES
+  SPIRIT_BLADES
+  GROWING_POWER
+  NATURES_WRATH
+  WILD_MOMENTUM
+  EAGLE_EYE
+  GO_FOR_THE_EYES
+  SWIFT_SPIRIT
+  STRENGTHENING_MEAL
+  ADVENTURERS_INTUITION
+  PATIENT_STRIKE
+  AGGRESSIVE_BARRIER
+  FOCUSED_MEAL
+  LIQUID_AGILITY
+  WEAPON_RECHARGING
+  LETHAL_HASTE
+  SWIFT_EQUIP
+  PRECISE_ASSAULT
+  DEADLY_FOLLOWUP
+  VARIED_CHARGE
+  TWIN_UPGRADES
+  COMBINED_LETHALITY
+  UNENCUMBERED_SPIRIT
+  MONASTIC_VIGOR
+  COMBINED_ENERGY
+  CLOSE_THE_GAP
+  INVIGORATING_VICTORY
+  ELIMINATION_MATCH
+  ELEMENTAL_REACH
+  STRIKING_FORCE
+  DIRECTED_POWER
+  FEIGNED_RETREAT
+  EXPOSE_WEAKNESS
+  COUNTER_ABILITY
+  HEROIC_ENERGY
+  RATSISTANCE
+  RATLOMACY
+  RATFORCEMENTS
~ int icon
~ int maxPoints
+ {static} int[] tierLevelThresholds
+ {static} int MAX_TALENT_TIERS
- {static} String TALENT_TIER
- {static} HashSet<String> removedTalents
- {static} HashMap<String,String> renamedTalents
+ int icon()
+ int maxPoints()
+ String title()
+ String desc()
+ String desc(boolean)
+ {static} void onTalentUpgraded(Hero,Talent)
+ {static} void onFoodEaten(Hero,float,Item)
+ {static} float itemIDSpeedFactor(Hero,Item)
+ {static} void onPotionUsed(Hero,int,float)
+ {static} void onScrollUsed(Hero,int,float)
+ {static} void onUpgradeScrollUsed(Hero)
+ {static} void onArtifactUsed(Hero)
+ {static} void onItemEquipped(Hero,Item)
+ {static} void onItemCollected(Hero,Item)
+ {static} void onItemIdentified(Hero,Item)
+ {static} int onAttackProc(Hero,Char,int)
+ {static} void initClassTalents(Hero)
+ {static} void initClassTalents(HeroClass,ArrayList<LinkedHashMap<Talent,Integer>>)
+ {static} void initClassTalents(HeroClass,ArrayList<LinkedHashMap<Talent,Integer>>,LinkedHashMap<Talent,Talent>)
+ {static} void initSubclassTalents(Hero)
+ {static} void initSubclassTalents(HeroSubClass,ArrayList<LinkedHashMap<Talent,Integer>>)
+ {static} void initArmorTalents(Hero)
+ {static} void initArmorTalents(ArmorAbility,ArrayList<LinkedHashMap<Talent,Integer>>)
+ {static} void storeTalentsInBundle(Bundle,Hero)
+ {static} void restoreTalentsFromBundle(Bundle,Hero)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.ImprovisedProjectileCooldown {
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.LethalMomentumTracker {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.StrikingWaveTracker {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.WandPreservationCounter {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.EmpoweredStrikeTracker {
+ boolean delayedDetach
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.ProtectiveShadowsTracker {
~ float barrierInc
- {static} String BARRIER_INC
+ boolean act()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.BountyHunterTracker {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.RejuvenatingStepsCooldown {
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.RejuvenatingStepsFurrow {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.SeerShotCooldown {
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.SpiritBladesTracker {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.PatientStrikeTracker {
+ int pos
- {static} String POS
+ int icon()
+ void tintIcon(Image)
+ boolean act()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.AggressiveBarrierCooldown {
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.RestoredAgilityTracker {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.LethalHasteCooldown {
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.SwiftEquipCooldown {
+ boolean secondUse
- {static} String SECOND_USE
+ boolean hasSecondUse()
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.DeadlyFollowupTracker {
+ int object
- {static} String OBJECT
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.PreciseAssaultTracker {
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.VariedChargeTracker {
+ Class weapon
- {static} String WEAPON
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.CombinedLethalityAbilityTracker {
+ MeleeWeapon weapon
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.CombinedLethalityTriggerTracker {
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.CombinedEnergyAbilityTracker {
+ int energySpent
+ boolean wepAbilUsed
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.CounterAbilityTacker {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.CachedRationsDropped {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.NatureBerriesDropped {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.WarriorFoodImmunity {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.ProvokedAngerTracker {
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.LingeringMagicTracker {
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.SuckerPunchTracker {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.hero.FollowupStrikeTracker {
+ int object
- {static} String OBJECT
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Golem {
- boolean teleporting
- int selfTeleCooldown
- int enemyTeleCooldown
- {static} String TELEPORTING
- {static} String SELF_COOLDOWN
- {static} String ENEMY_COOLDOWN
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
+ float lootChance()
+ void rollToDropLoot()
+ Item createLoot()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
# boolean act()
+ void onZapComplete()
+ void teleportEnemy()
- boolean canTele(int)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Golem$Wandering {
# boolean continueWandering()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Golem$Hunting {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.features.Maze {
+ {static} boolean EMPTY
+ {static} boolean FILLED
+ {static} boolean allowDiagonals
+ {static} boolean[][] generate(Room)
+ {static} boolean[][] generate(Rect)
+ {static} boolean[][] generate(Rect,int[],int,int)
+ {static} boolean[][] generate(int,int)
+ {static} boolean[][] generate(boolean[][])
- {static} int[] decideDirection(boolean[][],int,int)
- {static} boolean checkValidMove(boolean[][],int,int,int[])
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.LostInventory {
+ boolean attachTo(Char)
+ void detach()
+ int icon()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.TormentedSpirit {
+ int damageRoll()
+ int attackSkill(Char)
+ void cleanse()
}

class com.shatteredpixel.shatteredpixeldungeon.items.LostBackpack {
+ boolean doPickUp(Hero,int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Metabolism {
- {static} ItemSprite.Glowing BLACK
+ int proc(Armor,Char,Char,int)
+ Glowing glowing()
+ boolean curse()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.WaterBridgeExitRoom {
+ int minWidth()
+ int minHeight()
+ boolean isExit()
+ void paint(Level)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.actors.Char {
+ int pos
+ CharSprite sprite
+ int HT
+ int HP
# float baseSpeed
# PathFinder.Path path
+ int paralysed
+ boolean rooted
+ boolean flying
+ int invisible
+ Alignment alignment
+ int viewDistance
+ boolean[] fieldOfView
- LinkedHashSet<Buff> buffs
# {static} String POS
# {static} String TAG_HP
# {static} String TAG_HT
# {static} String TAG_SHLD
# {static} String BUFFS
+ {static} int INFINITE_ACCURACY
+ {static} int INFINITE_EVASION
- int cachedShield
+ boolean needsShieldUpdate
- {static} HashSet<Class> NO_ARMOR_PHYSICAL_SOURCES
+ boolean deathMarked
# HashSet<Class> resistances
# HashSet<Class> immunities
# HashSet<Property> properties
# boolean act()
# void throwItems()
+ String name()
+ boolean canInteract(Char)
+ boolean interact(Char)
# boolean moveSprite(int,int)
+ void hitSound(float)
+ boolean blockSound(float)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ boolean attack(Char)
+ boolean attack(Char,float,float,float)
+ {static} boolean hit(Char,Char,boolean)
+ {static} boolean hit(Char,Char,float,boolean)
+ {static} int combatRoll(int,int)
+ int attackSkill(Char)
+ int defenseSkill(Char)
+ String defenseVerb()
+ int drRoll()
+ int damageRoll()
+ int attackProc(Char,int)
+ int defenseProc(Char,int)
+ float speed()
+ boolean canSurpriseAttack()
+ int shielding()
+ void damage(int,Object)
+ void destroy()
+ void die(Object)
+ boolean isAlive()
+ boolean isActive()
# void spendConstant(float)
# void spend(float)
+ LinkedHashSet<Buff> buffs()
+ HashSet<T> buffs(Class<T>)
+ T buff(Class<T>)
+ boolean isCharmedBy(Char)
+ boolean add(Buff)
+ boolean remove(Buff)
+ void remove(Class<? extends Buff>)
# void onRemove()
+ void updateSpriteState()
+ float stealth()
+ void move(int)
+ void move(int,boolean)
+ int distance(Char)
+ boolean[] modifyPassable(boolean[])
+ void onMotionComplete()
+ void onAttackComplete()
+ void onOperateComplete()
+ float resist(Class)
+ boolean isImmune(Class)
+ boolean isInvulnerable(Class)
+ HashSet<Property> properties()
+ {static} boolean hasProp(Char,Property)
}


enum com.shatteredpixel.shatteredpixeldungeon.actors.Alignment {
+  ENEMY
+  NEUTRAL
+  ALLY
}

enum com.shatteredpixel.shatteredpixeldungeon.actors.Property {
+  BOSS
+  MINIBOSS
+  BOSS_MINION
+  UNDEAD
+  DEMONIC
+  INORGANIC
+  FIERY
+  ICY
+  ACIDIC
+  ELECTRIC
+  LARGE
+  IMMOVABLE
+  STATIC
- HashSet<Class> resistances
- HashSet<Class> immunities
+ HashSet<Class> resistances()
+ HashSet<Class> immunities()
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Corrosion {
- {static} ItemSprite.Glowing BLACK
+ int proc(Armor,Char,Char,int)
+ ItemSprite.Glowing glowing()
+ boolean curse()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.items.spells.TargetedSpell {
# int collisionProperties
- {static} CellSelector.Listener targeter
# void onCast(Hero)
# {abstract}void affectTarget(Ballistica,Hero)
# void fx(Ballistica,Callback)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.ScrollPane {
# {static} int THUMB_COLOR
# {static} float THUMB_ALPHA
# PointerController controller
# Signal.Listener<KeyEvent> keyListener
# Component content
# ColorBlock thumb
- float keyScroll
+ void destroy()
+ void scrollTo(float,float)
+ void update()
# void createChildren()
# void layout()
+ Component content()
+ void onClick(float,float)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.ScrollPane$PointerController {
- float dragThreshold
- boolean dragging
- PointF lastPos
# void onScroll(ScrollEvent)
# void onPointerUp(PointerEvent)
# void onDrag(PointerEvent)
- void scroll(PointF)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Blooming {
- {static} ItemSprite.Glowing DARK_GREEN
+ int proc(Weapon,Char,Char,int)
- boolean plantGrass(int)
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.ui.CheckBox {
- boolean checked
# void layout()
+ boolean checked()
+ void checked(boolean)
# void onClick()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sword {
# int baseChargeUse(Hero,Char)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
+ {static} void cleaveAbility(Hero,Integer,float,int,MeleeWeapon)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sword$CleaveTracker {
+ int icon()
+ float iconFadePercent()
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Fadeleaf {
+ void activate(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Fadeleaf$Seed {
}
class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.AlchemistsToolkit {
+ {static} String AC_BREW
+ {static} String AC_ENERGIZE
- float warmUpDelay
- {static} String WARM_UP
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ String status()
# ArtifactBuff passiveBuff()
+ void charge(Hero,float)
+ int availableEnergy()
+ int consumeEnergy(int)
+ String desc()
+ boolean doEquip(Hero)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.AlchemistsToolkit$kitEnergy {
+ boolean act()
+ void gainCharge(float)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.MiningLevel {
+ String tilesTex()
+ void playLevelMusic()
# ArrayList<Room> initRooms()
# Builder builder()
# boolean build()
# Painter painter()
+ int mobLimit()
+ Mob createMob()
+ float respawnCooldown()
# void createItems()
# int randomDropCell()
+ String tileName(int)
+ boolean activateTransition(Hero,LevelTransition)
+ String tileDesc(int)
+ Group addVisuals()
+ Group addWallVisuals()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.MiningLevel$BorderTopDarken {
+ Tilemap create()
+ Image image(int,int)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.MiningLevel$BorderWallsDarken {
+ Tilemap create()
+ Image image(int,int)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Freezing {
# void evolve()
+ {static} void freeze(int)
+ void use(BlobEmitter)
+ String tileDesc()
+ {static} boolean affect(int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfParalyticGas {
+ void shatter(int)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfClairvoyance {
- {static} int DIST
# void activate(int)
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfLullaby {
+ void doRead()
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed {
# ArrayList<Tab> tabs
# Tab selected
- Signal.Listener<KeyEvent> tabListener
+ void destroy()
# Tab add(Tab)
+ void select(int)
+ void select(Tab)
+ void resize(int,int)
+ void layoutTabs()
# int tabHeight()
# void onClick(Tab)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed$Tab {
# int CUT
# boolean selected
# NinePatch bg
# void layout()
# void select(boolean)
# void onClick()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed$LabeledTab {
- RenderedTextBlock btLabel
# void createChildren()
# void layout()
# void select(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed$IconTab {
# Image icon
- RectF defaultFrame
# void createChildren()
# void layout()
# void select(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Paralysis {
+ {static} float DURATION
+ boolean attachTo(Char)
+ void processDamage(int)
+ void detach()
+ int icon()
+ float iconFadePercent()
+ void fx(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Paralysis$ParalysisResist {
- int damage
- {static} String DAMAGE
+ boolean act()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose {
- boolean talkedTo
- boolean firstSummon
- GhostHero ghost
- int ghostID
- MeleeWeapon weapon
- Armor armor
+ int droppedPetals
+ {static} String AC_SUMMON
+ {static} String AC_DIRECT
+ {static} String AC_OUTFIT
- {static} String TALKEDTO
- {static} String FIRSTSUMMON
- {static} String GHOSTID
- {static} String PETALS
- {static} String WEAPON
- {static} String ARMOR
+ CellSelector.Listener ghostDirector
+ ArrayList<String> actions(Hero)
+ String defaultAction()
+ void execute(Hero,String)
+ int ghostStrength()
+ String desc()
+ int value()
+ String status()
# ArtifactBuff passiveBuff()
+ void charge(Hero,float)
+ Item upgrade()
+ Weapon ghostWeapon()
+ Armor ghostArmor()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose$roseRecharge {
+ boolean act()
}

class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose$Petal {
+ boolean doPickUp(Hero,int)
+ boolean isUpgradable()
+ boolean isIdentified()
}

class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose$GhostHero {
- DriedRose rose
+ void defendPos(int)
+ void followHero()
+ void targetChar(Char)
- void updateRose()
# boolean act()
+ int attackSkill(Char)
+ float attackDelay()
# boolean canAttack(Char)
+ int damageRoll()
+ int attackProc(Char,int)
+ int defenseProc(Char,int)
+ void damage(int,Object)
+ float speed()
+ int defenseSkill(Char)
+ float stealth()
+ int drRoll()
+ Armor armor()
+ boolean isImmune(Class)
+ boolean interact(Char)
+ void die(Object)
+ void destroy()
+ void sayAppeared()
+ void sayBoss()
+ void sayDefeated()
+ void sayHeroKilled()
+ void sayAnhk()
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose$GhostHero$NoRoseDamage {
}
class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose$WndGhostHero {
- {static} int BTN_SIZE
- {static} float GAP
- {static} float BTN_GAP
- {static} int WIDTH
- ItemButton btnWeapon
- ItemButton btnArmor
}

class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfTransfusion {
- boolean freeCharge
- {static} String FREECHARGE
+ int min(int)
+ int max(int)
+ void onZap(Ballistica)
- void damageHero(int)
+ void onHit(MagesStaff,Char,Char,int)
+ void fx(Ballistica,Callback)
+ void staffFx(MagesStaff.StaffParticle)
+ String statsDesc()
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.ScrollingListPane {
- ArrayList<Component> items
- {static} int ITEM_HEIGHT
+ void onClick(float,float)
+ void addItem(Image,String,String)
+ void addItem(ListItem)
+ void addTitle(String)
+ void clear()
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.ui.ScrollingListPane$ListItem {
# Image icon
# BitmapText iconLabel
# RenderedTextBlock label
# ColorBlock line
+ boolean onClick(float,float)
+ void hardlight(int)
+ void hardlightIcon(int)
# void createChildren()
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.ui.ScrollingListPane$ListTitle {
# RenderedTextBlock label
# ColorBlock line
# void createChildren()
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfMight {
+ void apply(Hero)
+ String desc()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfMight$Recipe {
}
class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfMight$HTBoost {
- int left
- {static} String LEFT
+ void reset()
+ int boost()
+ {static} int boost(int)
+ void onLevelUp()
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicalSight {
+ {static} float DURATION
+ {static} int DISTANCE
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ boolean attachTo(Char)
+ void detach()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.KingSprite {
}
class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfSirensSong {
# {static} boolean identifiedByUse
- CellSelector.Listener targeter
+ void doRead()
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfSirensSong$Enthralled {
+ void fx(boolean)
+ int icon()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.InfernalBrew {
+ void shatter(int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.InfernalBrew$Recipe {
}
class com.shatteredpixel.shatteredpixeldungeon.items.bombs.Flashbang {
+ void explode(int)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.CityLevel {
+ {static} String[] CITY_TRACK_LIST
+ {static} float[] CITY_TRACK_CHANCES
+ void playLevelMusic()
# int standardRooms(boolean)
# int specialRooms(boolean)
+ String tilesTex()
+ String waterTex()
# Painter painter()
# Class<?>[] trapClasses()
# float[] trapChances()
# void createMobs()
+ String tileName(int)
+ String tileDesc(int)
+ Group addVisuals()
+ {static} void addCityVisuals(Level,Group)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.CityLevel$Smoke {
- int pos
+ {static} Emitter.Factory factory
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.CityLevel$SmokeParticle {
+ void reset(float,float)
+ void update()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.PillarsEntranceRoom {
+ float[] sizeCatProbs()
+ boolean isEntrance()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.items.bombs.Noisemaker {
# Fuse createFuse()
+ boolean doPickUp(Hero,int)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.bombs.Noisemaker$NoisemakerFuse {
- boolean triggered
- int left
- {static} String LEFT
# boolean act()
# void trigger(Heap)
+ boolean freeze()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.UnstableBrew {
- {static} HashMap<Class<? extends Potion>,Float> potionChances
+ ArrayList<String> actions(Hero)
+ String defaultAction()
+ void apply(Hero)
+ void shatter(int)
+ boolean isKnown()
+ int value()
+ int energyVal()
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.UnstableBrew$Recipe {
+ boolean testIngredients(ArrayList<Item>)
+ int cost(ArrayList<Item>)
+ Item brew(ArrayList<Item>)
+ Item sampleOutput(ArrayList<Item>)
}

class com.shatteredpixel.shatteredpixeldungeon.items.spells.TelekineticGrab {
# void fx(Ballistica,Callback)
# void affectTarget(Ballistica,Hero)
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.items.spells.TelekineticGrab$Recipe {
- {static} int OUT_QUANTITY
}

class com.shatteredpixel.shatteredpixeldungeon.items.food.StewedMeat {
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.food.StewedMeat$oneMeat {
}
class com.shatteredpixel.shatteredpixeldungeon.items.food.StewedMeat$twoMeat {
}
class com.shatteredpixel.shatteredpixeldungeon.items.food.StewedMeat$threeMeat {
}
class com.shatteredpixel.shatteredpixeldungeon.effects.particles.WoolParticle {
+ {static} Emitter.Factory FACTORY
+ void reset(float,float)
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.AmuletScene {
- {static} int WIDTH
- {static} int BTN_HEIGHT
- {static} float SMALL_GAP
- {static} float LARGE_GAP
+ {static} boolean noText
- Image amulet
~ StyledButton btnExit
~ StyledButton btnStay
- float timer
+ void create()
# void onBackPressed()
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndSupportPrompt {
# {static} int WIDTH_P
# {static} int WIDTH_L
+ void hide()
}


class com.shatteredpixel.shatteredpixeldungeon.ui.Button {
+ {static} float longClick
# PointerArea hotArea
# Tooltip hoverTip
# {static} Button pressedButton
# float pressTime
# boolean clickReady
- Signal.Listener<KeyEvent> keyListener
# void createChildren()
+ GameAction keyAction()
+ GameAction secondaryTooltipAction()
+ void update()
# void onPointerDown()
# void onPointerUp()
# void onClick()
# void onRightClick()
# void onMiddleClick()
# boolean onLongClick()
# String hoverText()
- void alignTooltip(Tooltip)
+ void killTooltip()
# void layout()
+ void destroy()
+ void givePointerPriority()
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfMysticalEnergy {
+ void doRead()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.FlashingTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.items.food.MeatPie {
# void satisfy(Hero)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.food.MeatPie$Recipe {
+ boolean testIngredients(ArrayList<Item>)
+ int cost(ArrayList<Item>)
+ Item brew(ArrayList<Item>)
+ Item sampleOutput(ArrayList<Item>)
}

class com.shatteredpixel.shatteredpixeldungeon.GamesInProgress {
+ {static} int MAX_SLOTS
- {static} HashMap<Integer,Info> slotStates
+ {static} int curSlot
+ {static} HeroClass selectedClass
- {static} String GAME_FOLDER
- {static} String GAME_FILE
- {static} String DEPTH_FILE
- {static} String DEPTH_BRANCH_FILE
+ {static} Comparator<GamesInProgress.Info> scoreComparator
+ {static} boolean gameExists(int)
+ {static} String gameFolder(int)
+ {static} String gameFile(int)
+ {static} String depthFile(int,int,int)
+ {static} int firstEmpty()
+ {static} ArrayList<Info> checkAll()
+ {static} Info check(int)
+ {static} void set(int)
+ {static} void setUnknown(int)
+ {static} void delete(int)
}


class com.shatteredpixel.shatteredpixeldungeon.GamesInProgress$Info {
+ int slot
+ int depth
+ int version
+ int challenges
+ long seed
+ String customSeed
+ boolean daily
+ boolean dailyReplay
+ int level
+ int str
+ int strBonus
+ int exp
+ int hp
+ int ht
+ int shld
+ HeroClass heroClass
+ HeroSubClass subClass
+ int armorTier
+ int goldCollected
+ int maxDepth
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Whip {
+ int max(int)
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.items.food.Berry {
# float eatingTime()
# void satisfy(Hero)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.food.Berry$SeedCounter {
}
class com.shatteredpixel.shatteredpixeldungeon.items.keys.CrystalKey {
}
abstract class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom {
- {static} ArrayList<Class<? extends SecretRoom>> ALL_SECRETS
+ {static} ArrayList<Class<? extends SecretRoom>> runSecrets
- {static} float[] baseRegionSecrets
- {static} int[] regionSecretsThisRun
- {static} String ROOMS
- {static} String REGIONS
+ {static} void initForRun()
+ {static} int secretsForFloor(int)
+ {static} SecretRoom createRoom()
+ {static} void restoreRoomsFromBundle(Bundle)
+ {static} void storeRoomsInBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MineSecretRoom {
+ int maxWidth()
+ int maxHeight()
+ void paint(Level)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap {
+ {static} int RED
+ {static} int ORANGE
+ {static} int YELLOW
+ {static} int GREEN
+ {static} int TEAL
+ {static} int VIOLET
+ {static} int WHITE
+ {static} int GREY
+ {static} int BLACK
+ {static} int DOTS
+ {static} int WAVES
+ {static} int GRILL
+ {static} int STARS
+ {static} int DIAMOND
+ {static} int CROSSHAIR
+ {static} int LARGE_DOT
+ int color
+ int shape
+ int pos
+ boolean visible
+ boolean active
+ boolean disarmedByActivation
+ boolean canBeHidden
+ boolean canBeSearched
+ boolean avoidsHallways
- {static} String POS
- {static} String VISIBLE
- {static} String ACTIVE
+ Trap set(int)
+ Trap reveal()
+ Trap hide()
+ void trigger()
+ {abstract}void activate()
+ void disarm()
# int scalingDepth()
+ String name()
+ String desc()
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfStrength {
+ void apply(Hero)
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Regeneration {
- {static} float REGENERATION_DELAY
+ boolean act()
+ int regencap()
+ {static} boolean regenOn()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoSubclass {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Slow {
+ {static} float DURATION
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.Patch {
+ {static} boolean[] generate(int,int,float,int,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Swarm {
- {static} float SPLIT_DELAY
~ int generation
- {static} String GENERATION
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int damageRoll()
+ int defenseProc(Char,int)
+ int attackSkill(Char)
- Swarm split()
+ float lootChance()
+ Item createLoot()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.Enchanting {
- {static} float FADE_IN_TIME
- {static} float STATIC_TIME
- {static} float FADE_OUT_TIME
- {static} float ALPHA
- int color
- Char target
- Phase phase
- float duration
- float passed
+ void update()
+ {static} void show(Char,Item)
}


enum com.shatteredpixel.shatteredpixeldungeon.effects.Phase {
+  FADE_IN
+  STATIC
+  FADE_OUT
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Skeleton {
+ int damageRoll()
+ void die(Object)
+ float lootChance()
+ Item createLoot()
+ int attackSkill(Char)
+ int drRoll()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Alchemy {
# int pos
# void evolve()
+ void use(BlobEmitter)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.particles.EarthParticle {
+ {static} Emitter.Factory FACTORY
+ {static} Emitter.Factory SMALL
+ {static} Emitter.Factory FALLING
+ void reset(float,float)
+ void resetSmall(float,float)
+ void resetFalling(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.MagicalFireRoom {
+ int minWidth()
+ int minHeight()
+ void paint(Level)
- {static} Item prize(Level)
+ boolean canPlaceGrass(Point)
+ boolean canPlaceCharacter(Point,Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.MagicalFireRoom$EternalFire {
# void evolve()
+ void seed(Level,int,int)
+ void clear(int)
+ void fullyClear()
+ void use(BlobEmitter)
+ String tileDesc()
+ void onBuildFlagMaps(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Sleep {
+ {static} float SWS
+ void fx(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Haste {
+ {static} float DURATION
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfCorrosiveGas {
+ void shatter(int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Blocking {
- {static} ItemSprite.Glowing BLUE
+ int proc(Weapon,Char,Char,int)
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Blocking$BlockBuff {
+ boolean act()
+ void setShield(int)
+ void fx(boolean)
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
}

abstract class com.shatteredpixel.shatteredpixeldungeon.levels.RegularLevel {
# ArrayList<Room> rooms
# Builder builder
# Room roomEntrance
# Room roomExit
- {static} HashMap<Document,Dungeon.LimitedDrops> limitedDocs
# boolean build()
# ArrayList<Room> initRooms()
# int standardRooms(boolean)
# int specialRooms(boolean)
# Builder builder()
# {abstract}Painter painter()
# int nTraps()
# Class<?>[] trapClasses()
# float[] trapChances()
+ int mobLimit()
# void createMobs()
+ int randomRespawnCell(Char)
+ int randomDestination(Char)
# void createItems()
+ ArrayList<Room> rooms()
# Room randomRoom(Class<? extends Room>)
+ Room room(int)
# int randomDropCell()
# int randomDropCell(Class<? extends Room>)
+ int fallCell(boolean)
+ boolean isLevelExplored(int)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.PrisonLevel {
+ {static} String[] PRISON_TRACK_LIST
+ {static} float[] PRISON_TRACK_CHANCES
- Boolean wandmakerQuestWasActive
+ void playLevelMusic()
# ArrayList<Room> initRooms()
# void createMobs()
# int standardRooms(boolean)
# int specialRooms(boolean)
# Painter painter()
+ String tilesTex()
+ String waterTex()
# Class<?>[] trapClasses()
# float[] trapChances()
+ void occupyCell(Char)
+ void updateWandmakerQuestMusic()
+ String tileName(int)
+ String tileDesc(int)
+ Group addVisuals()
+ {static} void addPrisonVisuals(Level,Group)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.PrisonLevel$Torch {
- int pos
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndOptionsCondensed {
# void layoutBody(float,String,String)
# boolean hasInfo(int)
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoBuff {
- {static} float GAP
- {static} int WIDTH
}

class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.RatSkull {
# int upgradeEnergyCost()
+ String desc()
+ {static} float exoticChanceMultiplier()
+ {static} float exoticChanceMultiplier(int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Kinetic {
- {static} ItemSprite.Glowing YELLOW
+ int proc(Weapon,Char,Char,int)
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Kinetic$KineticTracker {
+ int conservedDamage
+ boolean act()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Kinetic$ConservedDamage {
- float preservedDamage
- {static} String PRESERVED_DAMAGE
+ int icon()
+ void tintIcon(Image)
+ String iconTextDisplay()
+ void setBonus(int)
+ int damageBonus()
+ boolean act()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


abstract class com.shatteredpixel.shatteredpixeldungeon.items.EquipableItem {
+ {static} String AC_EQUIP
+ {static} String AC_UNEQUIP
# {static} int slotOfUnequipped
+ ArrayList<String> actions(Hero)
+ boolean doPickUp(Hero,int)
+ void execute(Hero,String)
+ void doDrop(Hero)
+ void cast(Hero,int)
+ {static} void equipCursed(Hero)
# float timeToEquip(Hero)
+ {abstract}boolean doEquip(Hero)
+ boolean doUnequip(Hero,boolean,boolean)
+ boolean doUnequip(Hero,boolean)
+ void activate(Char)
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Stone {
- {static} ItemSprite.Glowing GREY
- boolean testing
+ int proc(Armor,Char,Char,int)
+ boolean testingEvasion()
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.ExitRoom {
- {static} ArrayList<Class<? extends StandardRoom>> rooms
- {static} float[][] chances
+ int minWidth()
+ int minHeight()
+ boolean isExit()
+ void paint(Level)
+ boolean canPlaceCharacter(Point,Level)
+ {static} StandardRoom createExit()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GoldenMimic {
+ String name()
+ String description()
+ void stopHiding()
+ void setLevel(int)
# void generatePrize(boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.GolemSprite {
- Emitter teleParticles
- boolean died
+ void link(Char)
+ void update()
+ void kill()
+ void teleParticles(boolean)
+ void play(Animation,boolean)
+ int blood()
+ void zap(int)
+ void onComplete(Animation)
}


abstract class com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite {
~ boolean wasVisible
+ void updateIdle()
+ void link(Char)
+ void update()
+ void die()
+ void turnTo(int,int)
# {abstract}int texOffset()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite$Blue {
# int texOffset()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite$Green {
# int texOffset()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite$Red {
# int texOffset()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.WaterOfHealth {
# boolean affectHero(Hero)
# Item affectItem(Item,int)
# Landmark record()
+ void use(BlobEmitter)
+ String tileDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.SuccubusSprite {
+ void die()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Poison {
# float left
- {static} String LEFT
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void set(float)
+ void extend(float)
+ int icon()
+ void tintIcon(Image)
+ String iconTextDisplay()
+ String desc()
+ boolean attachTo(Char)
+ boolean act()
+ void onDeath()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.NewsScene {
~ boolean displayingNoArticles
- {static} int BTN_HEIGHT
- {static} int BTN_WIDTH
+ void create()
# void onBackPressed()
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.NewsScene$NewsInfo {
~ NinePatch bg
~ RenderedTextBlock text
~ RedButton button
# void createChildren()
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.NewsScene$ArticleButton {
~ NewsArticle article
~ BitmapText date
# void layout()
# void onClick()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.NewsScene$WndArticle {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Senior {
+ void move(int,boolean)
+ int damageRoll()
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Swiftthistle {
+ void activate(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Swiftthistle$Seed {
}
class com.shatteredpixel.shatteredpixeldungeon.plants.Swiftthistle$TimeBubble {
- float left
~ ArrayList<Integer> presses
- {static} String PRESSES
- {static} String LEFT
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ void reset()
+ String desc()
+ void processTime(float)
+ void setDelayedPress(int)
+ void triggerPresses()
+ void disarmPresses()
+ void detach()
+ void fx(boolean)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene {
+ {static} float MIN_WIDTH_P
+ {static} float MIN_HEIGHT_P
+ {static} float MIN_WIDTH_L
+ {static} float MIN_HEIGHT_L
+ {static} float MIN_WIDTH_FULL
+ {static} float MIN_HEIGHT_FULL
+ {static} int defaultZoom
+ {static} int maxDefaultZoom
+ {static} int maxScreenZoom
+ {static} float minZoom
+ {static} float maxZoom
+ {static} Camera uiCamera
+ {static} BitmapText.Font pixelFont
# boolean inGameScene
- Signal.Listener<KeyEvent> fullscreenListener
- Image cursor
- {static} ArrayList<Class<? extends Window>> savedWindows
- {static} Class<? extends PixelScene> savedClass
+ {static} boolean noFade
+ void create()
+ void update()
+ void draw()
+ void saveWindows()
+ void restoreWindows()
+ void destroy()
+ {static} boolean landscape()
+ {static} RenderedTextBlock renderTextBlock(int)
+ {static} RenderedTextBlock renderTextBlock(String,int)
+ {static} float align(float)
+ {static} float align(Camera,float)
+ {static} void align(Visual)
+ {static} void align(Component)
# void fadeIn()
# void fadeIn(int,boolean)
+ {static} void showBadge(Badges.Badge)
+ {static} void shake(float,float)
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene$Fader {
- {static} float FADE_TIME
- boolean light
- float time
- {static} Fader INSTANCE
+ void update()
+ void draw()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene$PixelCamera {
# void updateMatrix()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.SnakeSprite {
}
abstract class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy {
# int color
+ int icon()
+ void tintIcon(Image)
+ void fx(boolean)
+ void onAttackProc(Char)
+ boolean canAttackWithExtraReach(Char)
+ float meleeDamageFactor()
+ float damageTakenFactor()
+ float evasionAndAccuracyFactor()
+ {static} void rollForChampion(Mob)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$Blazing {
+ void onAttackProc(Char)
+ void detach()
+ float meleeDamageFactor()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$Projecting {
+ float meleeDamageFactor()
+ boolean canAttackWithExtraReach(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$AntiMagic {
+ float damageTakenFactor()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$Giant {
+ float damageTakenFactor()
+ boolean canAttackWithExtraReach(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$Blessed {
+ float evasionAndAccuracyFactor()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$Growing {
- float multiplier
- {static} String MULTIPLIER
+ boolean act()
+ float meleeDamageFactor()
+ float damageTakenFactor()
+ float evasionAndAccuracyFactor()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.WellFed {
~ int left
- {static} String LEFT
+ boolean act()
+ void reset()
+ int icon()
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretGardenRoom {
+ void paint(Level)
- int plantPos(Level)
# int xyToPatchCoords(int,int)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.LibraryRoom {
+ void paint(Level)
- {static} Item prize(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.effects.Effects {
+ {static} Image get(Type)
}

enum com.shatteredpixel.shatteredpixeldungeon.effects.Type {
+  RIPPLE
+  LIGHTNING
+  WOUND
+  EXCLAMATION
+  CHAIN
+  ETHEREAL_CHAIN
+  DEATH_RAY
+  LIGHT_RAY
+  HEALTH_RAY
}

class com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfBlast {
# void activate(int)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.StormTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.tiles.WallBlockingTilemap {
+ {static} int SIZE
- {static} int CLEARED
- {static} int BLOCK_NONE
- {static} int BLOCK_RIGHT
- {static} int BLOCK_LEFT
- {static} int BLOCK_ALL
- {static} int BLOCK_BELOW
- int curr
+ void updateMap()
+ void updateMapCell(int)
- boolean fogHidden(int)
- boolean wall(int)
- boolean shelf(int)
- boolean door(int)
+ void updateArea(int,int)
+ void updateArea(int,int,int,int)
}


abstract class com.shatteredpixel.shatteredpixeldungeon.items.spells.InventorySpell {
# Class<? extends Bag> preferredBag
# WndBag.ItemSelector itemSelector
# void onCast(Hero)
- String inventoryTitle()
# boolean usableOnItem(Item)
# {abstract}void onItemSelected(Item)
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.RogueArmor {
}
class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfFireblast {
~ ConeAOE cone
+ int min(int)
+ int max(int)
+ void onZap(Ballistica)
+ void onHit(MagesStaff,Char,Char,int)
+ void fx(Ballistica,Callback)
# int chargesPerCast()
+ String statsDesc()
+ void staffFx(MagesStaff.StaffParticle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfFireblast$FireBlastOnHit {
# float procChanceMultiplier(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Dagger {
+ int max(int)
+ int damageRoll(Char)
+ String targetingPrompt()
+ boolean useTargeting()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
+ {static} void sneakAbility(Hero,Integer,int,int,MeleeWeapon)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll {
+ {static} String AC_READ
# {static} float TIME_TO_READ
- {static} LinkedHashMap<String,Integer> runes
# {static} ItemStatusHandler<Scroll> handler
# String rune
# float talentFactor
# float talentChance
# boolean anonymous
+ {static} void initLabels()
+ {static} void save(Bundle)
+ {static} void saveSelectively(Bundle,ArrayList<Item>)
+ {static} void restore(Bundle)
+ void anonymize()
+ void reset()
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ {abstract}void doRead()
# void readAnimation()
+ boolean isKnown()
+ void setKnown()
+ Item identify(boolean)
+ String name()
+ String info()
+ boolean isUpgradable()
+ boolean isIdentified()
+ {static} HashSet<Class<? extends Scroll>> getKnown()
+ {static} HashSet<Class<? extends Scroll>> getUnknown()
+ {static} boolean allKnown()
+ int value()
+ int energyVal()
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll$PlaceHolder {
+ boolean isSimilar(Item)
+ void doRead()
+ String info()
}

class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll$ScrollToStone {
- {static} HashMap<Class<? extends Scroll>,Class<? extends Runestone>> stones
+ boolean testIngredients(ArrayList<Item>)
+ int cost(ArrayList<Item>)
+ Item brew(ArrayList<Item>)
+ Item sampleOutput(ArrayList<Item>)
}


class com.shatteredpixel.shatteredpixeldungeon.items.special.BrokenSeal {
+ {static} String AC_AFFIX
+ {static} String AC_INFO
- Armor.Glyph glyph
# {static} WndBag.ItemSelector armorSelector
- {static} String GLYPH
+ boolean canTransferGlyph()
+ Armor.Glyph getGlyph()
+ void setGlyph(Armor.Glyph)
+ int maxShield(int,int)
+ ItemSprite.Glowing glowing()
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ boolean isUpgradable()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.special.BrokenSeal$WarriorShield {
- Armor armor
- float partialShield
+ boolean act()
+ void supercharge(int)
+ void setArmor(Armor)
+ int maxShield()
+ int absorbDamage(int)
}


abstract class com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone {
# void onThrow(int)
# {abstract}void activate(int)
+ boolean isUpgradable()
+ boolean isIdentified()
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone$PlaceHolder {
# void activate(int)
+ boolean isSimilar(Item)
+ String info()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.WaterBridgeRoom {
# int maxBridgeWidth(int)
# int spaceTile()
+ boolean canPlaceWater(Point)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.GardenRoom {
+ void paint(Level)
- int plantPos(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.ui.BossHealthBar {
- Image bar
- Image rawShielding
- Image shieldedHP
- Image hp
- BitmapText hpText
- Button bossInfo
- BuffIndicator buffs
- {static} Mob boss
- Image skull
- Emitter blood
- {static} String asset
- {static} BossHealthBar instance
- {static} boolean bleeding
+ void destroy()
# void createChildren()
# void layout()
+ void update()
+ {static} void assignBoss(Mob)
+ {static} boolean isAssigned()
+ {static} void bleed(boolean)
+ {static} boolean isBleeding()
}


class com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_9_X_Changes {
+ {static} void addAllChanges(ArrayList<ChangeInfo>)
+ {static} void add_v0_9_2_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_9_1_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_9_0_Changes(ArrayList<ChangeInfo>)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AnkhInvulnerability {
+ {static} float DURATION
+ void fx(boolean)
+ int icon()
+ float iconFadePercent()
+ boolean attachTo(Char)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.PitRoom {
+ int minWidth()
+ int minHeight()
+ int maxWidth()
+ int maxHeight()
+ void paint(Level)
- {static} Item prize(Level)
+ boolean canPlaceTrap(Point)
+ boolean canPlaceGrass(Point)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MineSmallRoom {
+ int minWidth()
+ int minHeight()
+ float[] sizeCatProbs()
# float fill()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfDeepSleep {
# void activate(int)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.WaterOfAwareness {
# boolean affectHero(Hero)
# Item affectItem(Item,int)
# Landmark record()
+ void use(BlobEmitter)
+ String tileDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StatuesRoom {
+ int minWidth()
+ int minHeight()
+ float[] sizeCatProbs()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.effects.CheckedCell {
- float alpha
- float delay
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonWallsTilemap {
+ {static} HashSet<Integer> skipCells
# int getTileVisual(int,int,boolean)
+ boolean overlapsPoint(float,float)
+ boolean overlapsScreenPoint(int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.ArmoryRoom {
- {static} float[] prizeCats
+ void paint(Level)
- {static} Item prize(Level)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.BlobImmunity {
+ {static} float DURATION
+ int icon()
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.IconTitle {
- {static} float FONT_SIZE
- {static} float GAP
# Image imIcon
# RenderedTextBlock tfLabel
# HealthBar health
- float healthLvl
# void createChildren()
# void layout()
+ void icon(Image)
+ void label(String)
+ void label(String,int)
+ void color(int)
+ void health(float)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Light {
+ {static} float DURATION
+ {static} int DISTANCE
+ boolean attachTo(Char)
+ void detach()
+ void weaken(int)
+ int icon()
+ float iconFadePercent()
+ void fx(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrapMechanism {
- ArrayList<Boolean> levelFeels
- int shuffles
- {static} String FEELS
- {static} String SHUFFLES
# int upgradeEnergyCost()
+ String desc()
+ {static} float overrideNormalLevelChance()
+ {static} float overrideNormalLevelChance(int)
+ {static} Level.Feeling getNextFeeling()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.SoulMark {
+ {static} float DURATION
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ void fx(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndSadGhost {
- {static} int WIDTH
- {static} int BTN_SIZE
- {static} int BTN_GAP
- {static} int GAP
~ Ghost ghost
- void selectReward(Item)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndSadGhost$RewardWindow {
}
class com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator {
+ {static} int NONE
+ {static} int MIND_VISION
+ {static} int LEVITATION
+ {static} int FIRE
+ {static} int POISON
+ {static} int PARALYSIS
+ {static} int HUNGER
+ {static} int STARVATION
+ {static} int TIME
+ {static} int OOZE
+ {static} int AMOK
+ {static} int TERROR
+ {static} int ROOTS
+ {static} int INVISIBLE
+ {static} int SHADOWS
+ {static} int WEAKNESS
+ {static} int FROST
+ {static} int BLINDNESS
+ {static} int COMBO
+ {static} int FURY
+ {static} int HERB_HEALING
+ {static} int ARMOR
+ {static} int HEART
+ {static} int LIGHT
+ {static} int CRIPPLE
+ {static} int BARKSKIN
+ {static} int IMMUNITY
+ {static} int BLEEDING
+ {static} int MARK
+ {static} int DEFERRED
+ {static} int DROWSY
+ {static} int MAGIC_SLEEP
+ {static} int THORNS
+ {static} int FORESIGHT
+ {static} int VERTIGO
+ {static} int RECHARGING
+ {static} int LOCKED_FLOOR
+ {static} int CORRUPT
+ {static} int BLESS
+ {static} int RAGE
+ {static} int SACRIFICE
+ {static} int BERSERK
+ {static} int HASTE
+ {static} int PREPARATION
+ {static} int WELL_FED
+ {static} int HEALING
+ {static} int WEAPON
+ {static} int VULNERABLE
+ {static} int HEX
+ {static} int DEGRADE
+ {static} int PINCUSHION
+ {static} int UPGRADE
+ {static} int MOMENTUM
+ {static} int ANKH
+ {static} int NOINV
+ {static} int TARGETED
+ {static} int IMBUE
+ {static} int ENDURE
+ {static} int INVERT_MARK
+ {static} int NATURE_POWER
+ {static} int AMULET
+ {static} int DUEL_CLEAVE
+ {static} int DUEL_GUARD
+ {static} int DUEL_SPIN
+ {static} int DUEL_EVASIVE
+ {static} int DUEL_DANCE
+ {static} int DUEL_BRAWL
+ {static} int DUEL_XBOW
+ {static} int CHALLENGE
+ {static} int MONK_ENERGY
+ {static} int DUEL_COMBO
+ {static} int DAZE
+ {static} int SIZE_SMALL
+ {static} int SIZE_LARGE
- {static} BuffIndicator heroInstance
- {static} BuffIndicator bossInstance
- LinkedHashMap<Buff,BuffButton> buffButtons
- boolean needsRefresh
- Char ch
- boolean large
- boolean buffsHidden
+ void destroy()
+ void update()
# void layout()
+ boolean allBuffsVisible()
+ {static} void refreshHero()
+ {static} void refreshBoss()
+ {static} void setBossInstance(BuffIndicator)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator$BuffButton {
- Buff buff
- boolean large
+ Image grey
+ BitmapText text
# void createChildren()
+ void updateIcon()
# void layout()
# void onClick()
# void onPointerDown()
# void onPointerUp()
# String hoverText()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.SnipersMark {
+ int object
+ int level
- {static} String OBJECT
- {static} String LEVEL
+ {static} float DURATION
+ void set(int,int)
+ boolean attachTo(Char)
+ void detach()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int icon()
+ float iconFadePercent()
+ String desc()
+ String actionName()
+ int actionIcon()
+ int indicatorColor()
+ void doAction()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.RoundShield {
+ int max(int)
+ int defenseFactor(Char)
+ String statsInfo()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
+ {static} void guardAbility(Hero,int,MeleeWeapon)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.RoundShield$GuardTracker {
+ boolean hasBlocked
- {static} String BLOCKED
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Acidic {
+ int attackProc(Char,int)
+ int defenseProc(Char,int)
+ Item createLoot()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.LifeLink {
+ int object
- {static} String OBJECT
+ void detach()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int icon()
+ void tintIcon(Image)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.GooWarn {
# int pos
# void evolve()
+ void seed(Level,int,int)
+ void use(BlobEmitter)
+ String tileDesc()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.particles.CorrosionParticle {
+ {static} Emitter.Factory MISSILE
+ {static} Emitter.Factory SPLASH
+ void resetMissile(float,float)
+ void resetSplash(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.HallwayEntranceRoom {
+ boolean isEntrance()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.YogSprite {
+ void link(Char)
+ void die()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.WandEmpower {
+ int dmgBoost
+ int left
- {static} String BOOST
- {static} String LEFT
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void set(int,int)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM300 {
+ int pylonsActivated
+ boolean supercharged
+ boolean chargeAnnounced
- int MIN_COOLDOWN
- int MAX_COOLDOWN
- int turnsSinceLastAbility
- int abilityCooldown
- int lastAbility
- {static} int NONE
- {static} int GAS
- {static} int ROCKS
- {static} String PYLONS_ACTIVATED
- {static} String SUPERCHARGED
- {static} String CHARGE_ANNOUNCED
- {static} String TURNS_SINCE_LAST_ABILITY
- {static} String ABILITY_COOLDOWN
- {static} String LAST_ABILITY
- boolean invulnWarned
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
# boolean act()
+ boolean attack(Char,float,float,float)
# Char chooseEnemy()
+ void move(int,boolean)
+ float speed()
+ void notice()
+ void onZapComplete()
+ void ventGas(Char)
+ void onSlamComplete()
+ void dropRocks(Char)
+ void damage(int,Object)
+ int totalPylonsToActivate()
+ boolean isInvulnerable(Class)
+ void supercharge()
+ boolean isSupercharged()
+ void loseSupercharge()
+ boolean isAlive()
+ void die(Object)
# boolean getCloser(int)
+ String description()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM300$FallingRockBuff {
+ void affectChar(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.HoldFast {
+ int pos
- {static} String POS
+ boolean act()
+ int armorBonus()
+ int icon()
+ void tintIcon(Image)
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v2_X_Changes {
+ {static} void addAllChanges(ArrayList<ChangeInfo>)
+ {static} void add_Coming_Soon(ArrayList<ChangeInfo>)
+ {static} void add_v2_4_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v2_3_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v2_2_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v2_1_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v2_0_Changes(ArrayList<ChangeInfo>)
}

class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CapeOfThorns {
# ArtifactBuff passiveBuff()
+ void charge(Hero,float)
+ String desc()
}

class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CapeOfThorns$Thorns {
+ boolean act()
+ int proc(int,Char,Char)
+ String desc()
+ int icon()
+ void detach()
}

class com.shatteredpixel.shatteredpixeldungeon.effects.particles.EnergyParticle {
+ {static} Emitter.Factory FACTORY
+ void reset(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion {
+ {static} String AC_DRINK
+ {static} String AC_CHOOSE
- {static} float TIME_TO_DRINK
- {static} LinkedHashMap<String,Integer> colors
# {static} HashSet<Class<? extends Potion>> mustThrowPots
# {static} HashSet<Class<? extends Potion>> canThrowPots
# {static} ItemStatusHandler<Potion> handler
# String color
# float talentFactor
# float talentChance
# boolean anonymous
+ {static} void initColors()
+ {static} void save(Bundle)
+ {static} void saveSelectively(Bundle,ArrayList<Item>)
+ {static} void restore(Bundle)
+ void anonymize()
+ void reset()
+ String defaultAction()
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ void doThrow(Hero)
# void drink(Hero)
# void onThrow(int)
+ void apply(Hero)
+ void shatter(int)
+ void cast(Hero,int)
+ boolean isKnown()
+ void setKnown()
+ Item identify(boolean)
+ String name()
+ String info()
+ boolean isIdentified()
+ boolean isUpgradable()
+ {static} HashSet<Class<? extends Potion>> getKnown()
+ {static} HashSet<Class<? extends Potion>> getUnknown()
+ {static} boolean allKnown()
# int splashColor()
# void splash(int)
+ int value()
+ int energyVal()
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion$PlaceHolder {
+ boolean isSimilar(Item)
+ String info()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion$SeedToPotion {
+ {static} HashMap<Class<? extends Plant.Seed>,Class<? extends Potion>> types
+ boolean testIngredients(ArrayList<Item>)
+ int cost(ArrayList<Item>)
+ Item brew(ArrayList<Item>)
+ Item sampleOutput(ArrayList<Item>)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.StatusPane {
- NinePatch bg
- Image avatar
- Button heroInfo
+ {static} float talentBlink
- float warning
+ {static} float FLASH_RATE
- int lastTier
- Image rawShielding
- Image shieldedHP
- Image hp
- BitmapText hpText
- Button heroInfoOnBar
- Image exp
- BitmapText expText
- int lastLvl
- BitmapText level
- BuffIndicator buffs
- Compass compass
- BusyIndicator busy
- CircleArc counter
- {static} String asset
- boolean large
- {static} int[] warningColors
- int oldHP
- int oldShield
- int oldMax
# void layout()
+ void update()
+ void alpha(float)
+ void showStarParticles()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.CellSelector {
+ Listener listener
+ boolean enabled
- float dragThreshold
- float mouseZoom
- boolean pinching
- PointerEvent another
- float startZoom
- float startSpan
- boolean dragging
- PointF lastPos
- GameAction heldAction1
- GameAction heldAction2
- GameAction heldAction3
- float heldDelay
- boolean delayingForRelease
- Signal.Listener<KeyEvent> keyListener
- GameAction leftStickAction
- int lastCellMoved
# void onScroll(ScrollEvent)
# void onClick(PointerEvent)
- float zoom(float)
+ void select(int,int)
# void onPointerDown(PointerEvent)
# void onPointerUp(PointerEvent)
# void onDrag(PointerEvent)
- {static} float initialDelay()
+ void update()
- boolean moveFromActions(GameAction)
- Point directionFromAction(GameAction)
- GameAction actionFromStick(float,float)
+ void processKeyHold()
+ void resetKeyHold()
+ void cancel()
+ void reset()
+ void enable(boolean)
+ void destroy()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.scenes.CellSelector$Listener {
+ {abstract}void onSelect(Integer)
+ void onRightClick(Integer)
+ {abstract}String prompt()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Flail {
- {static} int spinBoost
+ int max(int)
+ int damageRoll(Char)
+ float accuracyFactor(Char,Char)
# int baseChargeUse(Hero,Char)
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Flail$SpinAbilityTracker {
+ int spins
+ {static} String SPINS
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.ThrowingClub {
+ int max(int)
}

class com.shatteredpixel.shatteredpixeldungeon.effects.BannerSprites {
+ {static} Image get(Type)
}

enum com.shatteredpixel.shatteredpixeldungeon.effects.Type {
+  PIXEL_DUNGEON
+  BOSS_SLAIN
+  GAME_OVER
+  SELECT_YOUR_HERO
+  PIXEL_DUNGEON_SIGNS
}

class com.shatteredpixel.shatteredpixeldungeon.effects.Wound {
- {static} float TIME_TO_FADE
- float time
+ void reset(int)
+ void reset(Visual)
+ void update()
+ {static} void hit(Char)
+ {static} void hit(Char,float)
+ {static} void hit(int)
+ {static} void hit(int,float)
}


class com.shatteredpixel.shatteredpixeldungeon.items.spells.Alchemize {
- {static} WndBag parentWnd
- {static} WndBag.ItemSelector itemSelector
# void onCast(Hero)
+ int value()
+ int energyVal()
}


class com.shatteredpixel.shatteredpixeldungeon.items.spells.Alchemize$Recipe {
- {static} int OUT_QUANTITY
+ boolean testIngredients(ArrayList<Item>)
+ int cost(ArrayList<Item>)
+ Item brew(ArrayList<Item>)
+ Item sampleOutput(ArrayList<Item>)
}


class com.shatteredpixel.shatteredpixeldungeon.items.spells.Alchemize$WndAlchemizeItem {
- {static} float GAP
- {static} int BTN_HEIGHT
- WndBag owner
- void consumeAlchemize()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.RingBridgeRoom {
+ void paint(Level)
+ boolean canMerge(Level,Room,Point,int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.spells.CurseInfusion {
# boolean usableOnItem(Item)
# void onItemSelected(Item)
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.items.spells.CurseInfusion$Recipe {
- {static} int OUT_QUANTITY
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.FungalCoreSprite {
~ boolean wasVisible
+ void update()
+ void die()
+ void turnTo(int,int)
+ int blood()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.items.journal.DocumentPage {
- String page
- {static} String PAGE
+ {abstract}Document document()
+ void page(String)
+ String page()
+ boolean doPickUp(Hero,int)
+ boolean isUpgradable()
+ boolean isIdentified()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.PoisonDart {
+ int proc(Char,Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.builders.LineBuilder {
+ ArrayList<Room> build(ArrayList<Room>)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.features.HighGrass {
- {static} boolean freezeTrample
+ {static} void trample(Level,int)
}


abstract class com.shatteredpixel.shatteredpixeldungeon.actors.Actor {
+ {static} float TICK
- float time
- int id
# {static} int VFX_PRIO
# {static} int HERO_PRIO
# {static} int BLOB_PRIO
# {static} int MOB_PRIO
# {static} int BUFF_PRIO
- {static} int DEFAULT
# int actPriority
- {static} String TIME
- {static} String ID
- {static} HashSet<Actor> all
- {static} HashSet<Char> chars
- {static} Actor current
- {static} SparseArray<Actor> ids
- {static} int nextID
- {static} float now
- {static} String NEXTID
+ {static} boolean keepActorThreadAlive
# {abstract}boolean act()
# void spendConstant(float)
# void spend(float)
+ void spendToWhole()
# void postpone(float)
+ float cooldown()
+ void clearTime()
+ void timeToNow()
# void diactivate()
# void onAdd()
# void onRemove()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int id()
+ {static} float now()
+ {static} void clear()
+ {static} void fixTime()
+ {static} void init()
+ {static} void storeNextID(Bundle)
+ {static} void restoreNextID(Bundle)
+ {static} void resetNextID()
+ void next()
+ {static} boolean processing()
+ {static} int curActorPriority()
+ {static} void process()
+ {static} void add(Actor)
+ {static} void addDelayed(Actor,float)
- {static} void add(Actor,float)
+ {static} void remove(Actor)
+ {static} void delayChar(Char,float)
+ {static} Char findChar(int)
+ {static} Actor findById(int)
+ {static} HashSet<Actor> all()
+ {static} HashSet<Char> chars()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndMonkAbilities {
- {static} int WIDTH_P
- {static} int WIDTH_L
- {static} int MARGIN
~ MonkEnergy.MonkAbility abilityBeingUsed
- CellSelector.Listener listener
}

abstract class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.PatchRoom {
# boolean[] patch
# {abstract}float fill()
# {abstract}int clustering()
# {abstract}boolean ensurePath()
# {abstract}boolean cleanEdges()
# void setupPatch(Level)
# void fillPatch(Level,int)
# void cleanDiagonalEdges()
# int xyToPatchCoords(int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ArtifactRecharge {
+ {static} float DURATION
- float left
+ boolean ignoreHornOfPlenty
- {static} String LEFT
- {static} String IGNORE_HORN
+ boolean act()
+ ArtifactRecharge set(float)
+ ArtifactRecharge prolong(float)
+ float left()
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ {static} void chargeArtifacts(Hero,float)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Sacrificial {
- {static} ItemSprite.Glowing BLACK
+ int proc(Weapon,Char,Char,int)
+ boolean curse()
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.PillarsExitRoom {
+ float[] sizeCatProbs()
+ boolean isExit()
+ void paint(Level)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC {
+ void beckon(int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.journal.GuidePage {
+ Document document()
+ String desc()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.BlizzardBrew {
+ void shatter(int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.BlizzardBrew$Recipe {
}
class com.shatteredpixel.shatteredpixeldungeon.windows.WndChallenges {
- {static} int WIDTH
- {static} int TTL_HEIGHT
- {static} int BTN_HEIGHT
- {static} int GAP
- boolean editable
- ArrayList<CheckBox> boxes
+ void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.services.news.News {
+ {static} NewsService service
- {static} Date lastCheck
- {static} long CHECK_DELAY
- {static} ArrayList<NewsArticle> articles
+ {static} boolean supportsNews()
+ {static} void checkForNews()
+ {static} boolean articlesAvailable()
+ {static} ArrayList<NewsArticle> articles()
+ {static} int unreadArticles(Date)
+ {static} void clearArticles()
+ {static} Image parseArticleIcon(NewsArticle)
+ {static} String parseArticleDate(NewsArticle)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.KeyDisplay {
- float[] vertices
- FloatBuffer quads
- Vertexbuffer buffer
- SmartTexture tx
- boolean dirty
- int[] keys
- {static} LinkedHashMap<Class<? extends Key>,Integer> keyMap
- int totalKeys
+ void updateKeys()
+ int keyCount()
+ void draw()
- void updateVertices()
+ void destroy()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.DiamondGooRoom {
+ void paint(Level)
+ boolean canPlaceWater(Point)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.WornShortsword {
# int baseChargeUse(Hero,Char)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CaveRoom {
+ float[] sizeCatProbs()
+ int minHeight()
+ int minWidth()
# float fill()
# int clustering()
# boolean ensurePath()
# boolean cleanEdges()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_1_X_Changes {
+ {static} void addAllChanges(ArrayList<ChangeInfo>)
+ {static} void add_v0_1_1_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_1_0_Changes(ArrayList<ChangeInfo>)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FireImbue {
+ {static} float DURATION
# float left
- {static} String LEFT
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void set(float)
+ boolean act()
+ void proc(Char)
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ boolean attachTo(Char)
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.MailArmor {
}
class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.PoolRoom {
- {static} int NPIRANHAS
+ int minWidth()
+ int minHeight()
+ void paint(Level)
- {static} Item prize(Level)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.MinefieldRoom {
+ float[] sizeCatProbs()
+ boolean canMerge(Level,Room,Point,int)
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.ThrowingHammer {
+ int max(int)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.WeakFloorRoom {
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.WeakFloorRoom$HiddenWell {
+ Tilemap create()
+ String name(int,int)
+ String desc(int,int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfToxicEssence {
+ void apply(Hero)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfToxicEssence$Recipe {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.ArmoredStatue {
# Armor armor
- {static} String ARMOR
+ void createWeapon(boolean)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int drRoll()
+ Armor armor()
+ boolean isImmune(Class)
+ int defenseProc(Char,int)
+ void damage(int,Object)
+ CharSprite sprite()
+ float speed()
+ float stealth()
+ int defenseSkill(Char)
+ void die(Object)
+ String description()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Barkskin {
- int level
- int interval
- {static} String LEVEL
- {static} String INTERVAL
+ boolean act()
+ int level()
+ void set(int,int)
+ int icon()
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ {static} int currentLevel(Char)
+ {static} void conditionallyAppend(Char,int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.particles.PitfallParticle {
+ {static} Emitter.Factory FACTORY4
+ {static} Emitter.Factory FACTORY8
+ void reset(float,float,int)
}


class com.shatteredpixel.shatteredpixeldungeon.Bones {
- {static} String BONES_FILE
- {static} String LEVEL
- {static} String BRANCH
- {static} String ITEM
- {static} String HERO_CLASS
- {static} int depth
- {static} int branch
- {static} Item item
- {static} HeroClass heroClass
+ {static} void leave()
- {static} Item pickItem(Hero)
+ {static} ArrayList<Item> get()
- {static} boolean lootAtCurLevel()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndImp {
- {static} int WIDTH
- {static} int BTN_HEIGHT
- {static} int GAP
- void takeReward(Imp,DwarfToken,Item)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.ImpShopkeeper {
- boolean seenBefore
# boolean act()
}


class com.shatteredpixel.shatteredpixeldungeon.tiles.FogOfWar {
- {static} int[][] FOG_COLORS
- {static} int VISIBLE
- {static} int VISITED
- {static} int MAPPED
- {static} int INVISIBLE
- int mapWidth
- int mapHeight
- int mapLength
- int pWidth
- int pHeight
- int width2
- int height2
- ArrayList<Rect> toUpdate
- ArrayList<Rect> updating
- {static} int PIX_PER_TILE
- boolean[] visible
- boolean[] visited
- boolean[] mapped
- int brightness
+ void updateFog()
+ void updateFog(Rect)
+ void updateFog(int,int)
+ void updateFogArea(int,int,int,int)
- void moveToUpdating()
- void updateTexture(boolean[],boolean[],boolean[])
- boolean wall(int)
- int getCellFog(int)
- void fillLeft(Pixmap,int,int,int)
- void fillRight(Pixmap,int,int,int)
- void fillCell(Pixmap,int,int,int)
# NoosaScript script()
+ void draw()
+ void destroy()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo {
- HeroInfoTab heroInfo
- TalentInfoTab talentInfo
- SubclassInfoTab subclassInfo
- ArmorAbilityInfoTab abilityInfo
- {static} int WIDTH
- {static} int MIN_HEIGHT
- {static} int MARGIN
+ void offset(int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo$HeroInfoTab {
- RenderedTextBlock title
- RenderedTextBlock[] info
- Image[] icons
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo$TalentInfoTab {
- RenderedTextBlock title
- RenderedTextBlock message
- TalentsPane talentPane
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo$SubclassInfoTab {
- RenderedTextBlock title
- RenderedTextBlock message
- RenderedTextBlock[] subClsDescs
- IconButton[] subClsInfos
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo$ArmorAbilityInfoTab {
- RenderedTextBlock title
- RenderedTextBlock message
- RenderedTextBlock[] abilityDescs
- IconButton[] abilityInfos
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.ui.tags.AttackIndicator {
- {static} float ENABLED
- {static} float DISABLED
- {static} float delay
- {static} AttackIndicator instance
- CharSprite sprite
- Mob lastTarget
- ArrayList<Mob> candidates
- boolean enabled
+ GameAction keyAction()
# void createChildren()
# void layout()
+ void update()
- void checkEnemies()
- void updateImage()
- void enable(boolean)
- void visible(boolean)
# void onClick()
# String hoverText()
+ {static} void target(Char)
+ {static} void updateState()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RotHeart {
# boolean act()
+ void damage(int,Object)
+ int defenseProc(Char,int)
+ void beckon(int)
# boolean getCloser(int)
+ void destroy()
+ void die(Object)
+ boolean reset()
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.LotusSprite {
- ArrayList<Emitter> grassVfx
+ void link(Char)
+ void place(int)
+ void turnTo(int,int)
+ void update()
+ void die()
+ void kill()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.WarpBeacon {
+ String targetingPrompt()
+ int targetedPos(Char,int)
# void activate(ClassArmor,Hero,Integer)
+ int icon()
+ Talent[] talents()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.WarpBeacon$WarpBeaconTracker {
~ int pos
~ int depth
~ int branch
~ Emitter e
+ {static} String POS
+ {static} String DEPTH
+ {static} String BRANCH
+ void fx(boolean)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AdrenalineSurge {
+ {static} float DURATION
- int boost
- float interval
- {static} String BOOST
- {static} String INTERVAL
+ void reset(int,float)
+ int boost()
+ boolean act()
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AscensionChallenge {
- {static} HashMap<Class<? extends Mob>,Float> modifiers
- float stacks
- float damageInc
- boolean justAscended
+ {static} String STACKS
+ {static} String DAMAGE
+ {static} float statModifier(Char)
+ {static} void beckonEnemies()
+ {static} float enemySpeedModifier(Mob)
+ {static} float modifyHeroSpeed(float)
+ {static} void processEnemyKill(Char)
+ {static} int AscensionCorruptResist(Mob)
+ void onLevelSwitch()
+ void saySwitch()
+ boolean act()
+ int icon()
+ void tintIcon(Image)
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AscensionChallenge$AscensionBuffBlocker {
}
class com.shatteredpixel.shatteredpixeldungeon.effects.Ripple {
- {static} float TIME_TO_FADE
- float time
+ void reset(int)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.GnollTricksterSprite {
- Animation cast
+ void attack(int)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul {
- int timesDowned
# int partnerID
- {static} String PARTNER_ID
- {static} String TIMES_DOWNED
- boolean beingLifeLinked
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
+ float spawningWeight()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
# boolean act()
+ void die(Object)
+ boolean isAlive()
+ boolean isActive()
# void onRemove()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul$Sleeping {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul$Wandering {
# boolean continueWandering()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul$GhoulLifeLink {
- Ghoul ghoul
- int turnsToRevive
- {static} String GHOUL
- {static} String LEFT
+ boolean act()
+ void updateVisibility()
+ void set(int,Ghoul)
+ void fx(boolean)
+ void detach()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ {static} Ghoul searchForHost(Ghoul)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.QuickRecipe {
- ArrayList<Item> ingredients
- ArrayList<ItemSlot> inputs
- QuickRecipe.arrow arrow
- ItemSlot output
# void layout()
- void anonymize(Item)
+ {static} ArrayList<QuickRecipe> getRecipes(int)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.QuickRecipe$arrow {
~ BitmapText text
# void layout()
# void onPointerUp()
# void onClick()
+ void hardlightText(int)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.particles.LeafParticle {
+ {static} int color1
+ {static} int color2
+ {static} Emitter.Factory GENERAL
+ {static} Emitter.Factory LEVEL_SPECIFIC
+ void reset(float,float)
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfMagicMapping {
+ void doRead()
+ int value()
+ {static} void discover(int)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.DisarmingTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.BlazingTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.items.Item {
# {static} String TXT_TO_STRING_LVL
# {static} String TXT_TO_STRING_X
# {static} float TIME_TO_THROW
# {static} float TIME_TO_PICK_UP
# {static} float TIME_TO_DROP
+ {static} String AC_DROP
+ {static} String AC_THROW
# String defaultAction
+ boolean usesTargeting
+ int image
+ int icon
+ boolean stackable
# int quantity
+ boolean dropsDownHeap
- int level
+ boolean levelKnown
+ boolean cursed
+ boolean cursedKnown
+ boolean unique
+ boolean keptThoughLostInvent
+ boolean bones
+ {static} Comparator<Item> itemComparator
- {static} String QUANTITY
- {static} String LEVEL
- {static} String LEVEL_KNOWN
- {static} String CURSED
- {static} String CURSED_KNOWN
- {static} String QUICKSLOT
- {static} String KEPT_LOST
# {static} Hero curUser
# {static} Item curItem
# {static} CellSelector.Listener thrower
+ ArrayList<String> actions(Hero)
+ String actionName(String,Hero)
+ void setQuantity(int)
+ int getQuantity(int)
+ boolean doPickUp(Hero)
+ boolean doPickUp(Hero,int)
+ void doDrop(Hero)
+ void reset()
+ boolean keptThroughLostInventory()
+ void doThrow(Hero)
+ void execute(Hero,String)
+ String defaultAction()
+ void execute(Hero)
# void onThrow(int)
+ Item merge(Item)
+ boolean collect(Bag)
+ boolean collect()
+ Item split(int)
+ Item duplicate()
+ Item detach(Bag)
+ Item detachAll(Bag)
+ boolean isSimilar(Item)
# void onDetach()
+ int trueLevel()
+ int level()
+ int buffedLvl()
+ void level(int)
+ Item upgrade()
+ Item upgrade(int)
+ Item degrade()
+ Item degrade(int)
+ int visiblyUpgraded()
+ int buffedVisiblyUpgraded()
+ boolean visiblyCursed()
+ boolean isUpgradable()
+ boolean isIdentified()
+ boolean isEquipped(Hero)
+ Item identify()
+ Item identify(boolean)
+ void onHeroGainExp(float,Hero)
+ {static} void evoke(Hero)
+ String title()
+ String name()
+ String trueName()
+ int image()
+ ItemSprite.Glowing glowing()
+ Emitter emitter()
+ String info()
+ String desc()
+ int quantity()
+ Item quantity(int)
+ int value()
+ int energyVal()
+ Item virtual()
+ Item random()
+ String status()
+ {static} void updateQuickslot()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int targetingPos(Hero,int)
+ int throwPos(Hero,int)
+ void throwSound()
+ void cast(Hero,int)
+ float castDelay(Char,int)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon {
+ {static} String AC_ABILITY
+ int tier
- {static} boolean evaluatingTwinUpgrades
+ void activate(Char)
+ String defaultAction()
+ ArrayList<String> actions(Hero)
+ String actionName(String,Hero)
+ void execute(Hero,String)
+ String targetingPrompt()
+ boolean useTargeting()
+ int targetingPos(Hero,int)
# void duelistAbility(Hero,Integer)
# void beforeAbilityUsed(Hero,Char)
# void afterAbilityUsed(Hero)
+ {static} void onAbilityKill(Hero,Char)
# int baseChargeUse(Hero,Char)
+ float abilityChargeUse(Hero,Char)
+ int min(int)
+ int max(int)
+ int STRReq(int)
+ int buffedLvl()
+ float accuracyFactor(Char,Char)
+ int damageRoll(Char)
+ String info()
+ String statsInfo()
+ String abilityInfo()
+ String status()
+ int value()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon$Charger {
+ int charges
+ float partialCharge
+ {static} String CHARGES
- {static} String PARTIALCHARGE
+ boolean act()
+ void fx(boolean)
+ void detach()
+ int chargeCap()
+ void gainCharge(float)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ String actionName()
+ int actionIcon()
+ Visual primaryVisual()
+ Visual secondaryVisual()
+ int indicatorColor()
+ void doAction()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.EmptyRoom {
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sickle {
+ int max(int)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
+ {static} void harvestAbility(Hero,Integer,float,int,MeleeWeapon)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sickle$HarvestBleedTracker {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu {
~ boolean loading
- {static} String LAST_ABILITY
- {static} String ABILITIES_USED
- {static} String ARENA_JUMPS
- {static} String ABILITY_COOLDOWN
- boolean yelledCoward
- {static} Char throwingChar
- int lastAbility
- int abilitiesUsed
- int arenaJumps
- int abilityCooldown
- {static} int BOMB_ABILITY
- {static} int FIRE_ABILITY
- {static} int SHOCKER_ABILITY
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
+ boolean add(Buff)
+ void damage(int,Object)
+ boolean isAlive()
+ void die(Object)
# boolean canAttack(Char)
- void jump()
+ void notice()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ boolean canUseAbility()
- int targetAbilityUses()
+ boolean useAbility()
+ {static} boolean throwBomb(Char,Char)
+ {static} boolean throwFire(Char,Char)
+ {static} boolean throwShocker(Char,Char)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$Hunting {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$BombAbility {
+ int bombPos
- int timer
- ArrayList<Emitter> smokeEmitters
- {static} String BOMB_POS
- {static} String TIMER
+ boolean act()
+ void fx(boolean)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$BombAbility$BombItem {
+ boolean doPickUp(Hero,int)
# void onThrow(int)
+ Emitter emitter()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$FireAbility {
+ int direction
- int[] curCells
~ HashSet<Integer> toCells
- {static} String DIRECTION
- {static} String CUR_CELLS
+ boolean act()
- void spreadFromCell(int)
- int left(int)
- int right(int)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$FireAbility$FireBlob {
# void evolve()
+ void use(BlobEmitter)
+ String tileDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$ShockerAbility {
+ int shockerPos
- Boolean shockingOrdinals
- {static} String SHOCKER_POS
- {static} String SHOCKING_ORDINALS
+ boolean act()
- void spreadblob()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$ShockerAbility$ShockerBlob {
# void evolve()
+ void use(BlobEmitter)
+ String tileDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$ShockerAbility$ShockerItem {
+ boolean doPickUp(Hero,int)
# void onThrow(int)
+ Emitter emitter()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.MazeConnectionRoom {
+ void paint(Level)
+ int maxConnections(int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Crossbow {
+ boolean doUnequip(Hero,boolean,boolean)
+ int max(int)
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Crossbow$ChargedShot {
+ int icon()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.MissileSprite {
- {static} float SPEED
- Callback callback
- {static} int DEFAULT_ANGULAR_SPEED
- {static} HashMap<Class<? extends Item>,Integer> ANGULAR_SPEEDS
+ void reset(int,int,Item,Callback)
+ void reset(Visual,int,Item,Callback)
+ void reset(int,Visual,Item,Callback)
+ void reset(Visual,Visual,Item,Callback)
+ void reset(PointF,PointF,Item,Callback)
- void setup(PointF,PointF,Item,Callback)
+ void onComplete(Tweener)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Shocking {
- {static} ItemSprite.Glowing WHITE
- ArrayList<Char> affected
- ArrayList<Lightning.Arc> arcs
+ int proc(Weapon,Char,Char,int)
+ ItemSprite.Glowing glowing()
+ {static} void arc(Char,Char,int,ArrayList<Char>,ArrayList<Lightning.Arc>)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer {
+ boolean summoning
+ int summoningPos
# boolean firstSummon
- NecroSkeleton mySkeleton
- int storedSkeletonID
- {static} String SUMMONING
- {static} String FIRST_SUMMON
- {static} String SUMMONING_POS
- {static} String MY_SKELETON
# boolean act()
+ void aggro(Char)
+ int drRoll()
+ float lootChance()
+ Item createLoot()
+ void die(Object)
# boolean canAttack(Char)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void onZapComplete()
+ void summonMinion()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer$SummoningBlockDamage {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer$Hunting {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer$NecroSkeleton {
+ float spawningWeight()
- void teleportSpend()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer$NecroSkeleton$NecroSkeletonSprite {
+ void resetColor()
}

class com.shatteredpixel.shatteredpixeldungeon.effects.SpellSprite {
+ {static} int FOOD
+ {static} int MAP
+ {static} int CHARGE
+ {static} int BERSERK
+ {static} int ANKH
+ {static} int HASTE
+ {static} int VISION
+ {static} int PURITY
- {static} int SIZE
- {static} float FADE_IN_TIME
- {static} float STATIC_TIME
- {static} float FADE_OUT_TIME
- {static} TextureFilm film
- Char target
- Phase phase
- float duration
- float passed
- {static} HashMap<Char,SpellSprite> all
+ void reset(int)
+ void update()
+ void kill()
+ {static} void show(Char,int)
+ {static} void show(Char,int,float,float,float)
}


enum com.shatteredpixel.shatteredpixeldungeon.effects.Phase {
+  FADE_IN
+  STATIC
+  FADE_OUT
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Sungrass {
+ void activate(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Sungrass$Seed {
}
class com.shatteredpixel.shatteredpixeldungeon.plants.Sungrass$Health {
- {static} float STEP
- int pos
- float partialHeal
- int level
- {static} String POS
- {static} String PARTIAL
- {static} String LEVEL
+ boolean act()
+ void boost(int)
+ int icon()
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.particles.PurpleParticle {
+ {static} Emitter.Factory MISSILE
+ {static} Emitter.Factory BURST
+ void reset(float,float)
+ void resetBurst(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfRemoveCurse {
+ void doRead()
# boolean usableOnItem(Item)
+ {static} boolean uncursable(Item)
# void onItemSelected(Item)
+ {static} boolean uncurse(Hero,Item)
+ int value()
}

abstract class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob {
+ AiState SLEEPING
+ AiState HUNTING
+ AiState WANDERING
+ AiState FLEEING
+ AiState PASSIVE
+ AiState state
+ Class<? extends CharSprite> spriteClass
# int target
+ int defenseSkill
+ int EXP
+ int maxLvl
# Char enemy
# int enemyID
# boolean enemySeen
# boolean alerted
# {static} float TIME_TO_WAKE_UP
# boolean firstAdded
- {static} String STATE
- {static} String SEEN
- {static} String TARGET
- {static} String MAX_LVL
- {static} String ENEMY_ID
# boolean intelligentAlly
# Object loot
# float lootChance
- {static} ArrayList<Mob> heldAllies
# void onAdd()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void restoreEnemy()
+ CharSprite sprite()
# boolean act()
# Char chooseEnemy()
+ boolean add(Buff)
+ boolean remove(Buff)
# boolean canAttack(Char)
- boolean cellIsPathable(int)
# boolean getCloser(int)
# boolean getFurther(int)
+ void updateSpriteState()
+ float attackDelay()
# boolean doAttack(Char)
+ void onAttackComplete()
+ int defenseSkill(Char)
+ int defenseProc(Char,int)
+ float speed()
+ boolean surprisedBy(Char)
+ boolean surprisedBy(Char,boolean)
+ boolean heroShouldInteract()
+ void aggro(Char)
+ void clearEnemy()
+ boolean isTargeting(Char)
+ void damage(int,Object)
+ void destroy()
+ void die(Object)
+ float lootChance()
+ void rollToDropLoot()
+ Item createLoot()
+ float spawningWeight()
+ boolean reset()
+ void beckon(int)
+ String description()
+ String info()
+ void notice()
+ void yell(String)
+ {static} void holdAllies(Level)
+ {static} void holdAllies(Level,int)
+ {static} void restoreAllies(Level,int)
+ {static} void restoreAllies(Level,int,int)
+ {static} void clearHeldAllies()
}


interface com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$AiState {
~ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Sleeping {
+ {static} String TAG
+ boolean act(boolean,boolean)
# void awaken(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Wandering {
+ {static} String TAG
+ boolean act(boolean,boolean)
# boolean noticeEnemy()
# boolean continueWandering()
# int randomDestination()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Hunting {
+ {static} String TAG
- boolean recursing
+ boolean act(boolean,boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Fleeing {
+ {static} String TAG
+ boolean act(boolean,boolean)
# void escaped()
# void nowhereToRun()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Passive {
+ {static} String TAG
+ boolean act(boolean,boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.traps.GatewayTrap {
- int telePos
- {static} String TELE_POS
+ void activate()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Greatshield {
+ int max(int)
+ int defenseFactor(Char)
+ String statsInfo()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfDivination {
+ void doRead()
}

class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfDivination$WndDivination {
- {static} int WIDTH
}

class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth {
- int totChrgUsed
- int chargesOverLimit
~ ConeAOE cone
~ int target
- {static} String TOTAL
- {static} String OVER
+ boolean tryToZap(Hero,int)
+ void onZap(Ballistica)
- int chargeLimit(int)
+ void onHit(MagesStaff,Char,Char,int)
+ void fx(Ballistica,Callback)
# int chargesPerCast()
+ String statsDesc()
+ void staffFx(MagesStaff.StaffParticle)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Dewcatcher {
+ void activate(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Dewcatcher$Seed {
}
class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Seedpod {
+ void activate(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Seedpod$Seed {
}
class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Lotus {
- int wandLvl
- {static} String WAND_LVL
- void setLevel(int)
+ boolean inRange(int)
+ float seedPreservation()
+ boolean canInteract(Char)
# boolean act()
+ void damage(int,Object)
+ boolean add(Buff)
+ void destroy()
+ boolean isInvulnerable(Class)
+ String description()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MagesStaff {
- Wand wand
+ {static} String AC_IMBUE
+ {static} String AC_ZAP
- {static} float STAFF_SCALE_FACTOR
- {static} String WAND
- WndBag.ItemSelector itemSelector
- Emitter.Factory StaffParticleFactory
+ int max(int)
+ ArrayList<String> actions(Hero)
+ String defaultAction()
+ void activate(Char)
+ int targetingPos(Hero,int)
+ void execute(Hero,String)
+ int buffedVisiblyUpgraded()
+ int proc(Char,Char,int)
+ int reachFactor(Char)
+ boolean collect(Bag)
+ void onDetach()
+ Item imbueWand(Wand,Char)
+ void gainCharge(float)
+ void gainCharge(float,boolean)
+ void applyWandChargeBuff(Char)
+ Class<? extends Wand> wandClass()
+ Item upgrade(boolean)
+ Item degrade()
+ void updateWand(boolean)
+ String status()
+ String name()
+ String info()
+ Emitter emitter()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int value()
+ Weapon enchant(Enchantment)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MagesStaff$StaffParticle {
- float minSize
- float maxSize
+ float sizeJitter
+ void reset(float,float)
+ void setSize(float,float)
+ void setLifespan(float)
+ void shuffleXY(float)
+ void radiateXY(float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.items.bags.ScrollHolder {
+ boolean canHold(Item)
+ int capacity()
+ void onDetach()
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfHaste {
+ void apply(Hero)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.ThickPillarsGooRoom {
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRunestoneRoom {
+ void paint(Level)
+ boolean canPlaceWater(Point)
+ boolean canPlaceGrass(Point)
+ boolean canPlaceCharacter(Point,Level)
}

class com.shatteredpixel.shatteredpixeldungeon.ui.RenderedTextBlock {
- int maxWidth
+ int nLines
- {static} RenderedText SPACE
- {static} RenderedText NEWLINE
# String text
# String[] tokens
# ArrayList<RenderedText> words
# boolean multiline
- int size
- float zoom
- int color
- int hightlightColor
- boolean highlightingEnabled
+ {static} int LEFT_ALIGN
+ {static} int CENTER_ALIGN
+ {static} int RIGHT_ALIGN
- int alignment
+ void text(String)
+ void tokens(String)
+ void text(String,int)
+ String text()
+ void maxWidth(int)
+ int maxWidth()
- void build()
+ void zoom(float)
+ void hardlight(int)
+ void resetColor()
+ void alpha(float)
+ void setHightlighting(boolean)
+ void setHightlighting(boolean,int)
+ void invert()
+ void align(int)
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.PillarsRoom {
+ int minWidth()
+ int minHeight()
+ float[] sizeCatProbs()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoMob {
}
class com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoMob$MobTitle {
- {static} int GAP
- CharSprite image
- RenderedTextBlock name
- HealthBar health
- BuffIndicator buffs
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Wandmaker {
# boolean act()
+ int defenseSkill(Char)
+ void damage(int,Object)
+ boolean add(Buff)
+ boolean reset()
+ boolean interact(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Wandmaker$Quest {
- {static} int type
- {static} boolean spawned
- {static} boolean given
+ {static} Wand wand1
+ {static} Wand wand2
- {static} String NODE
- {static} String SPAWNED
- {static} String TYPE
- {static} String GIVEN
- {static} String WAND1
- {static} String WAND2
- {static} String RITUALPOS
- {static} boolean questRoomSpawned
+ {static} void reset()
+ {static} void storeInBundle(Bundle)
+ {static} void restoreFromBundle(Bundle)
+ {static} void spawnWandmaker(Level,Room)
+ {static} ArrayList<Room> spawnRoom(ArrayList<Room>)
+ {static} boolean active()
+ {static} void complete()
}


class com.shatteredpixel.shatteredpixeldungeon.items.ItemStatusHandler {
- Class<? extends T>[] items
- LinkedHashMap<Class<? extends T>,String> itemLabels
- LinkedHashMap<String,Integer> labelImages
- LinkedHashSet<Class<? extends T>> known
- {static} String PFX_LABEL
- {static} String PFX_KNOWN
+ void save(Bundle)
+ void saveSelectively(Bundle,ArrayList<Item>)
+ void saveClassesSelectively(Bundle,ArrayList<Class<? extends Item>>)
- void restore(Bundle,ArrayList<String>)
+ boolean contains(T)
+ boolean contains(Class<? extends T>)
+ int image(T)
+ int image(Class<? extends T>)
+ String label(T)
+ String label(Class<? extends T>)
+ boolean isKnown(T)
+ boolean isKnown(Class<? extends T>)
+ void know(T)
+ void know(Class<? extends T>)
+ HashSet<Class<? extends T>> known()
+ HashSet<Class<? extends T>> unknown()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.GreatCrabSprite {
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.DeadEndLevel {
- {static} int SIZE
+ String tilesTex()
+ String waterTex()
# boolean build()
+ Mob createMob()
# void createMobs()
+ Actor addRespawner()
# void createItems()
+ int randomRespawnCell(Char)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.BlacksmithSprite {
- Emitter emitter
+ void link(Char)
+ void update()
+ void onComplete(Animation)
}


class com.shatteredpixel.shatteredpixeldungeon.items.special.EnergyCrystal {
+ ArrayList<String> actions(Hero)
+ boolean doPickUp(Hero,int)
+ boolean isUpgradable()
+ boolean isIdentified()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Glaive {
+ int max(int)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.IncendiaryDart {
# void onThrow(int)
+ int proc(Char,Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Gnoll {
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
}

class com.shatteredpixel.shatteredpixeldungeon.items.food.FrozenCarpaccio {
# void satisfy(Hero)
+ int value()
+ {static} void effect(Hero)
+ {static} Food cook(MysteryMeat)
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Sorrowmoss {
+ void activate(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Sorrowmoss$Seed {
}
class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.CrystalPathRoom {
+ int minWidth()
+ int minHeight()
+ void paint(Level)
+ void addRewardItem(Generator.Category,ArrayList<Item>,ArrayList<Item>)
+ boolean canConnect(Point)
+ boolean canPlaceGrass(Point)
+ boolean canPlaceWater(Point)
+ boolean canPlaceTrap(Point)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room {
+ ArrayList<Room> neigbours
+ LinkedHashMap<Room,Door> connected
+ int distance
+ int price
+ {static} int ALL
+ {static} int LEFT
+ {static} int TOP
+ {static} int RIGHT
+ {static} int BOTTOM
+ Room set(Room)
+ int minWidth()
+ int maxWidth()
+ int minHeight()
+ int maxHeight()
+ boolean setSize()
+ boolean forceSize(int,int)
+ boolean setSizeWithLimit(int,int)
# boolean setSize(int,int,int,int)
+ Point pointInside(Point,int)
+ int width()
+ int height()
+ Point random()
+ Point random(int)
+ boolean inside(Point)
+ Point center()
+ int minConnections(int)
+ int curConnections(int)
+ int remConnections(int)
+ int maxConnections(int)
+ boolean canConnect(Point)
+ boolean canConnect(int)
+ boolean canConnect(Room)
+ boolean canMerge(Level,Room,Point,int)
+ void merge(Level,Room,Rect,int)
+ boolean addNeigbour(Room)
+ boolean connect(Room)
+ void clearConnections()
+ boolean isEntrance()
+ boolean isExit()
+ {abstract}void paint(Level)
+ boolean canPlaceWater(Point)
+ ArrayList<Point> waterPlaceablePoints()
+ boolean canPlaceGrass(Point)
+ ArrayList<Point> grassPlaceablePoints()
+ boolean canPlaceTrap(Point)
+ ArrayList<Point> trapPlaceablePoints()
+ boolean canPlaceItem(Point,Level)
+ ArrayList<Point> itemPlaceablePoints(Level)
+ boolean canPlaceCharacter(Point,Level)
+ ArrayList<Point> charPlaceablePoints(Level)
+ int distance()
+ void distance(int)
+ int price()
+ void price(int)
+ Collection<Room> edges()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void onLevelLoad(Level)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room$Door {
+ Type type
- boolean typeLocked
+ void lockTypeChanges(boolean)
+ void set(Type)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


enum com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Type {
+  EMPTY
+  TUNNEL
+  WATER
+  REGULAR
+  UNLOCKED
+  HIDDEN
+  BARRICADE
+  LOCKED
+  CRYSTAL
+  WALL
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.GooSprite {
- Animation pump
- Animation pumpAttack
- Emitter spray
- ArrayList<Emitter> pumpUpEmitters
+ void link(Char)
+ void pumpUp(int)
+ void clearEmitters()
+ void triggerEmitters()
+ void pumpAttack()
+ void play(Animation)
+ int blood()
+ void spray(boolean)
+ void update()
+ void onComplete(Animation)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.GooSprite$GooParticle {
+ {static} Emitter.Factory FACTORY
+ void reset(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfInvisibility {
+ void apply(Hero)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Greataxe {
+ int max(int)
+ int STRReq(int)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.SPDAction {
+ {static} GameAction NONE
+ {static} GameAction BACK
+ {static} GameAction LEFT_CLICK
+ {static} GameAction RIGHT_CLICK
+ {static} GameAction MIDDLE_CLICK
+ {static} GameAction N
+ {static} GameAction W
+ {static} GameAction S
+ {static} GameAction E
+ {static} GameAction NW
+ {static} GameAction NE
+ {static} GameAction SW
+ {static} GameAction SE
+ {static} GameAction WAIT_OR_PICKUP
+ {static} GameAction INVENTORY
+ {static} GameAction INVENTORY_SELECTOR
+ {static} GameAction QUICKSLOT_SELECTOR
+ {static} GameAction QUICKSLOT_1
+ {static} GameAction QUICKSLOT_2
+ {static} GameAction QUICKSLOT_3
+ {static} GameAction QUICKSLOT_4
+ {static} GameAction QUICKSLOT_5
+ {static} GameAction QUICKSLOT_6
+ {static} GameAction BAG_1
+ {static} GameAction BAG_2
+ {static} GameAction BAG_3
+ {static} GameAction BAG_4
+ {static} GameAction BAG_5
+ {static} GameAction EXAMINE
+ {static} GameAction WAIT
+ {static} GameAction REST
+ {static} GameAction TAG_ATTACK
+ {static} GameAction TAG_ACTION
+ {static} GameAction TAG_LOOT
+ {static} GameAction TAG_RESUME
+ {static} GameAction CYCLE
+ {static} GameAction HERO_INFO
+ {static} GameAction JOURNAL
+ {static} GameAction ZOOM_IN
+ {static} GameAction ZOOM_OUT
- {static} LinkedHashMap<Integer,GameAction> defaultBindings
- {static} LinkedHashMap<Integer,GameAction> defaultControllerBindings
- {static} String BINDINGS_FILE
+ {static} LinkedHashMap<Integer,GameAction> getDefaults()
+ {static} LinkedHashMap<Integer,GameAction> getControllerDefaults()
+ {static} void loadBindings()
+ {static} void saveBindings()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Adrenaline {
+ {static} float DURATION
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalMimic {
+ String name()
+ String description()
+ int damageRoll()
+ void stopHiding()
+ int attackProc(Char,int)
# void steal(Hero)
# void generatePrize(boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalMimic$Fleeing {
# void escaped()
# void nowhereToRun()
}

class com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor {
# {static} String AC_DETACH
+ Augment augment
+ Glyph glyph
+ boolean glyphHardened
+ boolean curseInfusionBonus
+ boolean masteryPotionBonus
# BrokenSeal seal
+ int tier
- {static} int USES_TO_ID
- float usesLeftToID
- float availableUsesToID
- {static} String USES_LEFT_TO_ID
- {static} String AVAILABLE_USES
- {static} String GLYPH
- {static} String GLYPH_HARDENED
- {static} String CURSE_INFUSION_BONUS
- {static} String MASTERY_POTION_BONUS
- {static} String SEAL
- {static} String AUGMENT
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void reset()
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ boolean doEquip(Hero)
+ void activate(Char)
+ void affixSeal(BrokenSeal)
+ BrokenSeal checkSeal()
# float timeToEquip(Hero)
+ boolean doUnequip(Hero,boolean,boolean)
+ boolean isEquipped(Hero)
+ int DRMax()
+ int DRMax(int)
+ int DRMin()
+ int DRMin(int)
+ float evasionFactor(Char,float)
+ float speedFactor(Char,float)
+ float stealthFactor(Char,float)
+ int level()
+ Item upgrade()
+ Item upgrade(boolean)
+ int proc(Char,Char,int)
+ void onHeroGainExp(float,Hero)
+ String name()
+ String info()
+ Emitter emitter()
+ Item random()
+ int STRReq()
+ int STRReq(int)
# {static} int STRReq(int,int)
+ int value()
+ Armor inscribe(Glyph)
+ Armor inscribe()
+ boolean hasGlyph(Class<? extends Glyph>,Char)
+ boolean hasGoodGlyph()
+ boolean hasCurseGlyph()
+ ItemSprite.Glowing glowing()
}


enum com.shatteredpixel.shatteredpixeldungeon.items.armor.Augment {
+  EVASION
+  DEFENSE
+  NONE
- float evasionFactor
- float defenceFactor
+ int evasionFactor(int)
+ int defenseFactor(int)
}


abstract class com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor$Glyph {
+ {static} Class<?>[] common
+ {static} Class<?>[] uncommon
+ {static} Class<?>[] rare
+ {static} float[] typeChances
- {static} Class<?>[] curses
+ {abstract}int proc(Armor,Char,Char,int)
# float procChanceMultiplier(Char)
+ {static} float genericProcChanceMultiplier(Char)
+ String name()
+ String name(String)
+ String desc()
+ boolean curse()
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
+ {abstract}ItemSprite.Glowing glowing()
+ {static} Glyph random(Class<? extends Glyph>)
+ {static} Glyph randomCommon(Class<? extends Glyph>)
+ {static} Glyph randomUncommon(Class<? extends Glyph>)
+ {static} Glyph randomRare(Class<? extends Glyph>)
+ {static} Glyph randomCurse(Class<? extends Glyph>)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.StatuesEntranceRoom {
+ float[] sizeCatProbs()
+ boolean isEntrance()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SentryRoom {
+ int minWidth()
+ int minHeight()
+ void paint(Level)
- {static} Item prize(Level)
+ boolean canConnect(Point)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SentryRoom$Sentry {
- float initialChargeDelay
- float curChargeDelay
- EmptyRoom room
- {static} String INITIAL_DELAY
- {static} String CUR_DELAY
- {static} String ROOM
# boolean act()
+ void onZapComplete()
+ int attackSkill(Char)
+ int defenseSkill(Char)
+ void damage(int,Object)
+ boolean add(Buff)
+ boolean reset()
+ boolean interact(Char)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SentryRoom$SentrySprite {
- Animation charging
- Emitter chargeParticles
- float baseY
+ void zap(int)
+ void link(Char)
+ void die()
+ void kill()
+ void charge()
+ void play(Animation)
+ void place(int)
+ void turnTo(int,int)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.traps.TenguDartTrap {
# int poisonAmount()
# boolean canTarget(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.StatueSprite {
- {static} int[] tierFrames
+ void setArmor(int)
+ int blood()
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Thorns {
- {static} ItemSprite.Glowing RED
+ int proc(Armor,Char,Char,int)
+ ItemSprite.Glowing glowing()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.items.KindOfWeapon {
# String hitSound
# float hitSoundPitch
- {static} boolean isSwiftEquipping
+ void execute(Hero,String)
+ boolean isEquipped(Hero)
# float timeToEquip(Hero)
+ boolean doEquip(Hero)
+ boolean equipSecondary(Hero)
+ boolean doUnequip(Hero,boolean,boolean)
+ int min()
+ int max()
+ {abstract}int min(int)
+ {abstract}int max(int)
+ int damageRoll(Char)
+ float accuracyFactor(Char,Char)
+ float delayFactor(Char)
+ int reachFactor(Char)
+ boolean canReach(Char,int)
+ int defenseFactor(Char)
+ int proc(Char,Char,int)
+ void hitSound(float)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.traps.BurningTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.ParalyticGas {
# void evolve()
+ void use(BlobEmitter)
+ String tileDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.tiles.TerrainFeaturesTilemap {
- {static} TerrainFeaturesTilemap instance
- SparseArray<Plant> plants
- SparseArray<Trap> traps
# int getTileVisual(int,int,boolean)
+ {static} Image tile(int,int)
+ void growPlant(int)
}


class com.shatteredpixel.shatteredpixeldungeon.items.Gold {
+ ArrayList<String> actions(Hero)
+ boolean doPickUp(Hero,int)
+ boolean isUpgradable()
+ boolean isIdentified()
+ Item random()
}

class com.shatteredpixel.shatteredpixeldungeon.mechanics.ConeAOE {
+ Ballistica coreRay
+ ArrayList<Ballistica> outerRays
+ ArrayList<Ballistica> rays
+ HashSet<Integer> cells
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.BlacksmithRoom {
+ int minWidth()
+ int minHeight()
+ void paint(Level)
+ boolean canPlaceCharacter(Point,Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.BlacksmithRoom$QuestEntrance {
+ Tilemap create()
+ String name(int,int)
+ String desc(int,int)
}

class com.shatteredpixel.shatteredpixeldungeon.effects.particles.FlowParticle {
+ {static} Emitter.Factory FACTORY
+ void reset(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.particles.FlowParticle$Flow {
- int pos
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Electricity {
- boolean[] water
# void evolve()
- void spreadFromCell(int,int)
+ void use(BlobEmitter)
+ String tileDesc()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FungalCore {
+ boolean reset()
+ float spawningWeight()
+ void die(Object)
}

class com.shatteredpixel.shatteredpixeldungeon.items.spells.PhaseShift {
# void affectTarget(Ballistica,Hero)
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.items.spells.PhaseShift$Recipe {
- {static} int OUT_QUANTITY
}

class com.shatteredpixel.shatteredpixeldungeon.mechanics.ShadowCaster {
- {static} int MAX_DISTANCE
+ {static} int[][] rounding
+ int maxDistance()
+ {static} void setMaxDistance(int)
+ {static} void castShadow(int,int,int,boolean[],boolean[],int)
- {static} void scanOctant(int,boolean[],boolean[],int,int,int,int,double,double,int,int,boolean)
}


enum com.shatteredpixel.shatteredpixeldungeon.ui.Icons {
+  ENTER
+  GOLD
+  RANKINGS
+  BADGES
+  NEWS
+  CHANGES
+  PREFS
+  SHPX
+  STAIRS
+  WARRIOR
+  MAGE
+  ROGUE
+  HUNTRESS
+  DUELIST
+  EXIT
+  DISPLAY
+  DISPLAY_LAND
+  DISPLAY_PORT
+  DATA
+  AUDIO
+  LANGS
+  CONTROLLER
+  KEYBOARD
+  STATS
+  CHALLENGE_OFF
+  CHALLENGE_ON
+  RENAME_OFF
+  RENAME_ON
+  SEED
+  LEFTARROW
+  RIGHTARROW
+  CALENDAR
+  UNCHECKED
+  CHECKED
+  CLOSE
+  PLUS
+  REPEAT
+  ARROW
+  INFO
+  WARNING
+  BACKPACK_LRG
+  TALENT
+  MAGNIFY
+  SNAKE
+  BUFFS
+  ENERGY
+  COPY
+  PASTE
+  COIN_SML
+  ENERGY_SML
+  BACKPACK
+  SEED_POUCH
+  SCROLL_HOLDER
+  WAND_HOLSTER
+  POTION_BANDOLIER
+  TARGET
+  SKULL
+  BUSY
+  COMPASS
+  SLEEP
+  ALERT
+  LOST
+  DEPTH
+  DEPTH_CHASM
+  DEPTH_WATER
+  DEPTH_GRASS
+  DEPTH_DARK
+  DEPTH_LARGE
+  DEPTH_TRAPS
+  DEPTH_SECRETS
+  CHAL_COUNT
+  LIBGDX
+  ALEKS
+  WATA
+  CELESTI
+  KRISTJAN
+  CUBE_CODE
+  PURIGRO
+  ARCNOR
+ Image get()
+ {static} Image get(Icons)
- {static} int runTypeOfs()
+ {static} Image get(HeroClass)
+ {static} Image get(Level.Feeling)
}


class com.shatteredpixel.shatteredpixeldungeon.services.updates.Updates {
+ {static} UpdateService service
- {static} Date lastCheck
- {static} long CHECK_DELAY
- {static} AvailableUpdateData updateData
+ {static} boolean supportsUpdates()
+ {static} boolean supportsUpdatePrompts()
+ {static} boolean supportsBetaChannel()
+ {static} void checkForUpdate()
+ {static} void launchUpdate(AvailableUpdateData)
+ {static} boolean updateAvailable()
+ {static} AvailableUpdateData updateData()
+ {static} void clearUpdate()
+ {static} boolean supportsReviews()
+ {static} void launchReview(Callback)
+ {static} void openReviewURI()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.CausticSlimeSprite {
}
class com.shatteredpixel.shatteredpixeldungeon.windows.WndTitledMessage {
# {static} int WIDTH_MIN
# {static} int WIDTH_MAX
# {static} int GAP
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.ShockingTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer {
- int abilityCooldown
- boolean lastAbilityWasRockfall
- int[] throwingRocksFromPos
- int throwingRockToPos
- int sapperID
- int[] sapperSpawns
~ int hits
- boolean inFinalBracket
- {static} int rocksInFlight
- {static} ArrayList<Char> knockedChars
+ {static} String HITS
- {static} String ABILITY_COOLDOWN
- {static} String LAST_ABILITY_WAS_ROCKFALL
- {static} String ROCK_FROM_POS
- {static} String ROCK_TO_POS
- {static} String SAPPER_ID
- {static} String SAPPER_SPAWNS
# boolean act()
+ boolean isInvulnerable(Class)
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
+ boolean reset()
+ float spawningWeight()
+ boolean heroShouldInteract()
# boolean getCloser(int)
# boolean getFurther(int)
+ boolean interact(Char)
+ void damage(int,Object)
+ boolean isAlive()
+ void linkSapper(GnollSapper)
+ boolean hasSapper()
+ void loseSapper()
- void carveRockAndDash()
- ArrayList<Integer> spreadDiamondAOE(ArrayList<Integer>)
+ String description()
+ void die(Object)
+ void beckon(int)
+ {static} Ballistica prepRockThrowAttack(Char,Char)
+ {static} void doRockThrowAttack(Char,int,int)
+ {static} boolean prepRockFallAttack(Char,Char,int,boolean)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer$Sleeping {
# void awaken(boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer$Hunting {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer$Boulder {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer$GnollRockFall {
+ void affectChar(Char)
+ void affectCell(int)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer$RockArmor {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.RatKing {
+ int defenseSkill(Char)
+ float speed()
# Char chooseEnemy()
+ void damage(int,Object)
+ boolean add(Buff)
+ boolean reset()
# void onAdd()
# boolean act()
+ boolean interact(Char)
+ String description()
}

class com.shatteredpixel.shatteredpixeldungeon.items.food.SmallRation {
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.DM200Sprite {
+ void zap(int)
+ void place(int)
+ void die()
+ void onComplete(Animation)
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.GhoulSprite {
- Animation crumple
+ void crumple()
+ void die()
}


class com.shatteredpixel.shatteredpixeldungeon.ui.TalentIcon {
- {static} TextureFilm film
- {static} int SIZE
}

class com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring {
# Buff buff
- {static} LinkedHashMap<String,Integer> gems
- {static} ItemStatusHandler<Ring> handler
- String gem
- float levelsToID
# boolean anonymous
- {static} String LEVELS_TO_ID
+ {static} void initGems()
+ {static} void save(Bundle)
+ {static} void saveSelectively(Bundle,ArrayList<Item>)
+ {static} void restore(Bundle)
+ void anonymize()
+ void reset()
+ void activate(Char)
+ boolean doUnequip(Hero,boolean,boolean)
+ boolean isKnown()
+ void setKnown()
+ String name()
+ String info()
# String statsInfo()
+ Item upgrade()
+ boolean isIdentified()
+ Item identify(boolean)
+ Item random()
+ {static} HashSet<Class<? extends Ring>> getKnown()
+ {static} HashSet<Class<? extends Ring>> getUnknown()
+ {static} boolean allKnown()
+ int value()
# RingBuff buff()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void onHeroGainExp(float,Hero)
+ int buffedLvl()
+ {static} int getBonus(Char,Class<? extends RingBuff>)
+ {static} int getBuffedBonus(Char,Class<? extends RingBuff>)
+ int soloBonus()
+ int soloBuffedBonus()
+ int combinedBonus(Hero)
+ int combinedBuffedBonus(Hero)
}


class com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring$RingBuff {
+ boolean attachTo(Char)
+ boolean act()
+ int level()
+ int buffedLvl()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.ArmoredBrute {
+ int drRoll()
# void triggerEnrage()
+ Item createLoot()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.ArmoredBrute$ArmoredRage {
+ boolean act()
}

class com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter {
+ {static} Emitter floor(int)
+ {static} Emitter get(int)
+ {static} Emitter center(int)
+ {static} Emitter bottom(int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.quest.CeremonialCandle {
+ {static} int ritualPos
+ boolean aflame
+ {static} String AFLAME
+ boolean isUpgradable()
+ boolean isIdentified()
+ void doDrop(Hero)
# void onThrow(int)
+ boolean doPickUp(Hero,int)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ Emitter emitter()
- {static} void checkCandles()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.HeroSelectScene {
- Image background
- Image fadeLeft
- IconButton btnFade
- RenderedTextBlock title
- ArrayList<StyledButton> heroBtns
- RenderedTextBlock heroName
- RenderedTextBlock heroDesc
- StyledButton startBtn
- IconButton infoButton
- IconButton btnOptions
- GameOptions optionsPane
- IconButton btnExit
- float uiAlpha
+ void create()
- void updateOptionsColor()
- void setSelectedHero(HeroClass)
+ void update()
- void updateFade()
- void resetFade()
# void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.HeroSelectScene$HeroBtn {
- HeroClass cl
- {static} int MIN_WIDTH
- {static} int HEIGHT
+ void update()
# void onClick()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.HeroSelectScene$GameOptions {
- NinePatch bg
- ArrayList<StyledButton> buttons
- ArrayList<ColorBlock> spacers
# void createChildren()
# void layout()
- void alpha(float)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Levitation {
+ {static} float DURATION
+ boolean attachTo(Char)
+ void detach()
+ boolean detachesWithinDelay(float)
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ void fx(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.NewbornElementalSprite {
+ void link(Char)
+ void die()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.items.armor.HuntressArmor {
}
class com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_3_X_Changes {
+ {static} void addAllChanges(ArrayList<ChangeInfo>)
+ {static} void add_v0_3_5_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_3_4_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_3_3_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_3_2_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_3_1_Changes(ArrayList<ChangeInfo>)
+ {static} void add_v0_3_0_Changes(ArrayList<ChangeInfo>)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Amok {
+ int icon()
+ void detach()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfHealing {
+ void apply(Hero)
+ {static} void heal(Char)
+ {static} void pharmacophobiaProc(Hero)
+ {static} void cure(Char)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.DM300Sprite {
- Animation charge
- Animation slam
- Emitter superchargeSparks
+ void updateChargeState(boolean)
+ void zap(int)
+ void charge()
+ void slam(int)
+ void onComplete(Animation)
+ void place(int)
+ void link(Char)
+ void update()
+ void die()
+ void kill()
+ int blood()
}


class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfFuror {
+ String statsInfo()
# RingBuff buff()
+ {static} float attackSpeedMultiplier(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfFuror$Furor {
}
class com.shatteredpixel.shatteredpixeldungeon.windows.WndCombo {
- {static} int WIDTH_P
- {static} int WIDTH_L
- {static} int MARGIN
}

class com.shatteredpixel.shatteredpixeldungeon.ui.Compass {
- {static} float RAD_2_G
- {static} float RADIUS
- int cell
- PointF cellCenter
- PointF lastScroll
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.DM100Sprite {
+ void zap(int)
+ void die()
+ void onComplete(Animation)
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.ui.IconButton {
# Image icon
# void layout()
# void onPointerDown()
# void onPointerUp()
+ void enable(boolean)
+ void icon(Image)
+ Image icon()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.Lightning {
- {static} float DURATION
- float life
- List<Arc> arcs
- Callback callback
- {static} double A
+ void update()
+ void draw()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.Lightning$Arc {
- Image arc1
- PointF start
+ void alpha(float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.RunestoneRoom {
+ int minWidth()
+ int minHeight()
+ void paint(Level)
- {static} Item prize(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.ShieldedSprite {
}
abstract class com.shatteredpixel.shatteredpixeldungeon.items.armor.ClassArmor {
- {static} String AC_ABILITY
- {static} String AC_TRANSFER
- Charger charger
+ float charge
- {static} String ARMOR_TIER
- {static} String CHARGE
+ void activate(Char)
+ boolean doUnequip(Hero,boolean,boolean)
+ int targetingPos(Hero,int)
+ {static} ClassArmor upgrade(Hero,Armor)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ ArrayList<String> actions(Hero)
+ String actionName(String,Hero)
+ String status()
+ void execute(Hero,String)
+ String desc()
+ int value()
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.ClassArmor$Charger {
+ boolean attachTo(Char)
+ boolean act()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite {
# Animation advancedHiding
# Animation hiding
# int texOffset()
+ void linkVisuals(Char)
+ void hideMimic()
+ void showSleep()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite$Golden {
# int texOffset()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite$Crystal {
# int texOffset()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite$Ebony {
# int texOffset()
+ void hideMimic()
+ void play(Animation)
}

class com.shatteredpixel.shatteredpixeldungeon.items.bombs.ShockBomb {
+ void explode(int)
+ int value()
}

abstract class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.TippedDart {
- {static} String AC_CLEAN
+ {static} int lostDarts
- {static} int targetPos
- {static} HashMap<Class<? extends Plant.Seed>,Class<? extends TippedDart>> types
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
# void rangedHit(Char,int)
+ Item merge(Item)
+ float durabilityPerUse()
+ int value()
+ {static} TippedDart getTipped(Plant.Seed,int)
+ {static} TippedDart randomTipped(int)
}


class com.shatteredpixel.shatteredpixeldungeon.items.food.PhantomMeat {
# void satisfy(Hero)
+ int value()
+ {static} void effect(Hero)
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndStory {
- {static} int WIDTH_P
- {static} int WIDTH_L
- {static} int MARGIN
- IconTitle ttl
- RenderedTextBlock tf
- float appearDelay
- float disappearDelay
+ WndStory setDelays(float,float)
+ void onBackPressed()
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.EyeSprite {
- int zapPos
- Animation charging
- Emitter chargeParticles
+ void link(Char)
+ void update()
+ void die()
+ void kill()
+ void charge(int)
+ void play(Animation)
+ void zap(int)
+ void onComplete(Animation)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.TargetedCell {
- float alpha
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.HallsLevel {
+ {static} String[] HALLS_TRACK_LIST
+ {static} float[] HALLS_TRACK_CHANCES
+ void playLevelMusic()
# ArrayList<Room> initRooms()
# int standardRooms(boolean)
# int specialRooms(boolean)
# Painter painter()
+ void create()
+ String tilesTex()
+ String waterTex()
# Class<?>[] trapClasses()
# float[] trapChances()
+ String tileName(int)
+ String tileDesc(int)
+ Group addVisuals()
+ {static} void addHallsVisuals(Level,Group)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.HallsLevel$Stream {
- int pos
- float delay
+ void update()
+ void draw()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.HallsLevel$FireParticle {
+ void reset(float,float)
+ void update()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.RevealedArea {
+ int pos
- {static} String BRANCH
- {static} String DEPTH
- {static} String POS
+ void detach()
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.TunnelRoom {
+ void paint(Level)
# Rect getConnectionSpace()
# Point getDoorCenter()
}

class com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTileSheet {
- {static} int WIDTH
+ {static} int NULL_TILE
- {static} int GROUND
+ {static} int FLOOR
+ {static} int FLOOR_DECO
+ {static} int GRASS
+ {static} int EMBERS
+ {static} int FLOOR_SP
+ {static} int FLOOR_ALT_1
+ {static} int FLOOR_DECO_ALT
+ {static} int GRASS_ALT
+ {static} int EMBERS_ALT
+ {static} int FLOOR_SP_ALT
+ {static} int FLOOR_ALT_2
+ {static} int ENTRANCE
+ {static} int EXIT
+ {static} int WELL
+ {static} int EMPTY_WELL
+ {static} int PEDESTAL
+ {static} int ENTRANCE_SP
+ {static} int CHASM
+ {static} int CHASM_FLOOR
+ {static} int CHASM_FLOOR_SP
+ {static} int CHASM_WALL
+ {static} int CHASM_WATER
+ {static} SparseArray<Integer> chasmStitcheable
+ {static} int WATER
+ {static} HashSet<Integer> waterStitcheable
- {static} int FLAT_WALLS
+ {static} int FLAT_WALL
+ {static} int FLAT_WALL_DECO
+ {static} int FLAT_BOOKSHELF
+ {static} int FLAT_WALL_ALT
+ {static} int FLAT_WALL_DECO_ALT
+ {static} int FLAT_BOOKSHELF_ALT
+ {static} int FLAT_DOOR
+ {static} int FLAT_DOOR_OPEN
+ {static} int FLAT_DOOR_LOCKED
+ {static} int FLAT_DOOR_CRYSTAL
+ {static} int UNLOCKED_EXIT
+ {static} int LOCKED_EXIT
+ {static} int FLAT_OTHER
+ {static} int FLAT_ALCHEMY_POT
+ {static} int FLAT_BARRICADE
+ {static} int FLAT_HIGH_GRASS
+ {static} int FLAT_FURROWED_GRASS
+ {static} int FLAT_HIGH_GRASS_ALT
+ {static} int FLAT_FURROWED_ALT
+ {static} int FLAT_STATUE
+ {static} int FLAT_STATUE_SP
+ {static} int FLAT_MINE_CRYSTAL
+ {static} int FLAT_MINE_CRYSTAL_ALT
+ {static} int FLAT_MINE_CRYSTAL_ALT_2
+ {static} int FLAT_MINE_BOULDER
+ {static} int FLAT_MINE_BOULDER_ALT
+ {static} int FLAT_MINE_BOULDER_ALT_2
- {static} int RAISED_WALLS
+ {static} int RAISED_WALL
+ {static} int RAISED_WALL_DECO
+ {static} int RAISED_WALL_DOOR
+ {static} int RAISED_WALL_BOOKSHELF
+ {static} int RAISED_WALL_ALT
+ {static} int RAISED_WALL_DECO_ALT
+ {static} int RAISED_WALL_BOOKSHELF_ALT
- {static} int[] wallStitcheable
- {static} int RAISED_DOORS
+ {static} int RAISED_DOOR
+ {static} int RAISED_DOOR_OPEN
+ {static} int RAISED_DOOR_LOCKED
+ {static} int RAISED_DOOR_CRYSTAL
+ {static} int RAISED_DOOR_SIDEWAYS
- {static} int[] doorTiles
- {static} int RAISED_OTHER
+ {static} int RAISED_ALCHEMY_POT
+ {static} int RAISED_BARRICADE
+ {static} int RAISED_HIGH_GRASS
+ {static} int RAISED_FURROWED_GRASS
+ {static} int RAISED_HIGH_GRASS_ALT
+ {static} int RAISED_FURROWED_ALT
+ {static} int RAISED_STATUE
+ {static} int RAISED_STATUE_SP
+ {static} int RAISED_MINE_CRYSTAL
+ {static} int RAISED_MINE_CRYSTAL_ALT
+ {static} int RAISED_MINE_CRYSTAL_ALT_2
+ {static} int RAISED_MINE_BOULDER
+ {static} int RAISED_MINE_BOULDER_ALT
+ {static} int RAISED_MINE_BOULDER_ALT_2
+ {static} int WALLS_INTERNAL
- {static} int WALL_INTERNAL
- {static} int WALL_INTERNAL_DECO
- {static} int WALL_INTERNAL_WOODEN
- {static} int WALLS_OVERHANG
+ {static} int WALL_OVERHANG
+ {static} int WALL_OVERHANG_DECO
+ {static} int WALL_OVERHANG_WOODEN
+ {static} int DOOR_SIDEWAYS_OVERHANG
+ {static} int DOOR_SIDEWAYS_OVERHANG_CLOSED
+ {static} int DOOR_SIDEWAYS_OVERHANG_LOCKED
+ {static} int DOOR_SIDEWAYS_OVERHANG_CRYSTAL
+ {static} int DOOR_OVERHANG
+ {static} int DOOR_OVERHANG_OPEN
+ {static} int DOOR_OVERHANG_CRYSTAL
+ {static} int DOOR_SIDEWAYS
+ {static} int DOOR_SIDEWAYS_LOCKED
+ {static} int DOOR_SIDEWAYS_CRYSTAL
+ {static} int EXIT_UNDERHANG
- {static} int OTHER_OVERHANG
+ {static} int ALCHEMY_POT_OVERHANG
+ {static} int BARRICADE_OVERHANG
+ {static} int HIGH_GRASS_OVERHANG
+ {static} int FURROWED_OVERHANG
+ {static} int HIGH_GRASS_OVERHANG_ALT
+ {static} int FURROWED_OVERHANG_ALT
+ {static} int STATUE_OVERHANG
+ {static} int STATUE_SP_OVERHANG
+ {static} int MINE_CRYSTAL_OVERHANG
+ {static} int MINE_CRYSTAL_OVERHANG_ALT
+ {static} int MINE_CRYSTAL_OVERHANG_ALT_2
+ {static} int MINE_BOULDER_OVERHANG
+ {static} int MINE_BOULDER_OVERHANG_ALT
+ {static} int MINE_BOULDER_OVERHANG_ALT_2
+ {static} int HIGH_GRASS_UNDERHANG
+ {static} int FURROWED_UNDERHANG
+ {static} int HIGH_GRASS_UNDERHANG_ALT
+ {static} int FURROWED_UNDERHANG_ALT
+ {static} SparseArray<Integer> directVisuals
+ {static} SparseArray<Integer> directFlatVisuals
+ {static} byte[] tileVariance
+ {static} SparseArray<Integer> commonAltVisuals
+ {static} SparseArray<Integer> rareAltVisuals
- {static} int xy(int,int)
+ {static} int stitchChasmTile(int)
+ {static} int stitchWaterTile(int,int,int,int)
+ {static} boolean floorTile(int)
+ {static} boolean wallStitcheable(int)
+ {static} int getRaisedWallTile(int,int,int,int,int)
+ {static} int getRaisedDoorTile(int,int)
+ {static} boolean doorTile(int)
+ {static} int stitchInternalWallTile(int,int,int,int,int,int)
+ {static} int stitchWallOverhangTile(int,int,int,int)
+ {static} void setupVariance(int,long)
+ {static} int getVisualWithAlts(int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.Degradation {
- {static} int[] WEAPON
- {static} int[] ARMOR
- {static} int[] RING
- {static} int[] WAND
+ {static} Degradation weapon(PointF)
+ {static} Degradation armor(PointF)
+ {static} Degradation ring(PointF)
+ {static} Degradation wand(PointF)
+ void update()
+ void draw()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.Degradation$Speck {
- {static} int COLOR
- {static} int SIZE
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.HeavyBoomerang {
~ boolean circleBackhit
+ int max(int)
# float adjacentAccFactor(Char,Char)
# void rangedHit(Char,int)
# void rangedMiss(int)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.HeavyBoomerang$CircleBack {
- HeavyBoomerang boomerang
- int thrownPos
- int returnPos
- int returnDepth
- int returnBranch
- int left
- {static} String BOOMERANG
- {static} String THROWN_POS
- {static} String RETURN_POS
- {static} String RETURN_DEPTH
- {static} String RETURN_BRANCH
+ void setup(HeavyBoomerang,int,int,int,int)
+ int returnPos()
+ MissileWeapon cancel()
+ int activeDepth()
+ boolean act()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.DangerIndicator {
+ {static} int COLOR
- BitmapText number
- Image icon
- int enemyIndex
- int lastNumber
+ {static} int HEIGHT
+ GameAction keyAction()
# void createChildren()
# void layout()
- void placeNumber()
+ void update()
# void onClick()
# String hoverText()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.SmokeScreen {
+ void use(BlobEmitter)
+ String tileDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.FishingSpear {
+ int proc(Char,Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.effects.particles.ShaftParticle {
+ {static} Emitter.Factory FACTORY
- float offs
+ void reset(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.plants.Blindweed {
+ void activate(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Blindweed$Seed {
}
class com.shatteredpixel.shatteredpixeldungeon.levels.painters.PrisonPainter {
# void decorate(Level,ArrayList<Room>)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.ThrowingStone {
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndChooseAbility {
- {static} int WIDTH
- {static} float GAP
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RipperDemon {
- {static} String LAST_ENEMY_POS
- {static} String LEAP_POS
- {static} String LEAP_CD
- int lastEnemyPos
- int leapPos
- float leapCooldown
+ float spawningWeight()
+ int damageRoll()
+ int attackSkill(Char)
+ float attackDelay()
+ int drRoll()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
# boolean act()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RipperDemon$Hunting {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Doom {
+ void fx(boolean)
+ int icon()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Friendly {
- {static} ItemSprite.Glowing BLACK
+ int proc(Weapon,Char,Char,int)
+ boolean curse()
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.FloatingText {
- {static} float LIFESPAN
- {static} float DISTANCE
+ {static} int ICON_SIZE
+ {static} TextureFilm iconFilm
+ {static} int NO_ICON
+ {static} int PHYS_DMG
+ {static} int PHYS_DMG_NO_BLOCK
+ {static} int MAGIC_DMG
+ {static} int PICK_DMG
+ {static} int HUNGER
+ {static} int BURNING
+ {static} int SHOCKING
+ {static} int FROST
+ {static} int WATER
+ {static} int BLEEDING
+ {static} int TOXIC
+ {static} int CORROSION
+ {static} int POISON
+ {static} int OOZE
+ {static} int DEFERRED
+ {static} int CORRUPTION
+ {static} int AMULET
+ {static} int HEALING
+ {static} int SHIELDING
+ {static} int EXPERIENCE
+ {static} int STRENGTH
+ {static} int GOLD
+ {static} int ENERGY
- Image icon
- boolean iconLeft
- float timeLeft
- int key
- {static} SparseArray<ArrayList<FloatingText>> stacks
+ void update()
# void layout()
+ float width()
+ void kill()
+ void destroy()
+ void reset(float,float,String,int,int,boolean)
+ {static} void show(float,float,String,int)
+ {static} void show(float,float,int,String,int)
+ {static} void show(float,float,int,String,int,int,boolean)
- {static} void push(FloatingText,int)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.RatSprite {
}
class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfTeleportation {
+ void doRead()
+ {static} boolean teleportToLocation(Char,int)
+ {static} boolean teleportChar(Char)
+ {static} boolean teleportChar(Char,Class)
+ {static} boolean teleportPreferringUnseen(Hero)
- {static} boolean teleportInNonRegularLevel(Char,boolean)
+ {static} void appear(Char,int)
+ {static} void appearVFX(Char)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.bags.VelvetPouch {
+ boolean canHold(Item)
+ int capacity()
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretArtilleryRoom {
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.ImpShopRoom {
- boolean impSpawned
- {static} String IMP
- {static} String ITEMS
+ int minWidth()
+ int minHeight()
+ int maxWidth()
+ int maxHeight()
+ int maxConnections(int)
+ void paint(Level)
# void placeShopkeeper(Level)
+ Door entrance()
+ void spawnShop(Level)
+ boolean shopSpawned()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void onLevelLoad(Level)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Speed {
+ {static} float DURATION
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.RatKingRoom {
+ boolean canConnect(Room)
+ int maxHeight()
+ int maxWidth()
+ void paint(Level)
- {static} void addChest(Level,int,int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfPurity {
- {static} int DISTANCE
- {static} ArrayList<Class> affectedBlobs
+ void shatter(int)
+ void apply(Hero)
+ int value()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndQuickBag {
- {static} Item bag
+ {static} Comparator<Item> quickBagComparator
+ void hide()
}


class com.shatteredpixel.shatteredpixeldungeon.ui.buttons.StyledButton {
# NinePatch bg
# RenderedTextBlock text
# Image icon
+ boolean leftJustify
+ boolean multiline
# void layout()
# void onPointerDown()
# void onPointerUp()
+ void enable(boolean)
+ void text(String)
+ String text()
+ void textColor(int)
+ void icon(Image)
+ Image icon()
+ void alpha(float)
+ float reqWidth()
+ float reqHeight()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndTradeItem {
- {static} float GAP
- {static} int BTN_HEIGHT
- WndBag owner
- boolean selling
+ void hide()
+ {static} void sell(Item)
+ {static} void sell(Item,Shopkeeper)
+ {static} void sellOne(Item)
+ {static} void sellOne(Item,Shopkeeper)
- void buy(Heap)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.BusyIndicator {
+ void update()
}

class com.shatteredpixel.shatteredpixeldungeon.effects.Fireball {
- {static} RectF BLIGHT
- {static} RectF FLIGHT
- {static} RectF FLAME1
- {static} RectF FLAME2
- {static} int COLOR
- Image bLight
- Image fLight
- Emitter emitter
- Group sparks
# void createChildren()
# void layout()
+ void update()
+ void draw()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.Fireball$Flame {
- {static} float LIFESPAN
- {static} float SPEED
- {static} float ACC
- float timeLeft
- float heightLimit
+ void reset()
+ void heightLimit(float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.SewerBossExitRoom {
+ int minWidth()
+ int minHeight()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.SewerBossExitRoom$SewerExit {
- {static} int[] layout
+ Tilemap create()
+ Image image(int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.SewerBossExitRoom$SewerExitOverhang {
- {static} int[] layout
+ Tilemap create()
+ Image image(int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfCorruption {
- {static} float MINOR_DEBUFF_WEAKEN
- {static} HashMap<Class<? extends Buff>,Float> MINOR_DEBUFFS
- {static} float MAJOR_DEBUFF_WEAKEN
- {static} HashMap<Class<? extends Buff>,Float> MAJOR_DEBUFFS
+ void onZap(Ballistica)
- void debuffEnemy(Mob,HashMap<Class<? extends Buff>,Float>)
- void corruptEnemy(Mob)
+ void onHit(MagesStaff,Char,Char,int)
+ void fx(Ballistica,Callback)
+ void staffFx(MagesStaff.StaffParticle)
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.StartScene {
- {static} int SLOT_WIDTH
- {static} int SLOT_HEIGHT
+ void create()
# void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.StartScene$SaveSlotButton {
- NinePatch bg
- Image hero
- RenderedTextBlock name
- Image steps
- BitmapText depth
- Image classIcon
- BitmapText level
- int slot
- boolean newGame
# void createChildren()
+ void set(int)
# void layout()
# void onClick()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.EnhancedRings {
+ boolean attachTo(Char)
+ void detach()
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}

abstract class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardBridgeRoom {
# Rect spaceRect
# Rect bridgeRect
+ int minWidth()
+ int minHeight()
+ boolean canMerge(Level,Room,Point,int)
+ boolean canPlaceItem(Point,Level)
+ boolean canPlaceCharacter(Point,Level)
+ void paint(Level)
# {abstract}int maxBridgeWidth(int)
# {abstract}int spaceTile()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.CrystalChoiceRoom {
+ int minWidth()
+ int minHeight()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.RotDart {
+ int proc(Char,Char,int)
+ float durabilityPerUse()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.DisintegrationTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.painters.MiningLevelPainter {
- int goldToAdd
# int padding(Level)
+ RegularPainter setGold(int)
# void generateGold(Level,ArrayList<Room>)
# void paintDoors(Level,ArrayList<Room>)
# void decorate(Level,ArrayList<Room>)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.SpectralNecromancer {
- ArrayList<Integer> wraithIDs
- {static} String WRAITH_IDS
# boolean act()
+ void rollToDropLoot()
+ void die(Object)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void summonMinion()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Preparation {
- int turnsInvis
- {static} String TURNS
- CellSelector.Listener attack
+ boolean act()
+ void detach()
+ int attackLevel()
+ int damageRoll(Char)
+ boolean canKO(Char)
+ int icon()
+ void tintIcon(Image)
+ String desc()
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
+ String actionName()
+ int actionIcon()
+ Visual primaryVisual()
+ Visual secondaryVisual()
+ int indicatorColor()
+ void doAction()
}


enum com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AttackLevel {
+  LVL_1
+  LVL_2
+  LVL_3
+  LVL_4
~ int turnsReq
~ float baseDmgBonus
~ int damageRolls
- {static} float[][] KOThresholds
- {static} int[][] blinkRanges
+ float KOThreshold()
+ int blinkDistance()
+ boolean canKO(Char)
+ int damageRoll(Char)
+ {static} AttackLevel getLvl(int)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.UndeadSprite {
+ void die()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.ThiefSprite {
}
class com.shatteredpixel.shatteredpixeldungeon.items.Generator {
- {static} float[][] floorSetTierProbs
- {static} boolean usingFirstDeck
- {static} HashMap<Category,Float> defaultCatProbs
- {static} HashMap<Category,Float> categoryProbs
+ {static} Category[] wepTiers
+ {static} Category[] misTiers
- {static} String FIRST_DECK
- {static} String GENERAL_PROBS
- {static} String CATEGORY_PROBS
- {static} String CATEGORY_USING_PROBS2
- {static} String CATEGORY_SEED
- {static} String CATEGORY_DROPPED
+ {static} void fullReset()
+ {static} void generalReset()
+ {static} void reset(Category)
+ {static} void undoDrop(Item)
+ {static} void undoDrop(Class)
+ {static} Item random()
+ {static} Item randomUsingDefaults()
+ {static} Item random(Category)
+ {static} Item randomUsingDefaults(Category)
+ {static} Item random(Class<? extends Item>)
+ {static} Armor randomArmor()
+ {static} Armor randomArmor(int)
+ {static} MeleeWeapon randomWeapon()
+ {static} MeleeWeapon randomWeapon(int)
+ {static} MeleeWeapon randomWeapon(boolean)
+ {static} MeleeWeapon randomWeapon(int,boolean)
+ {static} MissileWeapon randomMissile()
+ {static} MissileWeapon randomMissile(int)
+ {static} MissileWeapon randomMissile(boolean)
+ {static} MissileWeapon randomMissile(int,boolean)
+ {static} Artifact randomArtifact()
+ {static} boolean removeArtifact(Class<? extends Artifact>)
+ {static} void storeInBundle(Bundle)
+ {static} void restoreFromBundle(Bundle)
}


enum com.shatteredpixel.shatteredpixeldungeon.items.Category {
+  TRINKET
+  WEAPON
+  WEP_T1
+  WEP_T2
+  WEP_T3
+  WEP_T4
+  WEP_T5
+  ARMOR
+  MISSILE
+  MIS_T1
+  MIS_T2
+  MIS_T3
+  MIS_T4
+  MIS_T5
+  WAND
+  RING
+  ARTIFACT
+  FOOD
+  POTION
+  SEED
+  SCROLL
+  STONE
+  GOLD
+ Class<?>[] classes
+ float[] probs
+ float[] defaultProbs
+ float[] defaultProbs2
+ boolean using2ndProbs
+ float[] defaultProbsTotal
+ Long seed
+ int dropped
+ float firstProb
+ float secondProb
+ Class<? extends Item> superClass
- {static} HashMap<Class,ArrayList<Class>> subOrderings
+ {static} int order(Item)
}


class com.shatteredpixel.shatteredpixeldungeon.items.quest.MetalShard {
+ boolean isUpgradable()
+ boolean isIdentified()
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Stench {
- {static} ItemSprite.Glowing BLACK
+ int proc(Armor,Char,Char,int)
+ ItemSprite.Glowing glowing()
+ boolean curse()
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.ClothArmor {
}
class com.shatteredpixel.shatteredpixeldungeon.items.Waterskin {
- {static} int MAX_VOLUME
- {static} String AC_DRINK
- {static} float TIME_TO_DRINK
- {static} String TXT_STATUS
- int volume
- {static} String VOLUME
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ String info()
+ void empty()
+ boolean isUpgradable()
+ boolean isIdentified()
+ boolean isFull()
+ void collectDew(Dewdrop)
+ void fill()
+ String status()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.items.keys.Key {
+ {static} float TIME_TO_UNLOCK
+ int depth
- {static} String DEPTH
+ boolean isSimilar(Item)
+ boolean doPickUp(Hero,int)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ boolean isUpgradable()
+ boolean isIdentified()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sai {
+ int max(int)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
+ {static} void comboStrikeAbility(Hero,Integer,float,int,MeleeWeapon)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sai$ComboStrikeTracker {
+ {static} int DURATION
- float comboTime
+ int hits
- {static} String TIME
+ {static} String RECENT_HITS
+ int icon()
+ boolean act()
+ void addHit()
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.particles.SparkParticle {
+ {static} Emitter.Factory FACTORY
+ {static} Emitter.Factory STATIC
+ void reset(float,float)
+ void resetStatic(float,float)
+ void resetAttracting(float,float,Visual)
+ void setMaxSize(float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.RingRoom {
+ int minWidth()
+ int minHeight()
+ float[] sizeCatProbs()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.ToxicGasRoom {
+ int minWidth()
+ int minHeight()
+ void paint(Level)
+ boolean canPlaceCharacter(Point,Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.ToxicGasRoom$ToxicGasSeed {
# void evolve()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.ToxicGasRoom$ToxicVent {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.items.spells.UnstableSpell {
- {static} HashMap<Class<? extends Scroll>,Float> scrollChances
- {static} HashSet<Class<? extends Scroll>> nonCombatScrolls
- {static} HashSet<Class<? extends Scroll>> combatScrolls
# void onCast(Hero)
+ int value()
+ int energyVal()
}


class com.shatteredpixel.shatteredpixeldungeon.items.spells.UnstableSpell$Recipe {
+ boolean testIngredients(ArrayList<Item>)
+ int cost(ArrayList<Item>)
+ Item brew(ArrayList<Item>)
+ Item sampleOutput(ArrayList<Item>)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.ChasmExitRoom {
+ int minHeight()
+ int minWidth()
+ float[] sizeCatProbs()
+ boolean isExit()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.effects.particles.ChallengeParticle {
+ {static} Emitter.Factory FACTORY
+ void reset(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.items.food.Pasty {
+ void reset()
# void eatSFX()
# void satisfy(Hero)
+ String name()
+ String info()
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.food.Pasty$FishLeftover {
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Barrier {
~ float partialLostShield
- {static} String PARTIAL_LOST_SHIELD
+ void incShield(int)
+ void setShield(int)
+ boolean act()
+ void fx(boolean)
+ int icon()
+ void tintIcon(Image)
+ String iconTextDisplay()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfFrost {
+ int min(int)
+ int max(int)
+ void onZap(Ballistica)
+ void fx(Ballistica,Callback)
+ void onHit(MagesStaff,Char,Char,int)
+ void staffFx(MagesStaff.StaffParticle)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.SewerPipeRoom {
- Point[] corners
+ int minWidth()
+ int minHeight()
+ float[] sizeCatProbs()
+ boolean canMerge(Level,Room,Point,int)
+ boolean canConnect(Point)
+ void paint(Level)
# Rect getConnectionSpace()
+ boolean canPlaceWater(Point)
# Point getDoorCenter()
- int spaceBetween(int,int)
- int distanceBetweenPoints(Point,Point)
- void fillBetweenPoints(Level,Point,Point,int)
}


class com.shatteredpixel.shatteredpixeldungeon.messages.Messages {
- {static} ArrayList<I18NBundle> bundles
- {static} Languages lang
- {static} Locale locale
+ {static} String NO_TEXT_FOUND
- {static} String[] prop_files
- {static} HashMap<String,DecimalFormat> formatters
- {static} HashSet<String> noCaps
+ {static} Languages lang()
+ {static} Locale locale()
+ {static} void setup(Languages)
+ {static} String get(String,Object)
+ {static} String get(Object,String,Object)
+ {static} String get(Class,String,Object)
- {static} String getFromBundle(String)
+ {static} String format(String,Object)
+ {static} String decimalFormat(String,double)
+ {static} String capitalize(String)
+ {static} String titleCase(String)
+ {static} String upperCase(String)
+ {static} String lowerCase(String)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Momentum {
- int momentumStacks
- int freerunTurns
- int freerunCooldown
- boolean movedLastTurn
- {static} String STACKS
- {static} String FREERUN_TURNS
- {static} String FREERUN_CD
+ void detach()
+ boolean act()
+ void gainStack()
+ boolean freerunning()
+ float speedMultiplier()
+ int evasionBonus(int,int)
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String name()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ String actionName()
+ int actionIcon()
+ Visual secondaryVisual()
+ int indicatorColor()
+ void doAction()
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfRecharging {
+ void doRead()
+ {static} void charge(Char)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.effects.particles.RainbowParticle {
+ {static} Emitter.Factory BURST
+ void reset(float,float)
+ void resetBurst(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfToxicGas {
+ void shatter(int)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.CircleBasinExitRoom {
+ float[] sizeCatProbs()
+ boolean isExit()
+ void paint(Level)
+ boolean connect(Room)
}

class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfTerror {
+ void doRead()
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndHero {
- {static} int WIDTH
- {static} int HEIGHT
- StatsTab stats
- TalentsTab talents
- BuffsTab buffs
+ {static} int lastIdx
+ void offset(int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndHero$StatsTab {
- {static} int GAP
- float pos
+ void initialize()
- void statSlot(String,String)
- void statSlot(String,int)
+ float height()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndHero$TalentsTab {
~ TalentsPane pane
# void createChildren()
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndHero$BuffsTab {
- {static} int GAP
- float pos
- ScrollPane buffList
- ArrayList<BuffSlot> slots
# void createChildren()
# void layout()
- void setupList()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndHero$BuffsTab$BuffSlot {
- Buff buff
~ Image icon
~ RenderedTextBlock txt
# void layout()
# boolean onClick(float,float)
}


class com.shatteredpixel.shatteredpixeldungeon.items.keys.SkeletonKey {
+ boolean doPickUp(Hero,int)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Succubus {
- int blinkCooldown
- {static} String BLINK_CD
+ int damageRoll()
+ int attackProc(Char,int)
# boolean getCloser(int)
- boolean blink(int)
+ int attackSkill(Char)
+ int drRoll()
+ Item createLoot()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretHoardRoom {
+ void paint(Level)
+ boolean canPlaceTrap(Point)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.ThinPillarsGooRoom {
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Albino {
+ int attackProc(Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndBadge {
- {static} int MAX_WIDTH
- {static} int MARGIN
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoCell {
- {static} float GAP
- {static} int WIDTH
+ {static} Image cellImage(int)
+ {static} String cellName(int)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.ToxicGas {
# void evolve()
+ void use(BlobEmitter)
+ String tileDesc()
+ void onDeath()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Displacing {
- {static} ItemSprite.Glowing BLACK
+ int proc(Weapon,Char,Char,int)
+ boolean curse()
+ ItemSprite.Glowing glowing()
}


enum com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroSubClass {
+  NONE
+  BERSERKER
+  GLADIATOR
+  BATTLEMAGE
+  WARLOCK
+  ASSASSIN
+  FREERUNNER
+  SNIPER
+  WARDEN
+  CHAMPION
+  MONK
~ int icon
+ String title()
+ String shortDesc()
+ String desc()
+ int icon()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MineEntrance {
+ float[] sizeCatProbs()
+ int minWidth()
+ int minHeight()
+ boolean isEntrance()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MineEntrance$QuestExit {
~ int TEX_WIDTH
+ Tilemap create()
+ String name(int,int)
+ String desc(int,int)
+ Image image(int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag {
+ {static} String AC_OPEN
+ Char owner
+ ArrayList<Item> items
- {static} String ITEMS
- boolean loading
+ int capacity()
+ void execute(Hero,String)
+ boolean collect(Bag)
+ void onDetach()
+ void grabItems()
+ void grabItems(Bag)
+ boolean isUpgradable()
+ boolean isIdentified()
+ void clear()
+ void resurrect()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ boolean contains(Item)
+ boolean canHold(Item)
+ Iterator<Item> iterator()
}


class com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag$ItemIterator {
- int index
- Iterator<Item> nested
+ boolean hasNext()
+ Item next()
+ void remove()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.DiscardedItemSprite {
+ void drop()
+ void update()
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoArmorAbility {
}
class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StudyRoom {
+ int minWidth()
+ int minHeight()
+ float[] sizeCatProbs()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndHardNotification {
~ RedButton btnOkay
- double timeLeft
- String btnMessage
~ float incTime
+ void update()
+ void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking {
- {static} int WIDTH
- {static} int HEIGHT
- {static} WndRanking INSTANCE
- String gameID
- Rankings.Record record
+ void destroy()
- void createControls()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$RankingTab {
- Group page
# void select(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$StatsTab {
- int GAP
- float statSlot(Group,String,String,float)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$TalentsTab {
}
class com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$ItemsTab {
- float pos
- void addItem(Item)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$BadgesTab {
}
class com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$ChallengesTab {
}
class com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$ItemButton {
+ {static} int HEIGHT
- Item item
- ItemSlot slot
- ColorBlock bg
- RenderedTextBlock name
# void createChildren()
# void layout()
# void onPointerDown()
# void onPointerUp()
# void onClick()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$QuickSlotButton {
- Item item
- ColorBlock bg
# void createChildren()
# void layout()
# void onPointerDown()
# void onPointerUp()
# void onClick()
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.PlateArmor {
}
class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfPrismaticLight {
+ int min(int)
+ int max(int)
+ void onZap(Ballistica)
- void affectTarget(Char)
- void affectMap(Ballistica)
+ void fx(Ballistica,Callback)
+ void onHit(MagesStaff,Char,Char,int)
+ void staffFx(MagesStaff.StaffParticle)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.FrostTrap {
+ void activate()
}

enum com.shatteredpixel.shatteredpixeldungeon.journal.Document {
+  ADVENTURERS_GUIDE
+  ALCHEMY_GUIDE
+  INTROS
+  SEWERS_GUARD
+  PRISON_WARDEN
+  CAVES_EXPLORER
+  CITY_WARLOCK
+  HALLS_KING
+ {static} int NOT_FOUND
+ {static} int FOUND
+ {static} int READ
- LinkedHashMap<String,Integer> pagesStates
- int pageSprite
- Icons pageIcon
- boolean loreDocument
+ {static} String GUIDE_INTRO
+ {static} String GUIDE_EXAMINING
+ {static} String GUIDE_SURPRISE_ATKS
+ {static} String GUIDE_IDING
+ {static} String GUIDE_FOOD
+ {static} String GUIDE_ALCHEMY
+ {static} String GUIDE_DIEING
+ {static} String GUIDE_SEARCHING
- {static} String DOCUMENTS
+ boolean findPage(String)
+ boolean findPage(int)
+ boolean deletePage(String)
+ boolean deletePage(int)
+ boolean isPageFound(String)
+ boolean isPageFound(int)
+ boolean anyPagesFound()
+ boolean allPagesFound()
+ boolean readPage(String)
+ boolean readPage(int)
+ boolean isPageRead(String)
+ boolean isPageRead(int)
+ Collection<String> pageNames()
+ int pageIdx(String)
+ Image pageSprite()
+ Image pageSprite(String)
+ boolean isLoreDoc()
+ String title()
+ String pageTitle(String)
+ String pageTitle(int)
+ String pageBody(String)
+ String pageBody(int)
+ {static} void store(Bundle)
+ {static} void restore(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.bombs.ShrapnelBomb {
+ boolean explodesDestructively()
+ void explode(int)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.ui.Tooltip {
- {static} float tooltipAlpha
- {static} float lastUsedTime
- Component parent
- RectF parentDims
- NinePatch bg
- RenderedTextBlock text
+ {static} void resetLastUsedTime()
# void createChildren()
+ void update()
# void layout()
}


enum com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroClass {
+  WARRIOR
+  MAGE
+  ROGUE
+  HUNTRESS
+  DUELIST
- HeroSubClass[] subClasses
+ void initHero(Hero)
+ Badges.Badge masteryBadge()
- {static} void initWarrior(Hero)
- {static} void initMage(Hero)
- {static} void initRogue(Hero)
- {static} void initHuntress(Hero)
- {static} void initDuelist(Hero)
+ String title()
+ String desc()
+ String shortDesc()
+ HeroSubClass[] subClasses()
+ ArmorAbility[] armorAbilities()
+ String spritesheet()
+ String splashArt()
+ boolean isUnlocked()
+ String unlockMsg()
}


class com.shatteredpixel.shatteredpixeldungeon.items.remains.CloakScrap {
# void doEffect(Hero)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Fire {
# void evolve()
+ {static} void burn(int)
+ void use(BlobEmitter)
+ String tileDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.ChillingDart {
+ int proc(Char,Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.PrismaticGuard {
- float HP
- {static} String HEALTH
+ boolean act()
+ void set(int)
+ int maxHP()
+ {static} int maxHP(Hero)
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Overgrowth {
- {static} ItemSprite.Glowing BLACK
+ int proc(Armor,Char,Char,int)
+ ItemSprite.Glowing glowing()
+ boolean curse()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Scimitar {
+ int max(int)
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Scimitar$SwordDance {
+ int icon()
+ float iconFadePercent()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Lucky {
- {static} ItemSprite.Glowing GREEN
+ int proc(Weapon,Char,Char,int)
+ {static} Item genLoot()
+ {static} void showFlare(Visual)
+ Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Lucky$LuckProc {
- int ringLevel
+ boolean act()
+ Item genLoot()
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Repulsion {
- {static} ItemSprite.Glowing WHITE
+ int proc(Armor,Char,Char,int)
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.traps.WornDartTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfShock {
# void activate(int)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.LastLevel {
- {static} int ROOM_TOP
- {static} int WIDTH
- {static} int MID
+ {static} int AMULET_POS
+ void playLevelMusic()
+ String tilesTex()
+ String waterTex()
+ void create()
# boolean build()
+ Mob createMob()
# void createMobs()
+ Actor addRespawner()
# void createItems()
+ int randomRespawnCell(Char)
+ String tileName(int)
+ String tileDesc(int)
+ Group addVisuals()
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.LastLevel$CustomFloor {
- {static} int[] CANDLES
+ Tilemap create()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.LastLevel$CenterPieceVisuals {
- {static} int[] map
+ Tilemap create()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.LastLevel$CenterPieceWalls {
- {static} int[] map
+ Tilemap create()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Longsword {
# int baseChargeUse(Hero,Char)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.ui.InventoryPane {
- NinePatch bg
- NinePatch bg2
- PointerArea blocker
- Signal.Listener<KeyEvent> keyBlocker
- {static} InventoryPane instance
- ArrayList<InventorySlot> equipped
- ArrayList<InventorySlot> bagItems
- Image gold
- BitmapText goldTxt
- Image energy
- BitmapText energyTxt
- RenderedTextBlock promptTxt
- ArrayList<BagButton> bags
+ {static} int WIDTH
+ {static} int HEIGHT
- {static} int SLOT_WIDTH
- {static} int SLOT_HEIGHT
- WndBag.ItemSelector selector
+ {static} Bag lastBag
- boolean lastEnabled
- {static} Image crossB
- {static} Image crossM
- {static} boolean targeting
- {static} InventorySlot targetingSlot
+ {static} Char lastTarget
+ void destroy()
# void createChildren()
# void layout()
+ void alpha(float)
+ {static} void refresh()
+ void updateInventory()
+ void setSelector(WndBag.ItemSelector)
+ boolean isSelecting()
+ {static} void clearTargetingSlot()
+ {static} void useTargeting()
+ {static} void cancelTargeting()
+ void update()
- Image bagIcon(Bag)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.InventoryPane$InventoryPaneSlot {
# void onClick()
# boolean onLongClick()
# void onMiddleClick()
# void onRightClick()
}

class com.shatteredpixel.shatteredpixeldungeon.ui.InventoryPane$BagButton {
- {static} int ACTIVE
- {static} int INACTIVE
- ColorBlock bgTop
- ColorBlock bgBottom
- Bag bag
- int index
+ void bag(Bag)
# void createChildren()
# void layout()
+ void alpha(float)
# void onClick()
+ GameAction keyAction()
+ GameAction secondaryTooltipAction()
# String hoverText()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Grim {
- {static} ItemSprite.Glowing BLACK
+ int proc(Weapon,Char,Char,int)
+ Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Grim$GrimTracker {
+ float maxChance
+ boolean qualifiesForBadge
+ boolean act()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Rapier {
+ int max(int)
+ int defenseFactor(Char)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
+ {static} void lungeAbility(Hero,Integer,float,int,MeleeWeapon)
}

class com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon {
+ {static} int v1_2_3
+ {static} int v1_4_3
+ {static} int v2_0_2
+ {static} int v2_1_4
+ {static} int v2_2_1
+ {static} int v2_3_2
+ {static} int v2_4_0
+ void create()
+ void finish()
+ {static} void switchNoFade(Class<? extends PixelScene>)
+ {static} void switchNoFade(Class<? extends PixelScene>,SceneChangeCallback)
+ {static} void seamlessResetScene(SceneChangeCallback)
+ {static} void seamlessResetScene()
# void switchScene()
+ void resize(int,int)
+ void destroy()
+ void updateDisplaySize()
+ {static} void updateSystemUI()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollTrickster {
- int combo
- {static} String COMBO
+ int attackSkill(Char)
# boolean canAttack(Char)
+ int attackProc(Char,int)
# boolean getCloser(int)
+ void aggro(Char)
+ Item createLoot()
+ void die(Object)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollTrickster$Wandering {
# int randomDestination()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM100 {
- {static} float TIME_TO_ZAP
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
# boolean canAttack(Char)
# boolean doAttack(Char)
+ void call()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM100$LightningBolt {
}
class com.shatteredpixel.shatteredpixeldungeon.levels.traps.RockfallTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfSnapFreeze {
+ void shatter(int)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.HallwayRoom {
+ int minWidth()
+ int minHeight()
+ boolean canMerge(Level,Room,Point,int)
+ void merge(Level,Room,Rect,int)
+ void paint(Level)
# Rect getConnectionSpace()
# Point getDoorCenter()
}

class com.shatteredpixel.shatteredpixeldungeon.effects.DarkBlock {
- CharSprite target
+ void update()
+ void lighten()
+ {static} DarkBlock darken(CharSprite)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.EbonyMimic {
+ String name()
+ String description()
+ void stopHiding()
+ int damageRoll()
+ void setLevel(int)
# void generatePrize(boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Statue {
# Weapon weapon
+ boolean levelGenStatue
- {static} String WEAPON
+ void createWeapon(boolean)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
# boolean act()
+ int damageRoll()
+ int attackSkill(Char)
+ float attackDelay()
# boolean canAttack(Char)
+ int drRoll()
+ boolean add(Buff)
+ void damage(int,Object)
+ int attackProc(Char,int)
+ void beckon(int)
+ void die(Object)
+ void destroy()
+ float spawningWeight()
+ boolean reset()
+ String description()
+ {static} Statue random()
+ {static} Statue random(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.Swap {
- Char ch1
- Char ch2
- Effect eff1
- Effect eff2
- float delay
# boolean act()
- void finish(Effect)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.Swap$Effect {
- CharSprite sprite
- PointF end
- float passed
+ void update()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.GooBossRoom {
+ float[] sizeCatProbs()
+ boolean canMerge(Level,Room,Point,int)
+ {static} GooBossRoom randomGooRoom()
# void setupGooNest(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.GooBossRoom$GooNest {
+ Tilemap create()
+ Image image(int,int)
}

class com.shatteredpixel.shatteredpixeldungeon.Assets {
}
class com.shatteredpixel.shatteredpixeldungeon.Assets$Effects {
+ {static} String EFFECTS
+ {static} String FIREBALL
+ {static} String SPECKS
+ {static} String SPELL_ICONS
+ {static} String TEXT_ICONS
}

class com.shatteredpixel.shatteredpixeldungeon.Assets$Environment {
+ {static} String TERRAIN_FEATURES
+ {static} String VISUAL_GRID
+ {static} String WALL_BLOCKING
+ {static} String TILES_SEWERS
+ {static} String TILES_PRISON
+ {static} String TILES_CAVES
+ {static} String TILES_CITY
+ {static} String TILES_HALLS
+ {static} String TILES_CAVES_CRYSTAL
+ {static} String TILES_CAVES_GNOLL
+ {static} String WATER_SEWERS
+ {static} String WATER_PRISON
+ {static} String WATER_CAVES
+ {static} String WATER_CITY
+ {static} String WATER_HALLS
+ {static} String WEAK_FLOOR
+ {static} String SEWER_BOSS
+ {static} String PRISON_QUEST
+ {static} String PRISON_EXIT
+ {static} String CAVES_QUEST
+ {static} String CAVES_BOSS
+ {static} String CITY_BOSS
+ {static} String HALLS_SP
}

class com.shatteredpixel.shatteredpixeldungeon.Assets$Fonts {
+ {static} String PIXELFONT
}

class com.shatteredpixel.shatteredpixeldungeon.Assets$Interfaces {
+ {static} String ARCS_BG
+ {static} String ARCS_FG
+ {static} String BANNERS
+ {static} String BADGES
+ {static} String LOCKED
+ {static} String CHROME
+ {static} String ICONS
+ {static} String STATUS
+ {static} String MENU
+ {static} String MENU_BTN
+ {static} String TOOLBAR
+ {static} String SHADOW
+ {static} String BOSSHP
+ {static} String SURFACE
+ {static} String LOADING_SEWERS
+ {static} String LOADING_PRISON
+ {static} String LOADING_CAVES
+ {static} String LOADING_CITY
+ {static} String LOADING_HALLS
+ {static} String BUFFS_SMALL
+ {static} String BUFFS_LARGE
+ {static} String TALENT_ICONS
+ {static} String TALENT_BUTTON
+ {static} String HERO_ICONS
+ {static} String RADIAL_MENU
}

class com.shatteredpixel.shatteredpixeldungeon.Assets$Messages {
+ {static} String ACTORS
+ {static} String ITEMS
+ {static} String JOURNAL
+ {static} String LEVELS
+ {static} String MISC
+ {static} String PLANTS
+ {static} String SCENES
+ {static} String UI
+ {static} String WINDOWS
}

class com.shatteredpixel.shatteredpixeldungeon.Assets$Music {
+ {static} String THEME_1
+ {static} String THEME_2
+ {static} String THEME_FINALE
+ {static} String SEWERS_1
+ {static} String SEWERS_2
+ {static} String SEWERS_3
+ {static} String SEWERS_TENSE
+ {static} String SEWERS_BOSS
+ {static} String PRISON_1
+ {static} String PRISON_2
+ {static} String PRISON_3
+ {static} String PRISON_TENSE
+ {static} String PRISON_BOSS
+ {static} String CAVES_1
+ {static} String CAVES_2
+ {static} String CAVES_3
+ {static} String CAVES_TENSE
+ {static} String CAVES_BOSS
+ {static} String CAVES_BOSS_FINALE
+ {static} String CITY_1
+ {static} String CITY_2
+ {static} String CITY_3
+ {static} String CITY_TENSE
+ {static} String CITY_BOSS
+ {static} String CITY_BOSS_FINALE
+ {static} String HALLS_1
+ {static} String HALLS_2
+ {static} String HALLS_3
+ {static} String HALLS_TENSE
+ {static} String HALLS_BOSS
+ {static} String HALLS_BOSS_FINALE
}

class com.shatteredpixel.shatteredpixeldungeon.Assets$Sounds {
+ {static} String CLICK
+ {static} String BADGE
+ {static} String GOLD
+ {static} String OPEN
+ {static} String UNLOCK
+ {static} String ITEM
+ {static} String DEWDROP
+ {static} String STEP
+ {static} String WATER
+ {static} String GRASS
+ {static} String TRAMPLE
+ {static} String STURDY
+ {static} String HIT
+ {static} String MISS
+ {static} String HIT_SLASH
+ {static} String HIT_STAB
+ {static} String HIT_CRUSH
+ {static} String HIT_MAGIC
+ {static} String HIT_STRONG
+ {static} String HIT_PARRY
+ {static} String HIT_ARROW
+ {static} String ATK_SPIRITBOW
+ {static} String ATK_CROSSBOW
+ {static} String HEALTH_WARN
+ {static} String HEALTH_CRITICAL
+ {static} String DESCEND
+ {static} String EAT
+ {static} String READ
+ {static} String LULLABY
+ {static} String DRINK
+ {static} String SHATTER
+ {static} String ZAP
+ {static} String LIGHTNING
+ {static} String LEVELUP
+ {static} String DEATH
+ {static} String CHALLENGE
+ {static} String CURSED
+ {static} String TRAP
+ {static} String EVOKE
+ {static} String TOMB
+ {static} String ALERT
+ {static} String MELD
+ {static} String BOSS
+ {static} String BLAST
+ {static} String PLANT
+ {static} String RAY
+ {static} String BEACON
+ {static} String TELEPORT
+ {static} String CHARMS
+ {static} String MASTERY
+ {static} String PUFF
+ {static} String ROCKS
+ {static} String BURNING
+ {static} String FALLING
+ {static} String GHOST
+ {static} String SECRET
+ {static} String BONES
+ {static} String BEE
+ {static} String DEGRADE
+ {static} String MIMIC
+ {static} String DEBUFF
+ {static} String CHARGEUP
+ {static} String GAS
+ {static} String CHAINS
+ {static} String SCAN
+ {static} String SHEEP
+ {static} String MINE
+ {static} String[] all
}

class com.shatteredpixel.shatteredpixeldungeon.Assets$Splashes {
+ {static} String WARRIOR
+ {static} String MAGE
+ {static} String ROGUE
+ {static} String HUNTRESS
+ {static} String DUELIST
}

class com.shatteredpixel.shatteredpixeldungeon.Assets$Sprites {
+ {static} String ITEMS
+ {static} String ITEM_ICONS
+ {static} String WARRIOR
+ {static} String MAGE
+ {static} String ROGUE
+ {static} String HUNTRESS
+ {static} String DUELIST
+ {static} String AVATARS
+ {static} String PET
+ {static} String AMULET
+ {static} String RAT
+ {static} String BRUTE
+ {static} String SPINNER
+ {static} String DM300
+ {static} String WRAITH
+ {static} String UNDEAD
+ {static} String KING
+ {static} String PIRANHA
+ {static} String EYE
+ {static} String GNOLL
+ {static} String CRAB
+ {static} String GOO
+ {static} String SWARM
+ {static} String SKELETON
+ {static} String SHAMAN
+ {static} String THIEF
+ {static} String TENGU
+ {static} String SHEEP
+ {static} String KEEPER
+ {static} String BAT
+ {static} String ELEMENTAL
+ {static} String MONK
+ {static} String WARLOCK
+ {static} String GOLEM
+ {static} String STATUE
+ {static} String SUCCUBUS
+ {static} String SCORPIO
+ {static} String FISTS
+ {static} String YOG
+ {static} String LARVA
+ {static} String GHOST
+ {static} String MAKER
+ {static} String TROLL
+ {static} String IMP
+ {static} String RATKING
+ {static} String BEE
+ {static} String MIMIC
+ {static} String ROT_LASH
+ {static} String ROT_HEART
+ {static} String GUARD
+ {static} String WARDS
+ {static} String GUARDIAN
+ {static} String SLIME
+ {static} String SNAKE
+ {static} String NECRO
+ {static} String GHOUL
+ {static} String RIPPER
+ {static} String SPAWNER
+ {static} String DM100
+ {static} String PYLON
+ {static} String DM200
+ {static} String LOTUS
+ {static} String NINJA_LOG
+ {static} String SPIRIT_HAWK
+ {static} String RED_SENTRY
+ {static} String CRYSTAL_WISP
+ {static} String CRYSTAL_GUARDIAN
+ {static} String CRYSTAL_SPIRE
+ {static} String GNOLL_GUARD
+ {static} String GNOLL_SAPPER
+ {static} String GNOLL_GEOMANCER
+ {static} String FUNGAL_SPINNER
+ {static} String FUNGAL_SENTRY
+ {static} String FUNGAL_CORE
}

class com.shatteredpixel.shatteredpixeldungeon.scenes.WelcomeScene {
- {static} int LATEST_UPDATE
- {static} boolean triedCleaningTemp
+ void create()
- void placeTorch(float,float)
- void updateVersion(int)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.traps.TeleportationTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.ui.GameLog {
- {static} int MAX_LINES
- {static} Pattern PUNCTUATION
- RenderedTextBlock lastEntry
- int lastColor
- {static} ArrayList<Entry> entries
- {static} ArrayList<String> textsToAdd
+ void update()
- void recreateLines()
+ void newLine()
+ boolean onSignal(String)
# void layout()
+ {static} void wipe()
}


class com.shatteredpixel.shatteredpixeldungeon.ui.GameLog$Entry {
+ String text
+ int color
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.SkeletonSprite {
+ void die()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.builders.LoopBuilder {
- int curveExponent
- float curveIntensity
- float curveOffset
- PointF loopCenter
+ LoopBuilder setLoopShape(int,float,float)
- float targetAngle(float)
- double curveEquation(double)
+ ArrayList<Room> build(ArrayList<Room>)
# float randomBranchAngle(Room)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Bleeding {
# float level
- Class source
- {static} String LEVEL
- {static} String SOURCE
+ float level()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void set(float)
+ void set(float,Class)
+ int icon()
+ String iconTextDisplay()
+ boolean act()
+ String desc()
}


class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfEnergy {
+ String statsInfo()
# RingBuff buff()
+ {static} float wandChargeMultiplier(Char)
+ {static} float artifactChargeMultiplier(Char)
+ {static} float armorChargeMultiplier(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfEnergy$Energy {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM201 {
- boolean threatened
+ int damageRoll()
+ void damage(int,Object)
+ void onZapComplete()
- void zap()
# boolean canVent(int)
# boolean getCloser(int)
# boolean getFurther(int)
+ void rollToDropLoot()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM201$Hunting {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth {
+ int min(int)
+ int max(int)
+ void onZap(Ballistica)
+ void fx(Ballistica,Callback)
+ void onHit(MagesStaff,Char,Char,int)
+ void staffFx(MagesStaff.StaffParticle)
}

class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth$RockArmor {
- int wandLevel
- int armor
- {static} String WAND_LEVEL
- {static} String ARMOR
- void addArmor(int,int)
- int armorToGuardian()
+ int absorb(int)
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth$EarthGuardian {
- int wandLevel
- {static} String DEFENSE
- {static} String WAND_LEVEL
+ void setInfo(Hero,int,int)
+ int attackSkill(Char)
+ int attackProc(Char,int)
+ int damageRoll()
+ int drRoll()
+ String description()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth$EarthGuardian$Wandering {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.GuardSprite {
+ void play(Animation)
}

class com.shatteredpixel.shatteredpixeldungeon.items.bags.MagicalHolster {
+ {static} float HOLSTER_SCALE_FACTOR
+ {static} float HOLSTER_DURABILITY_FACTOR
+ boolean canHold(Item)
+ int capacity()
+ boolean collect(Bag)
+ void onDetach()
+ int value()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StripedRoom {
+ float[] sizeCatProbs()
+ void merge(Level,Room,Rect,int)
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesLevel {
+ {static} String[] CAVES_TRACK_LIST
+ {static} float[] CAVES_TRACK_CHANCES
+ void playLevelMusic()
# ArrayList<Room> initRooms()
# int standardRooms(boolean)
# int specialRooms(boolean)
# Painter painter()
+ boolean activateTransition(Hero,LevelTransition)
+ String tilesTex()
+ String waterTex()
# Class<?>[] trapClasses()
# float[] trapChances()
+ String tileName(int)
+ String tileDesc(int)
+ Group addVisuals()
+ {static} void addCavesVisuals(Level,Group)
+ {static} void addCavesVisuals(Level,Group,boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesLevel$Vein {
- int pos
- boolean includeOverhang
- float delay
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesLevel$Sparkle {
+ void reset(float,float)
+ void update()
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoTalent {
- {static} float GAP
- {static} int WIDTH
}

abstract class com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoTalent$TalentButtonCallback {
+ {abstract}String prompt()
+ boolean metamorphDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.BeeSprite {
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfArcana {
+ String statsInfo()
# RingBuff buff()
+ {static} float enchantPowerMultiplier(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfArcana$Arcana {
}
class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfEnchantment {
# {static} boolean identifiedByUse
# WndBag.ItemSelector itemSelector
+ void doRead()
+ {static} boolean enchantable(Item)
- void confirmCancelation()
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfEnchantment$WndEnchantSelect {
- {static} Weapon wep
- {static} Weapon.Enchantment[] enchantments
# void onSelect(int)
# boolean hasInfo(int)
# void onInfo(int)
+ void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfEnchantment$WndGlyphSelect {
- {static} Armor arm
- {static} Armor.Glyph[] glyphs
# void onSelect(int)
# boolean hasInfo(int)
# void onInfo(int)
+ void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.ScorpioSprite {
- int cellToAttack
+ int blood()
+ void attack(int)
+ void onComplete(Animation)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.ScorpioSprite$ScorpioShot {
}
class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CellBlockRoom {
+ float[] sizeCatProbs()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Firebloom {
+ void activate(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Firebloom$Seed {
}
class com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Annoying {
- {static} ItemSprite.Glowing BLACK
+ int proc(Weapon,Char,Char,int)
+ boolean curse()
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.EarthGuardianSprite {
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.tiles.RaisedTerrainTilemap {
# int getTileVisual(int,int,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.SmokeBomb {
+ String targetingPrompt()
+ boolean useTargeting()
+ float chargeUse(Hero)
# void activate(ClassArmor,Hero,Integer)
+ int icon()
+ Talent[] talents()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.SmokeBomb$NinjaLog {
+ int drRoll()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.SmokeBomb$NinjaLogSprite {
+ void showAlert()
+ int blood()
}

abstract class com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap {
+ {static} int SIZE
# int[] map
+ void map(int[],int)
+ void updateMap()
+ void updateMapCell(int)
# {abstract}int getTileVisual(int,int,boolean)
+ int screenToTile(int,int)
+ int screenToTile(int,int,boolean)
+ boolean overlapsPoint(float,float)
+ void discover(int,int)
+ {static} PointF tileToWorld(int)
+ {static} PointF tileCenterToWorld(int)
+ {static} PointF raisedTileCenterToWorld(int)
+ boolean overlapsScreenPoint(int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalSpire {
- float abilityCooldown
- {static} int ABILITY_CD
- ArrayList<ArrayList<Integer>> targetedCells
~ int hits
+ {static} String SPRITE
+ {static} String HITS
+ {static} String ABILITY_COOLDOWN
+ {static} String TARGETED_CELLS
# boolean act()
- void diamondAOEAttack()
- ArrayList<Integer> spreadDiamondAOE(ArrayList<Integer>)
- void lineAttack()
- ArrayList<Integer> spreadAOE(ArrayList<Integer>)
+ void beckon(int)
+ boolean reset()
+ void damage(int,Object)
+ boolean isInvulnerable(Class)
+ boolean add(Buff)
+ boolean interact(Char)
+ float spawningWeight()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalSpire$SpireSpike {
}
class com.shatteredpixel.shatteredpixeldungeon.sprites.GnollGuardSprite {
- Emitter earthArmor
+ void link(Char)
+ void setupArmor()
+ void loseArmor()
+ void update()
+ void die()
+ void kill()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Drowsy {
+ {static} float DURATION
+ int icon()
+ float iconFadePercent()
+ String iconTextDisplay()
+ boolean attachTo(Char)
+ boolean act()
+ String desc()
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene {
~ {static} GameScene scene
- SkinnedBlock water
- DungeonTerrainTilemap tiles
- GridTileMap visualGrid
- TerrainFeaturesTilemap terrainFeatures
- RaisedTerrainTilemap raisedTerrain
- DungeonWallsTilemap walls
- WallBlockingTilemap wallBlocking
- FogOfWar fog
- HeroSprite hero
- MenuPane menu
- StatusPane status
- BossHealthBar boss
- GameLog log
- {static} CellSelector cellSelector
- Group terrain
- Group customTiles
- Group levelVisuals
- Group levelWallVisuals
- Group customWalls
- Group ripples
- Group plants
- Group traps
- Group heaps
- Group mobs
- Group floorEmitters
- Group emitters
- Group effects
- Group gases
- Group spells
- Group statuses
- Group emoicons
- Group overFogEffects
- Group healthIndicators
- InventoryPane inventory
- {static} boolean invVisible
- Toolbar toolbar
- Toast prompt
- AttackIndicator attack
- LootIndicator loot
- ActionIndicator action
- ResumeIndicator resume
- {static} Thread actorThread
- ArrayList<Gizmo> toDestroy
- float notifyDelay
+ {static} boolean updateItemDisplays
+ {static} boolean tagDisappeared
+ {static} boolean updateTags
- {static} Point lastOffset
- boolean tagAttack
- boolean tagLoot
- boolean tagAction
- boolean tagResume
- {static} CellSelector.Listener defaultCellListener
+ void create()
+ void destroy()
+ {static} void endActorThread()
+ boolean waitForActorThread(int,boolean)
+ void onPause()
+ void update()
+ Gizmo erase(Gizmo)
+ {static} void layoutTags()
# void onBackPressed()
+ void addCustomTile(CustomTilemap)
+ void addCustomWall(CustomTilemap)
- void addHeapSprite(Heap)
- void addDiscardedSprite(Heap)
- void addPlantSprite(Plant)
- void addTrapSprite(Trap)
- void addBlobSprite(Blob)
- void addMobSprite(Mob)
+ {static} void sortMobSprites()
- void prompt(String)
- void showBanner(Banner)
+ {static} void add(Plant)
+ {static} void add(Trap)
+ {static} void add(Blob)
+ {static} void add(Heap)
+ {static} void discard(Heap)
+ {static} void add(Mob)
+ {static} void addSprite(Mob)
+ {static} void add(Mob,float)
+ {static} void add(EmoIcon)
+ {static} void add(CharHealthIndicator)
+ {static} void add(CustomTilemap,boolean)
+ {static} void effect(Visual)
+ {static} void effectOverFog(Visual)
+ {static} Ripple ripple(int)
+ {static} SpellSprite spellSprite()
+ {static} Emitter emitter()
+ {static} Emitter floorEmitter()
+ {static} FloatingText status()
+ {static} void pickUp(Item,int)
+ {static} void pickUpJournal(Item,int)
+ {static} void flashForDocument(Document,String)
+ {static} void endIntro()
+ {static} void updateKeyDisplay()
+ {static} void showlevelUpStars()
+ {static} void resetMap()
+ {static} void updateMap()
+ {static} void updateMap(int)
+ {static} void plantSeed(int)
+ {static} void discoverTile(int,int)
+ {static} void show(Window)
+ {static} boolean showingWindow()
+ {static} boolean interfaceBlockingHero()
+ {static} void toggleInvPane()
+ {static} void centerNextWndOnInvPane()
+ {static} void updateFog()
+ {static} void updateFog(int,int,int,int)
+ {static} void updateFog(int,int)
+ {static} void afterObserve()
+ {static} void flash(int)
+ {static} void flash(int,boolean)
+ {static} void gameOver()
+ {static} void bossSlain()
+ {static} void handleCell(int)
+ {static} void selectCell(CellSelector.Listener)
+ {static} boolean cancelCellSelector()
+ {static} WndBag selectItem(WndBag.ItemSelector)
+ {static} boolean cancel()
+ {static} void ready()
+ {static} void checkKeyHold()
+ {static} void resetKeyHold()
+ {static} void examineCell(Integer)
- {static} ArrayList<Object> getObjectsAtCell(int)
- {static} ArrayList<String> getObjectNames(ArrayList<Object>)
+ {static} void examineObject(Object)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.TargetHealthIndicator {
+ {static} TargetHealthIndicator instance
- Char target
+ void update()
+ void target(Char)
+ Char target()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Blindness {
+ {static} float DURATION
+ void detach()
+ int icon()
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.WraithSprite {
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.DistortionTrap {
- {static} float DELAY
- {static} ArrayList<Class<? extends Mob>> RARE
+ void activate()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.ShockingDart {
+ int proc(Char,Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.ChasmEntranceRoom {
+ int minHeight()
+ int minWidth()
+ float[] sizeCatProbs()
+ boolean isEntrance()
+ void paint(Level)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite {
# int boltType
# {abstract}int texOffset()
+ void zap(int)
+ void onComplete(Animation)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite$Red {
# int texOffset()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite$Blue {
# int texOffset()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite$Purple {
# int texOffset()
}

class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.DimensionalSundial {
+ {static} boolean sundialWarned
# int upgradeEnergyCost()
+ String desc()
+ {static} float spawnMultiplierAtCurrentTime()
+ {static} float enemySpawnMultiplier()
+ {static} float enemySpawnMultiplier(int)
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.AntiMagic {
- {static} ItemSprite.Glowing TEAL
+ {static} HashSet<Class> RESISTS
+ int proc(Armor,Char,Char,int)
+ {static} int drRoll(Char,int)
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.items.keys.GoldenKey {
}
abstract class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman {
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
# boolean canAttack(Char)
+ float lootChance()
+ Item createLoot()
# boolean doAttack(Char)
- void zap()
# {abstract}void debuff(Char)
+ void onZapComplete()
+ String description()
+ {static} Class<? extends Shaman> random()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman$EarthenBolt {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman$RedShaman {
# void debuff(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman$BlueShaman {
# void debuff(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman$PurpleShaman {
# void debuff(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.PlatformRoom {
+ int minWidth()
+ int minHeight()
+ float[] sizeCatProbs()
+ void merge(Level,Room,Rect,int)
+ void paint(Level)
- void splitPlatforms(Rect,ArrayList<Rect>)
}

class com.shatteredpixel.shatteredpixeldungeon.items.bombs.Firebomb {
+ void explode(int)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings {
- {static} int WIDTH_P
- {static} int WIDTH_L
- {static} int SLIDER_HEIGHT
- {static} int BTN_HEIGHT
- {static} float GAP
- DisplayTab display
- UITab ui
- InputTab input
- DataTab data
- AudioTab audio
- LangsTab langs
+ {static} int last_index
+ void hide()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$DisplayTab {
~ RenderedTextBlock title
~ ColorBlock sep1
~ CheckBox chkFullscreen
~ OptionSlider optScale
~ CheckBox chkSaver
~ RedButton btnOrientation
~ ColorBlock sep2
~ OptionSlider optBrightness
~ OptionSlider optVisGrid
~ OptionSlider optFollowIntensity
~ OptionSlider optScreenShake
# void createChildren()
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$UITab {
~ RenderedTextBlock title
~ ColorBlock sep1
~ OptionSlider optUIMode
~ OptionSlider optUIScale
~ RedButton btnToolbarSettings
~ CheckBox chkFlipTags
~ ColorBlock sep2
~ CheckBox chkFont
~ CheckBox chkVibrate
# void createChildren()
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$InputTab {
~ RenderedTextBlock title
~ ColorBlock sep1
~ RedButton btnKeyBindings
~ RedButton btnControllerBindings
~ ColorBlock sep2
~ OptionSlider optControlSens
~ OptionSlider optHoldMoveSens
# void createChildren()
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$DataTab {
~ RenderedTextBlock title
~ ColorBlock sep1
~ CheckBox chkNews
~ CheckBox chkUpdates
~ CheckBox chkBetas
~ CheckBox chkWifi
# void createChildren()
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$AudioTab {
~ RenderedTextBlock title
~ ColorBlock sep1
~ OptionSlider optMusic
~ CheckBox chkMusicMute
~ ColorBlock sep2
~ OptionSlider optSFX
~ CheckBox chkMuteSFX
~ ColorBlock sep3
~ CheckBox chkIgnoreSilent
~ CheckBox chkMusicBG
# void createChildren()
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$LangsTab {
~ {static} int COLS_P
~ {static} int COLS_L
~ {static} int BTN_HEIGHT
~ RenderedTextBlock title
~ ColorBlock sep1
~ RenderedTextBlock txtLangInfo
~ ColorBlock sep2
~ RedButton[] lanBtns
~ ColorBlock sep3
~ RenderedTextBlock txtTranifex
~ RedButton btnCredits
# void createChildren()
# void layout()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Bandit {
+ Item item
# boolean steal(Hero)
}


class com.shatteredpixel.shatteredpixeldungeon.ui.ItemSlot {
+ {static} int DEGRADED
+ {static} int UPGRADED
+ {static} int FADED
+ {static} int WARNING
+ {static} int ENHANCED
+ {static} int MASTERED
+ {static} int CURSE_INFUSED
- {static} float ENABLED
- {static} float DISABLED
- Rect margin
# ItemSprite sprite
# Item item
# BitmapText status
# BitmapText extra
# Image itemIcon
# BitmapText level
- {static} String TXT_STRENGTH
- {static} String TXT_TYPICAL_STR
- {static} String TXT_LEVEL
+ {static} Item CHEST
+ {static} Item LOCKED_CHEST
+ {static} Item CRYSTAL_CHEST
+ {static} Item TOMB
+ {static} Item SKELETON
+ {static} Item REMAINS
# void createChildren()
# void layout()
+ void alpha(float)
+ void clear()
+ void item(Item)
+ void updateText()
+ void enable(boolean)
+ void showExtraInfo(boolean)
+ void setMargins(int,int,int,int)
# String hoverText()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndEnergizeItem {
- {static} float GAP
- {static} int BTN_HEIGHT
- WndBag owner
+ {static} WndBag.ItemSelector selector
+ void hide()
+ {static} void energize(Item)
+ {static} void energizeOne(Item)
+ {static} WndBag openItemSelector()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.SegmentedRoom {
+ int minWidth()
+ int minHeight()
+ float[] sizeCatProbs()
+ void paint(Level)
- void createWalls(Level,Rect)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.FissureRoom {
+ float[] sizeCatProbs()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.ToxicTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff {
+ boolean act()
+ String desc()
# String dispTurns()
+ String iconTextDisplay()
}

class com.shatteredpixel.shatteredpixeldungeon.ui.BuffIcon {
- {static} TextureFilm smallFilm
- {static} int SML_SIZE
- {static} TextureFilm largeFilm
- {static} int LRG_SIZE
- boolean large
+ void refresh(Buff)
+ void refresh(int)
}


class com.shatteredpixel.shatteredpixeldungeon.items.LiquidMetal {
- {static} String AC_APPLY
- WndBag.ItemSelector itemSelector
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
# void onThrow(int)
+ boolean isUpgradable()
+ boolean isIdentified()
+ int value()
}


class com.shatteredpixel.shatteredpixeldungeon.items.LiquidMetal$Recipe {
+ boolean testIngredients(ArrayList<Item>)
+ int cost(ArrayList<Item>)
+ Item brew(ArrayList<Item>)
+ Item sampleOutput(ArrayList<Item>)
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.GhostSprite {
+ void draw()
+ void die()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.Chrome {
+ {static} NinePatch get(Type)
}

enum com.shatteredpixel.shatteredpixeldungeon.Type {
+  TOAST
+  TOAST_TR
+  TOAST_WHITE
+  WINDOW
+  WINDOW_SILVER
+  RED_BUTTON
+  GREY_BUTTON
+  GREY_BUTTON_TR
+  TAG
+  GEM
+  SCROLL
+  TAB_SET
+  TAB_SELECTED
+  TAB_UNSELECTED
+  BLANK
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.EntranceRoom {
- {static} ArrayList<Class<? extends StandardRoom>> rooms
- {static} float[][] chances
+ int minWidth()
+ int minHeight()
+ boolean isEntrance()
+ boolean canMerge(Level,Room,Point,int)
+ boolean canPlaceTrap(Point)
+ void paint(Level)
+ {static} StandardRoom createEntrance()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.traps.FlockTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.effects.particles.BloodParticle {
+ {static} Emitter.Factory FACTORY
+ {static} Emitter.Factory BURST
+ void reset(float,float)
+ void resetBurst(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.ui.buttons.TalentButton {
+ {static} int WIDTH
+ {static} int HEIGHT
~ int tier
~ Talent talent
~ int pointsInTalent
~ Mode mode
~ TalentIcon icon
~ Image bg
~ ColorBlock fill
# void createChildren()
# void layout()
# void onClick()
# void onPointerDown()
# void onPointerUp()
# String hoverText()
+ void enable(boolean)
+ void upgradeTalent()
}


enum com.shatteredpixel.shatteredpixeldungeon.ui.buttons.Mode {
+  INFO
+  UPGRADE
+  METAMORPH_CHOOSE
+  METAMORPH_REPLACE
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DelayedRockFall {
- int[] rockPositions
- ArrayList<Emitter> rockEmitters
- {static} String POSITIONS
+ void setRockPositions(List<Integer>)
+ boolean act()
+ void affectChar(Char)
+ void affectCell(int)
+ void fx(boolean)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MassGraveRoom {
+ int minWidth()
+ int minHeight()
+ void paint(Level)
+ boolean canConnect(Room)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MassGraveRoom$Bones {
- {static} int WALL_OVERLAP
- {static} int FLOOR
+ Tilemap create()
+ Image image(int,int)
+ String name(int,int)
+ String desc(int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.DM201Sprite {
+ void place(int)
+ void die()
+ void zap(int)
+ void onComplete(Animation)
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalGuardian {
- boolean recovering
+ {static} String SPRITE
+ {static} String RECOVERING
+ boolean recovering()
# boolean act()
+ int damageRoll()
+ int attackSkill(Char)
+ int defenseSkill(Char)
+ boolean surprisedBy(Char,boolean)
+ int drRoll()
+ boolean reset()
+ int defenseProc(Char,int)
+ boolean isAlive()
+ boolean isInvulnerable(Class)
+ float spawningWeight()
+ float speed()
+ void move(int,boolean)
+ boolean[] modifyPassable(boolean[])
+ void beckon(int)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalGuardian$Sleeping {
# void awaken(boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Frost {
+ {static} float DURATION
+ boolean attachTo(Char)
+ void detach()
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ void fx(boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.SwarmSprite {
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.items.food.Blandfruit {
+ Potion potionAttrib
+ ItemSprite.Glowing potionGlow
+ {static} String POTIONATTRIB
+ boolean isSimilar(Item)
+ String defaultAction()
+ void execute(Hero,String)
+ String name()
+ String desc()
+ int value()
+ Item cook(Seed)
+ Item imbuePotion(Potion)
# void onThrow(int)
+ void reset()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.items.food.Blandfruit$CookFruit {
+ boolean testIngredients(ArrayList<Item>)
+ int cost(ArrayList<Item>)
+ Item brew(ArrayList<Item>)
+ Item sampleOutput(ArrayList<Item>)
}

class com.shatteredpixel.shatteredpixeldungeon.items.food.Blandfruit$Chunks {
}
class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.CryptRoom {
+ void paint(Level)
- {static} Item prize(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.ui.InventorySlot {
- {static} int NORMAL
- {static} int EQUIPPED
- ColorBlock bg
# void createChildren()
# void layout()
+ void alpha(float)
+ void item(Item)
+ Item item()
# void onPointerDown()
# void onPointerUp()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.SewerBossEntranceRoom {
+ int minWidth()
+ int minHeight()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndGameInProgress {
- {static} int WIDTH
- int GAP
- float pos
- void statSlot(String,String)
- void statSlot(String,int)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Degrade {
+ {static} float DURATION
+ boolean attachTo(Char)
+ void detach()
+ {static} int reduceLevel(int)
+ int icon()
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Foresight {
+ {static} float DURATION
+ {static} int DISTANCE
+ int icon()
+ boolean attachTo(Char)
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.CityBossLevel {
- {static} int WIDTH
- {static} int HEIGHT
- {static} Rect entry
- {static} Rect arena
- {static} Rect end
- {static} int bottomDoor
- {static} int topDoor
+ {static} int throne
- {static} int[] pedestals
- ImpShopRoom impShop
- {static} String IMP_SHOP
+ void playLevelMusic()
+ String tilesTex()
+ String waterTex()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
# boolean build()
+ int getSummoningPos()
- Mob getKing()
# void createMobs()
+ Actor addRespawner()
# void createItems()
+ int randomRespawnCell(Char)
+ void occupyCell(Char)
+ void seal()
+ void unseal()
- void spawnShop()
+ String tileName(int)
+ String tileDesc(int)
+ Group addVisuals()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.CityBossLevel$CustomGroundVisuals {
- {static} int STAIR_ROWS
+ Tilemap create()
+ String name(int,int)
+ String desc(int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.CityBossLevel$CustomWallVisuals {
+ Tilemap create()
}

class com.shatteredpixel.shatteredpixeldungeon.items.KingsCrown {
- {static} String AC_WEAR
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ boolean isUpgradable()
+ boolean isIdentified()
+ void upgradeArmor(Hero,Armor,ArmorAbility)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.ChasmBridgeRoom {
# int maxBridgeWidth(int)
# int spaceTile()
}

class com.shatteredpixel.shatteredpixeldungeon.ui.Tag {
- float r
- float g
- float b
# NinePatch bg
# float lightness
+ {static} int SIZE
# boolean flipped
# void createChildren()
# void onClick()
# void layout()
+ void flash()
+ void flip(boolean)
+ void setColor(int)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.FungalSpinnerSprite {
+ void link(Char)
+ void zap(int)
+ void onComplete(MovieClip.Animation)
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.painters.CityPainter {
# void decorate(Level,ArrayList<Room>)
}

class com.shatteredpixel.shatteredpixeldungeon.ui.RadialMenu {
~ int slots
~ float targetAngle
~ PointF center
~ CircleArc selectionArc
~ RenderedTextBlock titleTxt
~ RenderedTextBlock descTxt
~ String[] texts
~ Image[] icons
~ int selectedIdx
- PointF mousePos
- boolean first
+ void onSelect(int,boolean)
+ void destroy()
+ void update()
- {static} Image getBGTexture(int,boolean)
}


abstract class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.InventoryScroll {
# {static} boolean identifiedByUse
# Class<? extends Bag> preferredBag
# WndBag.ItemSelector itemSelector
+ void doRead()
- void confirmCancelation()
- String inventoryTitle()
# boolean usableOnItem(Item)
# {abstract}void onItemSelected(Item)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.LastShopLevel {
+ String tilesTex()
+ String waterTex()
# boolean build()
# ArrayList<Room> initRooms()
# Builder builder()
# Painter painter()
+ Mob createMob()
# void createMobs()
+ Actor addRespawner()
# void createItems()
+ int randomRespawnCell(Char)
+ String tileName(int)
+ String tileDesc(int)
+ Group addVisuals()
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndMessage {
- {static} int WIDTH_P
- {static} int WIDTH_L
- {static} int MARGIN
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Fury {
+ {static} float LEVEL
+ boolean act()
+ int icon()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndResurrect {
- {static} int WIDTH
- {static} int BTN_HEIGHT
- {static} float GAP
- {static} float BTN_GAP
- {static} int BTN_SIZE
+ {static} Object instance
- ItemButton btnItem1
- ItemButton btnItem2
- ItemButton btnPressed
~ RedButton btnContinue
# WndBag.ItemSelector itemSelector
- void resurrect(Ankh)
+ void destroy()
+ void onBackPressed()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.RotGardenRoom {
+ int minWidth()
+ int minHeight()
+ void paint(Level)
- {static} boolean validPlantPos(boolean[],boolean[],Level,int,int,int)
- {static} void placePlant(Level,int,Mob)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.PinCushion {
- ArrayList<MissileWeapon> items
- {static} String ITEMS
+ void stick(MissileWeapon)
+ Item grabOne()
+ ArrayList<MissileWeapon> getStuckItems()
+ void detach()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ int icon()
+ String desc()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.SpectralBlades {
+ String targetingPrompt()
# void activate(ClassArmor,Hero,Integer)
- Char findChar(Ballistica,Hero,int,HashSet<Char>)
+ int icon()
+ Talent[] talents()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MindVision {
+ {static} float DURATION
+ int distance
+ int icon()
+ float iconFadePercent()
+ void detach()
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.LloydsBeacon {
+ {static} float TIME_TO_USE
+ {static} String AC_ZAP
+ {static} String AC_SET
+ {static} String AC_RETURN
+ int returnDepth
+ int returnPos
- {static} String DEPTH
- {static} String POS
# CellSelector.Listener zapper
- {static} Glowing WHITE
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
# ArtifactBuff passiveBuff()
+ void charge(Hero,float)
+ Item upgrade()
+ String desc()
+ Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.items.artifacts.LloydsBeacon$beaconRecharge {
+ boolean act()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.WarpingTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.RuinsRoom {
+ float[] sizeCatProbs()
+ boolean canMerge(Level,Room,Point,int)
# float fill()
# int clustering()
# boolean ensurePath()
# boolean cleanEdges()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.WalkwayRoom {
+ void paint(Level)
+ boolean canMerge(Level,Room,Point,int)
}

class com.shatteredpixel.shatteredpixeldungeon.ui.buttons.ExitButton {
# void onClick()
+ GameAction keyAction()
# String hoverText()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.PiranhaSprite {
+ void link(Char)
+ void onComplete(Animation)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.DirectableAlly {
# boolean attacksAutomatically
# int defendingPos
# boolean movingToDefendPos
- {static} String DEFEND_POS
- {static} String MOVING_TO_DEFEND
+ void defendPos(int)
+ void clearDefensingPos()
+ void followHero()
+ void targetChar(Char)
+ void aggro(Char)
+ void directTocell(int)
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.DirectableAlly$Wandering {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.DirectableAlly$Hunting {
+ boolean act(boolean,boolean)
}

class com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfFlock {
# void activate(int)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility {
+ {static} float DURATION
+ boolean attachTo(Char)
+ void detach()
+ int icon()
+ float iconFadePercent()
+ void fx(boolean)
+ {static} void dispel()
+ {static} void dispel(Char)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.particles.WindParticle {
+ {static} Emitter.Factory FACTORY
- {static} float angle
- {static} PointF speed
+ void reset(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.particles.WindParticle$Wind {
- int pos
+ void update()
}


abstract class com.shatteredpixel.shatteredpixeldungeon.levels.builders.RegularBuilder {
# float pathVariance
# float pathLength
# float[] pathLenJitterChances
# float[] pathTunnelChances
# float[] branchTunnelChances
# float extraConnectionChance
# Room entrance
# Room exit
# Room shop
# ArrayList<Room> mainPathRooms
# ArrayList<Room> multiConnections
# ArrayList<Room> singleConnections
+ RegularBuilder setPathVariance(float)
+ RegularBuilder setPathLength(float,float[])
+ RegularBuilder setTunnelLength(float[],float[])
+ RegularBuilder setExtraConnectionChance(float)
# void setupRooms(ArrayList<Room>)
# void weightRooms(ArrayList<Room>)
# boolean createBranches(ArrayList<Room>,ArrayList<Room>,ArrayList<Room>,float[])
# float randomBranchAngle(Room)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.Speck {
+ {static} int HEALING
+ {static} int STAR
+ {static} int LIGHT
+ {static} int QUESTION
+ {static} int UP
+ {static} int SCREAM
+ {static} int BONE
+ {static} int WOOL
+ {static} int ROCK
+ {static} int NOTE
+ {static} int CHANGE
+ {static} int HEART
+ {static} int BUBBLE
+ {static} int STEAM
+ {static} int COIN
+ {static} int DISCOVER
+ {static} int EVOKE
+ {static} int MASK
+ {static} int CROWN
+ {static} int RATTLE
+ {static} int JET
+ {static} int TOXIC
+ {static} int CORROSION
+ {static} int PARALYSIS
+ {static} int DUST
+ {static} int STENCH
+ {static} int FORGE
+ {static} int CONFUSION
+ {static} int RED_LIGHT
+ {static} int CALM
+ {static} int SMOKE
+ {static} int STORM
+ {static} int INFERNO
+ {static} int BLIZZARD
- {static} int SIZE
- int type
- float lifespan
- float left
- {static} TextureFilm film
- {static} SparseArray<Emitter.Factory> factories
+ Speck image(int)
+ void reset(int,float,float,int)
+ void update()
+ {static} Emitter.Factory factory(int)
+ {static} Emitter.Factory factory(int,boolean)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet {
- {static} int WIDTH
+ {static} int SIZE
+ {static} TextureFilm film
- {static} int PLACEHOLDERS
+ {static} int SOMETHING
+ {static} int WEAPON_HOLDER
+ {static} int ARMOR_HOLDER
+ {static} int MISSILE_HOLDER
+ {static} int WAND_HOLDER
+ {static} int RING_HOLDER
+ {static} int ARTIFACT_HOLDER
+ {static} int TRINKET_HOLDER
+ {static} int FOOD_HOLDER
+ {static} int BOMB_HOLDER
+ {static} int POTION_HOLDER
+ {static} int SEED_HOLDER
+ {static} int SCROLL_HOLDER
+ {static} int STONE_HOLDER
+ {static} int ELIXIR_HOLDER
+ {static} int SPELL_HOLDER
- {static} int UNCOLLECTIBLE
+ {static} int GOLD
+ {static} int ENERGY
+ {static} int DEWDROP
+ {static} int PETAL
+ {static} int SANDBAG
+ {static} int SPIRIT_ARROW
+ {static} int TENGU_BOMB
+ {static} int TENGU_SHOCKER
+ {static} int GEO_BOULDER
- {static} int CONTAINERS
+ {static} int BONES
+ {static} int REMAINS
+ {static} int TOMB
+ {static} int GRAVE
+ {static} int CHEST
+ {static} int LOCKED_CHEST
+ {static} int CRYSTAL_CHEST
+ {static} int EBONY_CHEST
- {static} int MISC_CONSUMABLE
+ {static} int ANKH
+ {static} int STYLUS
+ {static} int SEAL
+ {static} int TORCH
+ {static} int BEACON
+ {static} int HONEYPOT
+ {static} int SHATTPOT
+ {static} int IRON_KEY
+ {static} int GOLDEN_KEY
+ {static} int CRYSTAL_KEY
+ {static} int SKELETON_KEY
+ {static} int MASK
+ {static} int CROWN
+ {static} int AMULET
+ {static} int MASTERY
+ {static} int KIT
+ {static} int SEAL_SHARD
+ {static} int BROKEN_STAFF
+ {static} int CLOAK_SCRAP
+ {static} int BOW_FRAGMENT
+ {static} int BROKEN_HILT
+ {static} int TRINKET_CATA
- {static} int BOMBS
+ {static} int BOMB
+ {static} int DBL_BOMB
+ {static} int FIRE_BOMB
+ {static} int FROST_BOMB
+ {static} int REGROWTH_BOMB
+ {static} int FLASHBANG
+ {static} int SHOCK_BOMB
+ {static} int HOLY_BOMB
+ {static} int WOOLY_BOMB
+ {static} int NOISEMAKER
+ {static} int ARCANE_BOMB
+ {static} int SHRAPNEL_BOMB
- {static} int WEP_TIER1
+ {static} int WORN_SHORTSWORD
+ {static} int CUDGEL
+ {static} int GLOVES
+ {static} int RAPIER
+ {static} int DAGGER
+ {static} int MAGES_STAFF
- {static} int WEP_TIER2
+ {static} int SHORTSWORD
+ {static} int HAND_AXE
+ {static} int SPEAR
+ {static} int QUARTERSTAFF
+ {static} int DIRK
+ {static} int SICKLE
- {static} int WEP_TIER3
+ {static} int SWORD
+ {static} int MACE
+ {static} int SCIMITAR
+ {static} int ROUND_SHIELD
+ {static} int SAI
+ {static} int WHIP
- {static} int WEP_TIER4
+ {static} int LONGSWORD
+ {static} int BATTLE_AXE
+ {static} int FLAIL
+ {static} int RUNIC_BLADE
+ {static} int ASSASSINS_BLADE
+ {static} int CROSSBOW
+ {static} int KATANA
- {static} int WEP_TIER5
+ {static} int GREATSWORD
+ {static} int WAR_HAMMER
+ {static} int GLAIVE
+ {static} int GREATAXE
+ {static} int GREATSHIELD
+ {static} int GAUNTLETS
+ {static} int WAR_SCYTHE
- {static} int MISSILE_WEP
+ {static} int SPIRIT_BOW
+ {static} int THROWING_SPIKE
+ {static} int THROWING_KNIFE
+ {static} int THROWING_STONE
+ {static} int FISHING_SPEAR
+ {static} int SHURIKEN
+ {static} int THROWING_CLUB
+ {static} int THROWING_SPEAR
+ {static} int BOLAS
+ {static} int KUNAI
+ {static} int JAVELIN
+ {static} int TOMAHAWK
+ {static} int BOOMERANG
+ {static} int TRIDENT
+ {static} int THROWING_HAMMER
+ {static} int FORCE_CUBE
+ {static} int DARTS
+ {static} int DART
+ {static} int ROT_DART
+ {static} int INCENDIARY_DART
+ {static} int ADRENALINE_DART
+ {static} int HEALING_DART
+ {static} int CHILLING_DART
+ {static} int SHOCKING_DART
+ {static} int POISON_DART
+ {static} int CLEANSING_DART
+ {static} int PARALYTIC_DART
+ {static} int HOLY_DART
+ {static} int DISPLACING_DART
+ {static} int BLINDING_DART
- {static} int ARMOR
+ {static} int ARMOR_CLOTH
+ {static} int ARMOR_LEATHER
+ {static} int ARMOR_MAIL
+ {static} int ARMOR_SCALE
+ {static} int ARMOR_PLATE
+ {static} int ARMOR_WARRIOR
+ {static} int ARMOR_MAGE
+ {static} int ARMOR_ROGUE
+ {static} int ARMOR_HUNTRESS
+ {static} int ARMOR_DUELIST
- {static} int WANDS
+ {static} int WAND_MAGIC_MISSILE
+ {static} int WAND_FIREBOLT
+ {static} int WAND_FROST
+ {static} int WAND_LIGHTNING
+ {static} int WAND_DISINTEGRATION
+ {static} int WAND_PRISMATIC_LIGHT
+ {static} int WAND_CORROSION
+ {static} int WAND_LIVING_EARTH
+ {static} int WAND_BLAST_WAVE
+ {static} int WAND_CORRUPTION
+ {static} int WAND_WARDING
+ {static} int WAND_REGROWTH
+ {static} int WAND_TRANSFUSION
- {static} int RINGS
+ {static} int RING_GARNET
+ {static} int RING_RUBY
+ {static} int RING_TOPAZ
+ {static} int RING_EMERALD
+ {static} int RING_ONYX
+ {static} int RING_OPAL
+ {static} int RING_TOURMALINE
+ {static} int RING_SAPPHIRE
+ {static} int RING_AMETHYST
+ {static} int RING_QUARTZ
+ {static} int RING_AGATE
+ {static} int RING_DIAMOND
- {static} int ARTIFACTS
+ {static} int ARTIFACT_CLOAK
+ {static} int ARTIFACT_ARMBAND
+ {static} int ARTIFACT_CAPE
+ {static} int ARTIFACT_TALISMAN
+ {static} int ARTIFACT_HOURGLASS
+ {static} int ARTIFACT_TOOLKIT
+ {static} int ARTIFACT_SPELLBOOK
+ {static} int ARTIFACT_BEACON
+ {static} int ARTIFACT_CHAINS
+ {static} int ARTIFACT_HORN1
+ {static} int ARTIFACT_HORN2
+ {static} int ARTIFACT_HORN3
+ {static} int ARTIFACT_HORN4
+ {static} int ARTIFACT_CHALICE1
+ {static} int ARTIFACT_CHALICE2
+ {static} int ARTIFACT_CHALICE3
+ {static} int ARTIFACT_SANDALS
+ {static} int ARTIFACT_SHOES
+ {static} int ARTIFACT_BOOTS
+ {static} int ARTIFACT_GREAVES
+ {static} int ARTIFACT_ROSE1
+ {static} int ARTIFACT_ROSE2
+ {static} int ARTIFACT_ROSE3
- {static} int TRINKETS
+ {static} int RAT_SKULL
+ {static} int PARCHMENT_SCRAP
+ {static} int PETRIFIED_SEED
+ {static} int EXOTIC_CRYSTALS
+ {static} int MOSSY_CLUMP
+ {static} int SUNDIAL
+ {static} int CLOVER
+ {static} int TRAP_MECHANISM
+ {static} int MIMIC_TOOTH
+ {static} int WONDROUS_RESIN
+ {static} int EYE_OF_NEWT
- {static} int SCROLLS
+ {static} int SCROLL_KAUNAN
+ {static} int SCROLL_SOWILO
+ {static} int SCROLL_LAGUZ
+ {static} int SCROLL_YNGVI
+ {static} int SCROLL_GYFU
+ {static} int SCROLL_RAIDO
+ {static} int SCROLL_ISAZ
+ {static} int SCROLL_MANNAZ
+ {static} int SCROLL_NAUDIZ
+ {static} int SCROLL_BERKANAN
+ {static} int SCROLL_ODAL
+ {static} int SCROLL_TIWAZ
+ {static} int ARCANE_RESIN
- {static} int EXOTIC_SCROLLS
+ {static} int EXOTIC_KAUNAN
+ {static} int EXOTIC_SOWILO
+ {static} int EXOTIC_LAGUZ
+ {static} int EXOTIC_YNGVI
+ {static} int EXOTIC_GYFU
+ {static} int EXOTIC_RAIDO
+ {static} int EXOTIC_ISAZ
+ {static} int EXOTIC_MANNAZ
+ {static} int EXOTIC_NAUDIZ
+ {static} int EXOTIC_BERKANAN
+ {static} int EXOTIC_ODAL
+ {static} int EXOTIC_TIWAZ
- {static} int STONES
+ {static} int STONE_AGGRESSION
+ {static} int STONE_AUGMENTATION
+ {static} int STONE_FEAR
+ {static} int STONE_BLAST
+ {static} int STONE_BLINK
+ {static} int STONE_CLAIRVOYANCE
+ {static} int STONE_SLEEP
+ {static} int STONE_DISARM
+ {static} int STONE_ENCHANT
+ {static} int STONE_FLOCK
+ {static} int STONE_INTUITION
+ {static} int STONE_SHOCK
- {static} int POTIONS
+ {static} int POTION_CRIMSON
+ {static} int POTION_AMBER
+ {static} int POTION_GOLDEN
+ {static} int POTION_JADE
+ {static} int POTION_TURQUOISE
+ {static} int POTION_AZURE
+ {static} int POTION_INDIGO
+ {static} int POTION_MAGENTA
+ {static} int POTION_BISTRE
+ {static} int POTION_CHARCOAL
+ {static} int POTION_SILVER
+ {static} int POTION_IVORY
+ {static} int LIQUID_METAL
- {static} int EXOTIC_POTIONS
+ {static} int EXOTIC_CRIMSON
+ {static} int EXOTIC_AMBER
+ {static} int EXOTIC_GOLDEN
+ {static} int EXOTIC_JADE
+ {static} int EXOTIC_TURQUOISE
+ {static} int EXOTIC_AZURE
+ {static} int EXOTIC_INDIGO
+ {static} int EXOTIC_MAGENTA
+ {static} int EXOTIC_BISTRE
+ {static} int EXOTIC_CHARCOAL
+ {static} int EXOTIC_SILVER
+ {static} int EXOTIC_IVORY
- {static} int SEEDS
+ {static} int SEED_ROTBERRY
+ {static} int SEED_FIREBLOOM
+ {static} int SEED_SWIFTTHISTLE
+ {static} int SEED_SUNGRASS
+ {static} int SEED_ICECAP
+ {static} int SEED_STORMVINE
+ {static} int SEED_SORROWMOSS
+ {static} int SEED_MAGEROYAL
+ {static} int SEED_EARTHROOT
+ {static} int SEED_STARFLOWER
+ {static} int SEED_FADELEAF
+ {static} int SEED_BLINDWEED
- {static} int BREWS
+ {static} int BREW_INFERNAL
+ {static} int BREW_BLIZZARD
+ {static} int BREW_SHOCKING
+ {static} int BREW_CAUSTIC
+ {static} int BREW_AQUA
+ {static} int BREW_UNSTABLE
- {static} int ELIXIRS
+ {static} int ELIXIR_HONEY
+ {static} int ELIXIR_AQUA
+ {static} int ELIXIR_MIGHT
+ {static} int ELIXIR_DRAGON
+ {static} int ELIXIR_TOXIC
+ {static} int ELIXIR_ICY
+ {static} int ELIXIR_ARCANE
+ {static} int ELIXIR_FEATHER
- {static} int SPELLS
+ {static} int WILD_ENERGY
+ {static} int PHASE_SHIFT
+ {static} int TELE_GRAB
+ {static} int UNSTABLE_SPELL
+ {static} int CURSE_INFUSE
+ {static} int MAGIC_INFUSE
+ {static} int ALCHEMIZE
+ {static} int RECYCLE
+ {static} int RECLAIM_TRAP
+ {static} int RETURN_BEACON
+ {static} int SUMMON_ELE
- {static} int FOOD
+ {static} int MEAT
+ {static} int STEAK
+ {static} int STEWED
+ {static} int OVERPRICED
+ {static} int CARPACCIO
+ {static} int RATION
+ {static} int PASTY
+ {static} int MEAT_PIE
+ {static} int BLANDFRUIT
+ {static} int BLAND_CHUNKS
+ {static} int BERRY
+ {static} int PHANTOM_MEAT
+ {static} int SUPPLY_RATION
- {static} int HOLIDAY_FOOD
+ {static} int STEAMED_FISH
+ {static} int FISH_LEFTOVER
+ {static} int CHOC_AMULET
+ {static} int EASTER_EGG
+ {static} int RAINBOW_POTION
+ {static} int SHATTERED_CAKE
+ {static} int PUMPKIN_PIE
+ {static} int VANILLA_CAKE
+ {static} int CANDY_CANE
+ {static} int SPARKLING_POTION
- {static} int QUEST
+ {static} int DUST
+ {static} int CANDLE
+ {static} int EMBER
+ {static} int PICKAXE
+ {static} int ORE
+ {static} int TOKEN
+ {static} int BLOB
+ {static} int SHARD
- {static} int BAGS
+ {static} int WATERSKIN
+ {static} int BACKPACK
+ {static} int POUCH
+ {static} int HOLDER
+ {static} int BANDOLIER
+ {static} int HOLSTER
+ {static} int VIAL
- {static} int DOCUMENTS
+ {static} int GUIDE_PAGE
+ {static} int ALCH_PAGE
+ {static} int SEWER_PAGE
+ {static} int PRISON_PAGE
+ {static} int CAVES_PAGE
+ {static} int CITY_PAGE
+ {static} int HALLS_PAGE
- {static} int xy(int,int)
- {static} void assignItemRect(int,int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet$Icons {
- {static} int WIDTH
+ {static} int SIZE
+ {static} TextureFilm film
- {static} int RINGS
+ {static} int RING_ACCURACY
+ {static} int RING_ARCANA
+ {static} int RING_ELEMENTS
+ {static} int RING_ENERGY
+ {static} int RING_EVASION
+ {static} int RING_FORCE
+ {static} int RING_FUROR
+ {static} int RING_HASTE
+ {static} int RING_MIGHT
+ {static} int RING_SHARPSHOOT
+ {static} int RING_TENACITY
+ {static} int RING_WEALTH
- {static} int SCROLLS
+ {static} int SCROLL_UPGRADE
+ {static} int SCROLL_IDENTIFY
+ {static} int SCROLL_REMCURSE
+ {static} int SCROLL_MIRRORIMG
+ {static} int SCROLL_RECHARGE
+ {static} int SCROLL_TELEPORT
+ {static} int SCROLL_LULLABY
+ {static} int SCROLL_MAGICMAP
+ {static} int SCROLL_RAGE
+ {static} int SCROLL_RETRIB
+ {static} int SCROLL_TERROR
+ {static} int SCROLL_TRANSMUTE
- {static} int EXOTIC_SCROLLS
+ {static} int SCROLL_ENCHANT
+ {static} int SCROLL_DIVINATE
+ {static} int SCROLL_ANTIMAGIC
+ {static} int SCROLL_PRISIMG
+ {static} int SCROLL_MYSTENRG
+ {static} int SCROLL_PASSAGE
+ {static} int SCROLL_SIREN
+ {static} int SCROLL_FORESIGHT
+ {static} int SCROLL_CHALLENGE
+ {static} int SCROLL_PSIBLAST
+ {static} int SCROLL_DREAD
+ {static} int SCROLL_METAMORPH
- {static} int POTIONS
+ {static} int POTION_STRENGTH
+ {static} int POTION_HEALING
+ {static} int POTION_MINDVIS
+ {static} int POTION_FROST
+ {static} int POTION_LIQFLAME
+ {static} int POTION_TOXICGAS
+ {static} int POTION_HASTE
+ {static} int POTION_INVIS
+ {static} int POTION_LEVITATE
+ {static} int POTION_PARAGAS
+ {static} int POTION_PURITY
+ {static} int POTION_EXP
- {static} int EXOTIC_POTIONS
+ {static} int POTION_MASTERY
+ {static} int POTION_SHIELDING
+ {static} int POTION_MAGISIGHT
+ {static} int POTION_SNAPFREEZ
+ {static} int POTION_DRGBREATH
+ {static} int POTION_CORROGAS
+ {static} int POTION_STAMINA
+ {static} int POTION_SHROUDFOG
+ {static} int POTION_STRMCLOUD
+ {static} int POTION_EARTHARMR
+ {static} int POTION_CLEANSE
+ {static} int POTION_DIVINE
- {static} int xy(int,int)
- {static} void assignIconRect(int,int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndDocument {
- ScrollingListPane list
}

class com.shatteredpixel.shatteredpixeldungeon.effects.ShieldHalo {
- CharSprite target
- float phase
+ void update()
+ void draw()
+ void putOut()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.CrystalVaultRoom {
- ArrayList<Generator.Category> prizeClasses
+ int minHeight()
+ int maxHeight()
+ int minWidth()
+ int maxWidth()
+ void paint(Level)
- Item prize()
}


class com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb {
+ Fuse fuse
- {static} boolean lightingFuse
- {static} String AC_LIGHTTHROW
- {static} String FUSE
+ boolean isSimilar(Item)
+ boolean explodesDestructively()
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
# Fuse createFuse()
# void onThrow(int)
+ boolean doPickUp(Hero,int)
+ void explode(int)
+ boolean isUpgradable()
+ boolean isIdentified()
+ Item random()
+ ItemSprite.Glowing glowing()
+ int value()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb$ConjuredBomb {
}
class com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb$Fuse {
# Bomb bomb
+ Fuse ignite(Bomb)
# boolean act()
# void trigger(Heap)
+ boolean freeze()
}


class com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb$DoubleBomb {
+ boolean doPickUp(Hero,int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb$EnhanceBomb {
+ {static} LinkedHashMap<Class<? extends Item>,Class<? extends Bomb>> validIngredients
- {static} HashMap<Class<? extends Bomb>,Integer> bombCosts
+ boolean testIngredients(ArrayList<Item>)
+ int cost(ArrayList<Item>)
+ Item brew(ArrayList<Item>)
+ Item sampleOutput(ArrayList<Item>)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Inferno {
# void evolve()
+ void use(BlobEmitter)
+ String tileDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon {
# float maxSize
# float timeScale
# boolean growing
# CharSprite owner
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon$Sleep {
}
class com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon$Alert {
}
class com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon$Lost {
}
class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Mace {
+ int max(int)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
+ {static} void heavyBlowAbility(Hero,Integer,float,int,MeleeWeapon)
}

class com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Affection {
- {static} ItemSprite.Glowing PINK
+ int proc(Armor,Char,Char,int)
+ Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfIdentify {
# boolean usableOnItem(Item)
# void onItemSelected(Item)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Shortsword {
# int baseChargeUse(Hero,Char)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.SummoningTrap {
- {static} float DELAY
+ void activate()
}


class com.shatteredpixel.shatteredpixeldungeon.items.Heap {
+ Type type
+ int pos
+ ItemSprite sprite
+ boolean seen
+ boolean haunted
+ boolean autoExplored
+ LinkedList<Item> items
- {static} String POS
- {static} String SEEN
- {static} String TYPE
- {static} String ITEMS
- {static} String HAUNTED
- {static} String AUTO_EXPLORED
+ void open(Hero)
+ Heap setHauntedIfCursed()
+ int size()
+ Item pickUp()
+ Item peek()
+ void drop(Item)
+ void replace(Item,Item)
+ void remove(Item)
+ void burn()
+ void explode()
+ void freeze()
+ {static} void burnFX(int)
+ {static} void evaporateFX(int)
+ boolean isEmpty()
+ void destroy()
+ String title()
+ String info()
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
}


enum com.shatteredpixel.shatteredpixeldungeon.items.Type {
+  HEAP
+  FOR_SALE
+  CHEST
+  LOCKED_CHEST
+  CRYSTAL_CHEST
+  TOMB
+  SKELETON
+  REMAINS
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FungalSentry {
+ boolean reset()
+ float spawningWeight()
# boolean getCloser(int)
# boolean getFurther(int)
+ int damageRoll()
# boolean canAttack(Char)
+ int attackProc(Char,int)
+ int attackSkill(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FungalSentry$Waiting {
+ boolean act(boolean,boolean)
# boolean noticeEnemy()
}

abstract class com.shatteredpixel.shatteredpixeldungeon.tiles.CustomTilemap {
# {static} int SIZE
+ int tileX
+ int tileW
# Object texture
# Tilemap vis
- {static} String TILE_X
- {static} String TILE_Y
- {static} String TILE_W
- {static} String TILE_H
+ void pos(int)
+ void pos(int,Level)
+ void pos(int,int)
+ void setRect(int,int)
+ void setRect(int,int,int,int)
# int[] mapSimpleImage(int,int,int)
+ Tilemap create()
+ Image image(int,int)
+ String name(int,int)
+ String desc(int,int)
+ void restoreFromBundle(Bundle)
+ void storeInBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.traps.ChillingTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.ThrowingSpear {
}
class com.shatteredpixel.shatteredpixeldungeon.effects.ShadowBox {
+ {static} float SIZE
+ void size(float,float)
+ void boxRect(float,float,float,float)
}


class com.shatteredpixel.shatteredpixeldungeon.effects.particles.SnowParticle {
+ {static} Emitter.Factory FACTORY
+ void reset(float,float)
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretMazeRoom {
+ int minWidth()
+ int minHeight()
+ int maxWidth()
+ int maxHeight()
+ void paint(Level)
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Rotberry {
+ void activate(Char)
+ void wither()
}

class com.shatteredpixel.shatteredpixeldungeon.plants.Rotberry$Seed {
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfFrost {
+ void shatter(int)
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.spells.MagicalInfusion {
# boolean usableOnItem(Item)
# void onItemSelected(Item)
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.items.spells.MagicalInfusion$Recipe {
}
class com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Multiplicity {
- {static} ItemSprite.Glowing BLACK
+ int proc(Armor,Char,Char,int)
+ ItemSprite.Glowing glowing()
+ boolean curse()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CausticSlime {
+ int attackProc(Char,int)
+ void rollToDropLoot()
}

class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Awareness {
+ {static} float DURATION
+ void detach()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.BanditSprite {
}
class com.shatteredpixel.shatteredpixeldungeon.levels.traps.GnollRockfallTrap {
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.AntiEntropy {
- {static} ItemSprite.Glowing BLACK
+ int proc(Armor,Char,Char,int)
+ Glowing glowing()
+ boolean curse()
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.ImpSprite {
+ void link(Char)
+ void onComplete(Animation)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Corrupting {
- {static} ItemSprite.Glowing BLACK
+ int proc(Weapon,Char,Char,int)
+ ItemSprite.Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLightning {
- ArrayList<Char> affected
- ArrayList<Lightning.Arc> arcs
+ int min(int)
+ int max(int)
+ void onZap(Ballistica)
+ void onHit(MagesStaff,Char,Char,int)
- void arc(Char)
+ void fx(Ballistica,Callback)
+ void staffFx(MagesStaff.StaffParticle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLightning$LightningOnHit {
# float procChanceMultiplier(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.traps.PoisonDartTrap {
# int poisonAmount()
# boolean canTarget(Char)
+ void activate()
}

class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfHaste {
+ String statsInfo()
# RingBuff buff()
+ {static} float speedMultiplier(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfHaste$Haste {
}
class com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfCleansing {
+ void apply(Hero)
+ void shatter(int)
+ {static} void cleanse(Char)
+ {static} void cleanse(Char,float)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfCleansing$Cleanse {
+ {static} float DURATION
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.ParalyticDart {
+ int proc(Char,Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Monk {
# float focusCooldown
- {static} String FOCUS_COOLDOWN
+ int damageRoll()
+ int attackSkill(Char)
+ float attackDelay()
+ int drRoll()
+ void rollToDropLoot()
# boolean act()
# void spend(float)
+ void move(int,boolean)
+ int defenseSkill(Char)
+ String defenseVerb()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Monk$Focus {
+ int icon()
+ void tintIcon(Image)
}

class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalWisp {
+ {static} String SPRITE
+ boolean[] modifyPassable(boolean[])
+ int damageRoll()
+ int attackSkill(Char)
+ int drRoll()
# boolean canAttack(Char)
# boolean doAttack(Char)
- void zap()
+ void onZapComplete()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalWisp$LightBeam {
}
class com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite {
+ {static} int DEFAULT
+ {static} int POSITIVE
+ {static} int NEGATIVE
+ {static} int WARNING
+ {static} int NEUTRAL
+ {static} float DEFAULT_MOVE_INTERVAL
- {static} float moveInterval
- {static} float FLASH_INTERVAL
# float perspectiveRaise
# boolean renderShadow
# float shadowWidth
# float shadowHeight
# float shadowOffset
- int stunStates
# Animation idle
# Animation run
# Animation attack
# Animation operate
# Animation zap
# Animation die
# Callback animCallback
# PosTweener motion
# Emitter burning
# Emitter chilled
# Emitter marked
# Emitter levitation
# Emitter healing
# Emitter hearts
# IceBlock iceBlock
# DarkBlock darkBlock
# TorchHalo light
# ShieldHalo shield
# AlphaTweener invisible
# Flare aura
# EmoIcon emo
# CharHealthIndicator health
- Tweener jumpTweener
- Callback jumpCallback
# float flashTime
# boolean sleeping
+ Char ch
+ boolean isMoving
- float[] shadowMatrix
+ void play(Animation)
+ void link(Char)
+ void destroy()
+ void linkVisuals(Char)
+ PointF worldToCamera(int)
+ void place(int)
+ void showStatus(int,String,Object)
+ void showStatusWithIcon(int,String,int,Object)
+ void idle()
+ void move(int,int)
+ {static} void setMoveInterval(float)
+ PointF destinationCenter()
+ void interruptMotion()
+ void attack(int)
+ void attack(int,Callback)
+ void operate(int)
+ void operate(int,Callback)
+ void zap(int)
+ void zap(int,Callback)
+ void turnTo(int,int)
+ void jump(int,int,Callback)
+ void jump(int,int,float,float,Callback)
+ void die()
+ Emitter emitter()
+ Emitter centerEmitter()
+ Emitter bottomEmitter()
+ void burst(int,int)
+ void bloodBurstA(PointF,int)
+ int blood()
+ void flash()
+ void add(State)
+ void remove(State)
+ void aura(int)
+ void clearAura()
+ void update()
+ void resetColor()
+ void showSleep()
+ void hideSleep()
+ void showAlert()
+ void hideAlert()
+ void showLost()
+ void hideLost()
+ void hideEmo()
+ void kill()
# void updateMatrix()
+ void draw()
+ void onComplete(Tweener)
+ void onComplete(Animation)
}


enum com.shatteredpixel.shatteredpixeldungeon.sprites.State {
+  BURNING
+  LEVITATING
+  INVISIBLE
+  PARALYSED
+  FROZEN
+  ILLUMINATED
+  CHILLED
+  DARKENED
+  MARKED
+  HEALING
+  SHIELDED
+  HEARTS
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite$JumpTweener {
+ CharSprite visual
+ PointF start
+ PointF end
+ float height
# void updateValues(float)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.MirrorSprite {
- {static} int FRAME_WIDTH
- {static} int FRAME_HEIGHT
+ void link(Char)
+ void bloodBurstA(PointF,int)
+ void updateArmor()
+ void updateArmor(int)
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Viscosity {
- {static} ItemSprite.Glowing PURPLE
+ int proc(Armor,Char,Char,int)
+ Glowing glowing()
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Viscosity$ViscosityTracker {
- int level
+ int deferDamage(int)
+ boolean act()
}


class com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Viscosity$DeferedDamage {
# int damage
- {static} String DAMAGE
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ boolean attachTo(Char)
+ void prolong(int)
+ int icon()
+ String iconTextDisplay()
+ boolean act()
+ String desc()
}


class com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfPsionicBlast {
+ void doRead()
}

class com.shatteredpixel.shatteredpixeldungeon.levels.SewerLevel {
+ {static} String[] SEWER_TRACK_LIST
+ {static} float[] SEWER_TRACK_CHANCES
+ void playLevelMusic()
# int standardRooms(boolean)
# int specialRooms(boolean)
# Painter painter()
+ String tilesTex()
+ String waterTex()
# Class<?>[] trapClasses()
# float[] trapChances()
# void createMobs()
+ boolean activateTransition(Hero,LevelTransition)
+ Group addVisuals()
+ {static} void addSewerVisuals(Level,Group)
+ String tileName(int)
+ String tileDesc(int)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.SewerLevel$Sink {
- int pos
- float rippleDelay
- {static} Emitter.Factory factory
+ void update()
}


class com.shatteredpixel.shatteredpixeldungeon.levels.SewerLevel$WaterParticle {
+ void reset(float,float)
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal {
+ {static} int WIDTH_P
+ {static} int HEIGHT_P
+ {static} int WIDTH_L
+ {static} int HEIGHT_L
- {static} int ITEM_HEIGHT
- GuideTab guideTab
- AlchemyTab alchemyTab
- NotesTab notesTab
- CatalogTab catalogTab
- LoreTab loreTab
+ {static} int last_index
+ void offset(int,int)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$GuideTab {
- ScrollingListPane list
# void createChildren()
# void layout()
- void updateList()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$AlchemyTab {
- RedButton[] pageButtons
- {static} int NUM_BUTTONS
- {static} int[] sprites
+ {static} int currentPageIdx
- IconTitle title
- RenderedTextBlock body
- ScrollPane list
- ArrayList<QuickRecipe> recipes
# void createChildren()
# void layout()
- void updateList()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$NotesTab {
- ScrollingListPane list
# void createChildren()
# void layout()
- void updateList()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$CatalogTab {
- RedButton[] itemButtons
- {static} int NUM_BUTTONS
- {static} int currentItemIdx
- {static} int WEAPON_IDX
- {static} int ARMOR_IDX
- {static} int WAND_IDX
- {static} int RING_IDX
- {static} int ARTIF_IDX
- {static} int POTION_IDX
- {static} int SCROLL_IDX
- {static} int[] spriteIndexes
- ScrollingListPane list
# void createChildren()
# void layout()
- void updateList()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$LoreTab {
- ScrollingListPane list
# void createChildren()
# void layout()
- void updateList()
}


class com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FungalSpinner {
# void applyWebToCell(int)
+ void damage(int,Object)
+ int attackProc(Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion {
+ {static} HashMap<Class<? extends Potion>,Class<? extends ExoticPotion>> regToExo
+ {static} HashMap<Class<? extends ExoticPotion>,Class<? extends Potion>> exoToReg
+ boolean isKnown()
+ void setKnown()
+ void reset()
+ int value()
+ int energyVal()
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion$PotionToExotic {
+ boolean testIngredients(ArrayList<Item>)
+ int cost(ArrayList<Item>)
+ Item brew(ArrayList<Item>)
+ Item sampleOutput(ArrayList<Item>)
}

class com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfEnchantment {
# boolean usableOnItem(Item)
# void onItemSelected(Item)
+ int value()
+ int energyVal()
}

class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfTenacity {
+ String statsInfo()
# RingBuff buff()
+ {static} float damageMultiplier(Char)
}

class com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfTenacity$Tenacity {
}
class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Hex {
+ {static} float DURATION
+ int icon()
+ float iconFadePercent()
}


class com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfBlink {
- {static} Ballistica throwPath
+ int throwPos(Hero,int)
# void onThrow(int)
# void activate(int)
}


class com.shatteredpixel.shatteredpixeldungeon.levels.traps.GeyserTrap {
+ int centerKnockBackDirection
+ Object source
+ void activate()
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoPlant {
}
class com.shatteredpixel.shatteredpixeldungeon.items.bags.PotionBandolier {
+ boolean canHold(Item)
+ int capacity()
+ int value()
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfDivineInspiration {
# {static} boolean identifiedByUse
# void drink(Hero)
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfDivineInspiration$DivineInspirationTracker {
- boolean[] boostedTiers
- {static} String BOOSTED_TIERS
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ void setBoosted(int)
+ boolean isBoosted(int)
}


class com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.WarScythe {
+ int max(int)
+ String targetingPrompt()
# void duelistAbility(Hero,Integer)
+ String abilityInfo()
}

class com.shatteredpixel.shatteredpixeldungeon.windows.WndWandmaker {
- {static} int WIDTH
- {static} int BTN_SIZE
- {static} int BTN_GAP
- {static} int GAP
~ Wandmaker wandmaker
~ Item questItem
- void selectReward(Item)
}


class com.shatteredpixel.shatteredpixeldungeon.windows.WndWandmaker$RewardWindow {
}
class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.MimicTooth {
# int upgradeEnergyCost()
+ String desc()
+ {static} float mimicChanceMultiplier()
+ {static} float mimicChanceMultiplier(int)
+ {static} boolean stealthyMimics()
+ {static} float ebonyMimicChance()
+ {static} float ebonyMimicChance(int)
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.RitualExitRoom {
+ boolean isExit()
# void placeloot(Level,Point)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite {
# int boltType
- Emitter particles
# {abstract}int texOffset()
# {abstract}Emitter createEmitter()
+ void link(Char)
+ void update()
+ void die()
+ void kill()
+ void zap(int)
+ void onComplete(Animation)
}


class com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite$Fire {
# int texOffset()
# Emitter createEmitter()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite$NewbornFire {
# int texOffset()
# Emitter createEmitter()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite$Frost {
# int texOffset()
# Emitter createEmitter()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite$Shock {
+ void zap(int)
# int texOffset()
# Emitter createEmitter()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite$Chaos {
# int texOffset()
# Emitter createEmitter()
+ int blood()
}

class com.shatteredpixel.shatteredpixeldungeon.items.special.ArcaneResin {
- {static} String AC_APPLY
- WndBag.ItemSelector itemSelector
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
+ boolean isUpgradable()
+ boolean isIdentified()
+ int value()
}


class com.shatteredpixel.shatteredpixeldungeon.items.special.ArcaneResin$Recipe {
+ boolean testIngredients(ArrayList<Item>)
+ int cost(ArrayList<Item>)
+ Item brew(ArrayList<Item>)
+ Item sampleOutput(ArrayList<Item>)
}

abstract class com.shatteredpixel.shatteredpixeldungeon.items.remains.RemainsItem {
+ {static} String AC_USE
+ ArrayList<String> actions(Hero)
+ void execute(Hero,String)
# {abstract}void doEffect(Hero)
+ boolean isIdentified()
+ boolean isUpgradable()
+ int value()
+ {static} RemainsItem get(HeroClass)
}


class com.shatteredpixel.shatteredpixeldungeon.scenes.InterlevelScene {
- {static} float SLOW_FADE
- {static} float NORM_FADE
- {static} float FAST_FADE
- {static} float fadeTime
+ {static} Mode mode
+ {static} LevelTransition curTransition
+ {static} int returnDepth
+ {static} int returnBranch
+ {static} int returnPos
+ {static} boolean fallIntoPit
- Phase phase
- float timeLeft
- RenderedTextBlock message
- {static} Thread thread
- {static} Exception error
- float waitingTime
+ {static} int lastRegion
+ void create()
+ void update()
- void descend()
- void fall()
- void ascend()
- void returnTo()
- void restore()
- void resurrect()
- void reset()
# void onBackPressed()
}


enum com.shatteredpixel.shatteredpixeldungeon.scenes.Mode {
+  DESCEND
+  ASCEND
+  CONTINUE
+  RESURRECT
+  RETURN
+  FALL
+  RESET
+  NONE
}

enum com.shatteredpixel.shatteredpixeldungeon.scenes.Phase {
+  FADE_IN
+  STATIC
+  FADE_OUT
}

class com.shatteredpixel.shatteredpixeldungeon.sprites.BatSprite {
}
class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.BlindingDart {
+ int proc(Char,Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfCorrosion {
+ void onZap(Ballistica)
+ void fx(Ballistica,Callback)
+ void onHit(MagesStaff,Char,Char,int)
+ void staffFx(MagesStaff.StaffParticle)
+ String statsDesc()
}

class com.shatteredpixel.shatteredpixeldungeon.items.trinkets.ThirteenLeafClover {
# int upgradeEnergyCost()
+ String desc()
+ {static} float combatDistributionInverseChance()
+ {static} float combatDistributionInverseChance(int)
+ {static} int invCombatRoll(int,int)
}

class com.shatteredpixel.shatteredpixeldungeon.effects.BlobEmitter {
- Blob blob
+ RectF bound
# void emit(int)
}


class com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Berserk {
- State state
- {static} float LEVEL_RECOVER_START
- float levelRecovery
- {static} int TURN_RECOVERY_START
- int turnRecovery
+ int powerLossBuffer
- float power
- {static} String STATE
- {static} String LEVEL_RECOVERY
- {static} String TURN_RECOVERY
- {static} String POWER
- {static} String POWER_BUFFER
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
+ boolean act()
+ void detach()
+ float enchantFactor(float)
+ float damageFactor(float)
+ boolean berserking()
- void startBerserking()
+ void damage(int)
+ void recover(float)
+ String actionName()
+ int actionIcon()
+ Visual secondaryVisual()
+ int indicatorColor()
+ void doAction()
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String name()
+ String desc()
}


enum com.shatteredpixel.shatteredpixeldungeon.actors.buffs.State {
+  NORMAL
+  BERSERK
+  RECOVERING
}

abstract class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom {
+ SizeCategory sizeCat
- {static} ArrayList<Class<? extends StandardRoom>> rooms
- {static} float[][] chances
+ float[] sizeCatProbs()
+ boolean setSizeCat()
+ boolean setSizeCat(int)
+ boolean setSizeCat(int,int)
+ int minWidth()
+ int maxWidth()
+ int minHeight()
+ int maxHeight()
+ int sizeFactor()
+ int mobSpawnWeight()
+ int connectionWeight()
+ boolean canMerge(Level,Room,Point,int)
+ {static} StandardRoom createRoom()
}


enum com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.SizeCategory {
+  NORMAL
+  LARGE
+  GIANT
+ int minDim
+ int roomValue
}

class com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MineLargeRoom {
+ float[] sizeCatProbs()
+ int minHeight()
+ int minWidth()
# float fill()
+ int mobSpawnWeight()
+ void paint(Level)
- void findInternalCells(Level,int,ArrayList<Integer>)
}

class com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.CleansingDart {
+ int proc(Char,Char,int)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfAquaticRejuvenation {
+ void apply(Hero)
}

class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfAquaticRejuvenation$AquaHealing {
- int left
- {static} String LEFT
+ void set(int)
+ boolean act()
+ int icon()
+ void tintIcon(Image)
+ float iconFadePercent()
+ String iconTextDisplay()
+ String desc()
+ void storeInBundle(Bundle)
+ void restoreFromBundle(Bundle)
}


class com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfAquaticRejuvenation$Recipe {
}
class com.shatteredpixel.shatteredpixeldungeon.ui.changelist.ChangeInfo {
# ColorBlock line
- RenderedTextBlock title
+ boolean major
- RenderedTextBlock text
- ArrayList<ChangeButton> buttons
+ void hardlight(int)
+ void addButton(ChangeButton)
+ boolean onClick(float,float)
# void layout()
}




com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.Elixir
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ArcaneArmor
com.shatteredpixel.shatteredpixeldungeon.windows.WndTitledMessage <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndError
com.watabou.noosa.particles.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.SmokeParticle
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Bolas
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfDread
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfForesight
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Weakness
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blizzard
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.HandAxe
com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Explosive
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.GnollSprite
com.shatteredpixel.shatteredpixeldungeon.levels.Level <|-- com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel
com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel$CityEntrance
com.shatteredpixel.shatteredpixeldungeon.levels.caves.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel$CityEntrance
com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel$EntranceOverhang
com.shatteredpixel.shatteredpixeldungeon.levels.caves.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel$EntranceOverhang
com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel$ArenaVisuals
com.shatteredpixel.shatteredpixeldungeon.levels.caves.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel$ArenaVisuals
com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel$PylonEnergy
com.shatteredpixel.shatteredpixeldungeon.levels.caves.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesBossLevel$PylonEnergy
com.shatteredpixel.shatteredpixeldungeon.items.armor.ClassArmor <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.DuelistArmor
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Action <|.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$UnarmedAbilityTracker
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$UnarmedAbilityTracker
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$JustHitTracker
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$JustHitTracker
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$FlurryEmpowerTracker
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$FlurryEmpowerTracker
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Flurry
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Flurry
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Focus
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Focus
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Focus +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Focus$FocusBuff
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Focus$FocusBuff
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Focus +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Focus$FocusActivation
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Focus$FocusActivation
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Dash
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Dash
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$DragonKick
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$DragonKick
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Meditate
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Meditate
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Meditate +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Meditate$MeditateResistance
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy$MonkAbility$Meditate$MeditateResistance
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith
com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$WndReforge
com.shatteredpixel.shatteredpixeldungeon.windows.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$WndReforge
com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$HardenSelector
com.shatteredpixel.shatteredpixeldungeon.windows.ItemSelector <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$HardenSelector
com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$UpgradeSelector
com.shatteredpixel.shatteredpixeldungeon.windows.ItemSelector <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$UpgradeSelector
com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$WndSmith
com.shatteredpixel.shatteredpixeldungeon.windows.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$WndSmith
com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$WndSmith +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$WndSmith$RewardWindow
com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoItem <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith$WndSmith$RewardWindow
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.MenuPane
com.shatteredpixel.shatteredpixeldungeon.ui.MenuPane +.. com.shatteredpixel.shatteredpixeldungeon.ui.MenuPane$JournalButton
com.shatteredpixel.shatteredpixeldungeon.ui.Button <|-- com.shatteredpixel.shatteredpixeldungeon.ui.MenuPane$JournalButton
com.shatteredpixel.shatteredpixeldungeon.ui.MenuPane +.. com.shatteredpixel.shatteredpixeldungeon.ui.MenuPane$MenuButton
com.shatteredpixel.shatteredpixeldungeon.ui.Button <|-- com.shatteredpixel.shatteredpixeldungeon.ui.MenuPane$MenuButton
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.TippedDart <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.HolyDart
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.InventoryScroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfTransmutation
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.HealthBar
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.BadgesScene
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.ChasmBridgeRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.ChasmBridgeEntranceRoom
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfStamina
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfLevitation
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.Elixir <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfIcyTouch
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfIcyTouch +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfIcyTouch$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfIcyTouch$Recipe
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.Ratmogrify
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.Ratmogrify +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.Ratmogrify$TransmogRat
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.Ratmogrify$TransmogRat
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfMirrorImage
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretSummoningRoom
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.PetrifiedSeed
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfAntiMagic
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.ParchmentScrap
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.ExoticCrystals
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Sheep
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Dirk
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.GrippingTrap
com.shatteredpixel.shatteredpixeldungeon.effects.Splash +.. com.shatteredpixel.shatteredpixeldungeon.effects.Splash$SplashFactory
com.shatteredpixel.shatteredpixeldungeon.effects.Factory <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Splash$SplashFactory
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Greatsword
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.RipperSprite
com.shatteredpixel.shatteredpixeldungeon.windows.WndTitledMessage <|-- com.shatteredpixel.shatteredpixeldungeon.ui.changelist.WndChanges
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Elastic
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Thief
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Thief +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Thief$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Wandering <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Thief$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Thief +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Thief$Fleeing
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Fleeing <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Thief$Fleeing
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfDragonsBreath
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.changelist.ChangeButton
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretHoneypotRoom
com.shatteredpixel.shatteredpixeldungeon.ui.buttons.StyledButton <|-- com.shatteredpixel.shatteredpixeldungeon.ui.RedButton
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ShieldBuff
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Scorpio
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.MonkSprite
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndGame
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.NecromancerSprite
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb <|-- com.shatteredpixel.shatteredpixeldungeon.items.bombs.HolyBomb
com.shatteredpixel.shatteredpixeldungeon.items.bombs.HolyBomb +.. com.shatteredpixel.shatteredpixeldungeon.items.bombs.HolyBomb$HolyDamage
com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Polarized
com.watabou.utils.Bundlable <|.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndOptions
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGuard
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGuard +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGuard$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Wandering <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGuard$Wandering
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfRage
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.TippedDart <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.HealingDart
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.RightClickMenu
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CaveRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.CaveExitRoom
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ShopkeeperSprite
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ToxicImbue
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass$hourglassRecharge
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ArtifactBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass$hourglassRecharge
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass$timeStasis
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ArtifactBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass$timeStasis
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass$timeFreeze
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ArtifactBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass$timeFreeze
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass$sandBag
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass$sandBag
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Gauntlet
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndChooseSubclass
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar
com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar +.. com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar$Tool
com.shatteredpixel.shatteredpixeldungeon.ui.Button <|-- com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar$Tool
com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar +.. com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar$QuickslotTool
com.shatteredpixel.shatteredpixeldungeon.ui.Tool <|-- com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar$QuickslotTool
com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar +.. com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar$SlotSwapTool
com.shatteredpixel.shatteredpixeldungeon.ui.Tool <|-- com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar$SlotSwapTool
com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar +.. com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar$PickedUpItem
com.shatteredpixel.shatteredpixeldungeon.ui.ItemSprite <|-- com.shatteredpixel.shatteredpixeldungeon.ui.Toolbar$PickedUpItem
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.StormCloud
com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfElements
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfElements +.. com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfElements$Resistance
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfElements$Resistance
com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite
com.watabou.noosa.particles.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.WebParticle
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.PlantsRoom
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.AssassinsBlade
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Bee
com.shatteredpixel.shatteredpixeldungeon.items.armor.ClassArmor <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.MageArmor
com.shatteredpixel.shatteredpixeldungeon.ui.Tag <|-- com.shatteredpixel.shatteredpixeldungeon.ui.tags.ActionIndicator
com.shatteredpixel.shatteredpixeldungeon.ui.tags.ActionIndicator +.. com.shatteredpixel.shatteredpixeldungeon.ui.tags.ActionIndicator$Action
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Ooze
com.shatteredpixel.shatteredpixeldungeon.items.keys.Key <|-- com.shatteredpixel.shatteredpixeldungeon.items.keys.IronKey
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.GrassyGraveRoom
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Feint
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Feint +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Feint$AfterImage
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Feint$AfterImage
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Feint$AfterImage +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Feint$AfterImage$FeintConfusion
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Feint$AfterImage$FeintConfusion
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Feint$AfterImage +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Feint$AfterImage$AfterImageSprite
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.MirrorSprite <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Feint$AfterImage$AfterImageSprite
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.WondrousResin
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.StatueRoom
com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Bulk
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfLiquidFlame
com.shatteredpixel.shatteredpixeldungeon.items.stones.InventoryStone <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfAugmentation
com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfAugmentation +.. com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfAugmentation$WndAugment
com.shatteredpixel.shatteredpixeldungeon.items.stones.Window <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfAugmentation$WndAugment
com.watabou.noosa.particles.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.PoisonParticle
com.shatteredpixel.shatteredpixeldungeon.items.food.Food <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.ChargrilledMeat
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.MossyClump
com.shatteredpixel.shatteredpixeldungeon.plants.Plant <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Earthroot
com.shatteredpixel.shatteredpixeldungeon.plants.Earthroot +.. com.shatteredpixel.shatteredpixeldungeon.plants.Earthroot$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Seed <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Earthroot$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Earthroot +.. com.shatteredpixel.shatteredpixeldungeon.plants.Earthroot$Armor
com.shatteredpixel.shatteredpixeldungeon.plants.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Earthroot$Armor
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CavesFissureRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.PatchRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CircleBasinRoom
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.BadgesGrid
com.shatteredpixel.shatteredpixeldungeon.ui.BadgesGrid +.. com.shatteredpixel.shatteredpixeldungeon.ui.BadgesGrid$BadgeButton
com.shatteredpixel.shatteredpixeldungeon.ui.Button <|-- com.shatteredpixel.shatteredpixeldungeon.ui.BadgesGrid$BadgeButton
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.Dart
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.TunnelRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.BridgeRoom
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.CorrosionTrap
com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.SpiritBow
com.shatteredpixel.shatteredpixeldungeon.items.weapon.SpiritBow +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.SpiritBow$SpiritArrow
com.shatteredpixel.shatteredpixeldungeon.items.weapon.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.SpiritBow$SpiritArrow
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.quest.Pickaxe
com.shatteredpixel.shatteredpixeldungeon.levels.builders.RegularBuilder <|-- com.shatteredpixel.shatteredpixeldungeon.levels.builders.BranchesBuilder
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Charm
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Crab
com.watabou.utils.Bundlable <|.. com.shatteredpixel.shatteredpixeldungeon.levels.features.LevelTransition
com.watabou.utils.Rect <|-- com.shatteredpixel.shatteredpixeldungeon.levels.features.LevelTransition
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfMindVision
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite$Blue
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite$Blue
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite$Green
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite$Green
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite$Red
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalGuardianSprite$Red
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Iterable <|.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.Belongings
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Belongings +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.Belongings$Backpack
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Bag <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.Belongings$Backpack
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Belongings +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.Belongings$ItemIterator
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Iterator <|.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.Belongings$ItemIterator
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.NaturesPower
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.NaturesPower +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.NaturesPower$naturesPowerTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.NaturesPower$naturesPowerTracker
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.journal.Guidebook
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.WarHammer
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.PatchRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.BurnedRoom
com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Dazzling
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Goo
com.shatteredpixel.shatteredpixeldungeon.items.stones.InventoryStone <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfIntuition
com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfIntuition +.. com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfIntuition$IntuitionUseTracker
com.shatteredpixel.shatteredpixeldungeon.items.stones.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfIntuition$IntuitionUseTracker
com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfIntuition +.. com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfIntuition$WndGuess
com.shatteredpixel.shatteredpixeldungeon.items.stones.Window <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfIntuition$WndGuess
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CirclePitRoom
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Trident
com.shatteredpixel.shatteredpixeldungeon.actors.Actor <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.AquariumRoom
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Pylon
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.MasterThievesArmband
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.MasterThievesArmband +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.MasterThievesArmband$StolenTracker
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CounterBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.MasterThievesArmband$StolenTracker
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.MasterThievesArmband +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.MasterThievesArmband$Thievery
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ArtifactBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.MasterThievesArmband$Thievery
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge$EliminationMatchTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge$EliminationMatchTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge$DuelParticipant
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge$DuelParticipant
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge$SpectatorFreeze
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge$SpectatorFreeze
com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfWealth
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfWealth +.. com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfWealth$Wealth
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfWealth$Wealth
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Regrowth
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.ConnectionRoom
com.shatteredpixel.shatteredpixeldungeon.items.KindofMisc <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact$ArtifactBuff
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact$ArtifactBuff
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Brute
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Brute +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Brute$BruteRage
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.ShieldBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Brute$BruteRage
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.DeathMark
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.DeathMark +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.DeathMark$DoubleMarkTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.DeathMark$DoubleMarkTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.DeathMark +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.DeathMark$DeathMarkTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.DeathMark$DeathMarkTracker
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.TengusMask
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ChaliceOfBlood
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ChaliceOfBlood +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ChaliceOfBlood$chaliceRegen
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ArtifactBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ChaliceOfBlood$chaliceRegen
com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfFear
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$DKGhoul
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$DKGhoul
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$DKMonk
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Monk <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$DKMonk
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$DKWarlock
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Warlock <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$DKWarlock
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$DKGolem
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Golem <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$DKGolem
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$Summoning
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$Summoning
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$KingDamager
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$KingDamager
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$DKBarrior
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Barrier <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DwarfKing$DKBarrior
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll +.. com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll$ScrollToExotic
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.Recipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll$ScrollToExotic
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.RotHeartSprite
com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Camouflage
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.SandalsOfNature
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.SandalsOfNature +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.SandalsOfNature$Naturalism
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ArtifactBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.SandalsOfNature$Naturalism
com.shatteredpixel.shatteredpixeldungeon.items.spells.TargetedSpell <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.ReclaimTrap
com.shatteredpixel.shatteredpixeldungeon.items.spells.ReclaimTrap +.. com.shatteredpixel.shatteredpixeldungeon.items.spells.ReclaimTrap$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.spells.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.ReclaimTrap$Recipe
com.watabou.utils.Bundlable <|.. com.shatteredpixel.shatteredpixeldungeon.plants.Plant
com.shatteredpixel.shatteredpixeldungeon.plants.Plant +.. com.shatteredpixel.shatteredpixeldungeon.plants.Plant$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Item <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Plant$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Plant$Seed +.. com.shatteredpixel.shatteredpixeldungeon.plants.Plant$Seed$PlaceHolder
com.shatteredpixel.shatteredpixeldungeon.plants.Seed <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Plant$Seed$PlaceHolder
com.shatteredpixel.shatteredpixeldungeon.ui.Listener <|.. com.shatteredpixel.shatteredpixeldungeon.ui.Window
com.watabou.noosa.Group <|-- com.shatteredpixel.shatteredpixeldungeon.ui.Window
com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Entanglement
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.TunnelRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.RingTunnelRoom
com.watabou.utils.Bundlable <|.. com.shatteredpixel.shatteredpixeldungeon.levels.Level
com.shatteredpixel.shatteredpixeldungeon.levels.Level +.. com.shatteredpixel.shatteredpixeldungeon.levels.Level$Respawner
com.shatteredpixel.shatteredpixeldungeon.levels.Actor <|-- com.shatteredpixel.shatteredpixeldungeon.levels.Level$Respawner
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CaveRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.CaveEntranceRoom
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight$Foresight
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ArtifactBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight$Foresight
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight$CharAwareness
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight$CharAwareness
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight$HeapAwareness
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TalismanOfForesight$HeapAwareness
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.LarvaSprite
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.Honeypot
com.shatteredpixel.shatteredpixeldungeon.items.Honeypot +.. com.shatteredpixel.shatteredpixeldungeon.items.Honeypot$ShatteredPot
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.Honeypot$ShatteredPot
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CavesFissureRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.CavesFissureExitRoom
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.Elixir <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfDragonsBlood
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfDragonsBlood +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfDragonsBlood$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfDragonsBlood$Recipe
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.WildMagic
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.WildMagic +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.WildMagic$WildMagicTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.WildMagic$WildMagicTracker
com.shatteredpixel.shatteredpixeldungeon.levels.painters.Painter <|-- com.shatteredpixel.shatteredpixeldungeon.levels.painters.RegularPainter
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.MirrorImage
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.MirrorImage +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.MirrorImage$MirrorInvis
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Invisibility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.MirrorImage$MirrorInvis
com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTerrainTilemap
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.CrabSprite
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AllyBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Corruption
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene
com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$Sky
com.shatteredpixel.shatteredpixeldungeon.scenes.Visual <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$Sky
com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$Cloud
com.shatteredpixel.shatteredpixeldungeon.scenes.Image <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$Cloud
com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$Avatar
com.shatteredpixel.shatteredpixeldungeon.scenes.Image <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$Avatar
com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$Pet
com.shatteredpixel.shatteredpixeldungeon.scenes.RatSprite <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$Pet
com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$GrassPatch
com.shatteredpixel.shatteredpixeldungeon.scenes.Image <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.SurfaceScene$GrassPatch
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.SacrificialFire
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.SacrificialFire +.. com.shatteredpixel.shatteredpixeldungeon.actors.blobs.SacrificialFire$Marked
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.SacrificialFire$Marked
com.shatteredpixel.shatteredpixeldungeon.effects.particles.Shrinking <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.FlameParticle
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.UnstableSpellbook
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.UnstableSpellbook +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.UnstableSpellbook$ExploitHandler
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.UnstableSpellbook$ExploitHandler
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.UnstableSpellbook +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.UnstableSpellbook$bookRecharge
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ArtifactBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.UnstableSpellbook$bookRecharge
com.shatteredpixel.shatteredpixeldungeon.effects.particles.Shrinking <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.SacrificialParticle
com.shatteredpixel.shatteredpixeldungeon.items.wands.DamageWand <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave$Knockback
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave$BlastWaveOnHit
com.shatteredpixel.shatteredpixeldungeon.items.wands.Elastic <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave$BlastWaveOnHit
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave$BlastWave
com.shatteredpixel.shatteredpixeldungeon.items.wands.Image <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave$BlastWave
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Crab <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GreatCrab
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GreatCrab +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GreatCrab$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Wandering <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GreatCrab$Wandering
com.shatteredpixel.shatteredpixeldungeon.plants.Plant <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Mageroyal
com.shatteredpixel.shatteredpixeldungeon.plants.Mageroyal +.. com.shatteredpixel.shatteredpixeldungeon.plants.Mageroyal$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Seed <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Mageroyal$Seed
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Piranha
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Piranha +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Piranha$Sleeping
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Sleeping <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Piranha$Sleeping
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Piranha +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Piranha$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Wandering <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Piranha$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Piranha +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Piranha$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Hunting <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Piranha$Hunting
com.shatteredpixel.shatteredpixeldungeon.Bundlable <|.. com.shatteredpixel.shatteredpixeldungeon.Record
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CaveRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MineGiantRoom
com.shatteredpixel.shatteredpixeldungeon.items.spells.Spell <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.SummonElemental
com.shatteredpixel.shatteredpixeldungeon.items.spells.SummonElemental +.. com.shatteredpixel.shatteredpixeldungeon.items.spells.SummonElemental$InvisAlly
com.shatteredpixel.shatteredpixeldungeon.items.spells.AllyBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.SummonElemental$InvisAlly
com.shatteredpixel.shatteredpixeldungeon.items.spells.SummonElemental +.. com.shatteredpixel.shatteredpixeldungeon.items.spells.SummonElemental$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.spells.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.SummonElemental$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb <|-- com.shatteredpixel.shatteredpixeldungeon.items.bombs.RegrowthBomb
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.TippedDart <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.DisplacingDart
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Move
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Move
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$PickUp
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$PickUp
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$OpenChest
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$OpenChest
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Buy
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Buy
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Interact
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Interact
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Unlock
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Unlock
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$LvlTransition
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$LvlTransition
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Mine
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Mine
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Alchemy
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Alchemy
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Attack
com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroAction$Attack
com.shatteredpixel.shatteredpixeldungeon.levels.Level <|-- com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel
com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel$FadingTraps
com.shatteredpixel.shatteredpixeldungeon.levels.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel$FadingTraps
com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel$ExitVisual
com.shatteredpixel.shatteredpixeldungeon.levels.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel$ExitVisual
com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel$ExitVisualWalls
com.shatteredpixel.shatteredpixeldungeon.levels.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel$ExitVisualWalls
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.ui.Banner
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.CorrosiveGas
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Slime
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa$Larva
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa$Larva
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa$YogRipper
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RipperDemon <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa$YogRipper
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa$YogEye
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Eye <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa$YogEye
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa$YogScorpio
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Scorpio <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogDzewa$YogScorpio
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.SupporterScene
com.shatteredpixel.shatteredpixeldungeon.scenes.SupporterScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.SupporterScene$SupporterMessage
com.shatteredpixel.shatteredpixeldungeon.scenes.Component <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.SupporterScene$SupporterMessage
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.HeroicLeap
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.HeroicLeap +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.HeroicLeap$DoubleJumpTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.HeroicLeap$DoubleJumpTracker
com.shatteredpixel.shatteredpixeldungeon.levels.Level <|-- com.shatteredpixel.shatteredpixeldungeon.levels.HallsBossLevel
com.shatteredpixel.shatteredpixeldungeon.levels.HallsBossLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.HallsBossLevel$CenterPieceVisuals
com.shatteredpixel.shatteredpixeldungeon.levels.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.HallsBossLevel$CenterPieceVisuals
com.shatteredpixel.shatteredpixeldungeon.levels.HallsBossLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.HallsBossLevel$CenterPieceWalls
com.shatteredpixel.shatteredpixeldungeon.levels.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.HallsBossLevel$CenterPieceWalls
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.AboutScene
com.shatteredpixel.shatteredpixeldungeon.scenes.AboutScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.AboutScene$CreditsBlock
com.shatteredpixel.shatteredpixeldungeon.scenes.Component <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.AboutScene$CreditsBlock
com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.InventoryStone
com.shatteredpixel.shatteredpixeldungeon.levels.builders.RegularBuilder <|-- com.shatteredpixel.shatteredpixeldungeon.levels.builders.FigureEightBuilder
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene
com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene$InputButton
com.shatteredpixel.shatteredpixeldungeon.scenes.Component <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene$InputButton
com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene$CombineButton
com.shatteredpixel.shatteredpixeldungeon.scenes.Component <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene$CombineButton
com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene$OutputSlot
com.shatteredpixel.shatteredpixeldungeon.scenes.Component <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.AlchemyScene$OutputSlot
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfExperience
com.shatteredpixel.shatteredpixeldungeon.items.spells.InventorySpell <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.Recycle
com.shatteredpixel.shatteredpixeldungeon.items.spells.Recycle +.. com.shatteredpixel.shatteredpixeldungeon.items.spells.Recycle$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.spells.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.Recycle$Recipe
com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.HeroSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.WardSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.SheepSprite
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.quest.DarkGold
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.GuardianTrap
com.shatteredpixel.shatteredpixeldungeon.levels.traps.GuardianTrap +.. com.shatteredpixel.shatteredpixeldungeon.levels.traps.GuardianTrap$Guardian
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Statue <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.GuardianTrap$Guardian
com.shatteredpixel.shatteredpixeldungeon.levels.traps.GuardianTrap +.. com.shatteredpixel.shatteredpixeldungeon.levels.traps.GuardianTrap$GuardianSprite
com.shatteredpixel.shatteredpixeldungeon.levels.traps.StatueSprite <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.GuardianTrap$GuardianSprite
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.Brew <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.CausticBrew
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.CausticBrew +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.CausticBrew$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.CausticBrew$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfChallenge
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfChallenge +.. com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfChallenge$ChallengeArena
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfChallenge$ChallengeArena
com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Brimstone
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CircleBasinRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.CircleBasinEntranceRoom
com.shatteredpixel.shatteredpixeldungeon.journal.Notes +.. com.shatteredpixel.shatteredpixeldungeon.journal.Notes$Record
com.shatteredpixel.shatteredpixeldungeon.journal.Comparable <|.. com.shatteredpixel.shatteredpixeldungeon.journal.Notes$Record
com.shatteredpixel.shatteredpixeldungeon.journal.Bundlable <|.. com.shatteredpixel.shatteredpixeldungeon.journal.Notes$Record
com.shatteredpixel.shatteredpixeldungeon.journal.Notes +.. com.shatteredpixel.shatteredpixeldungeon.journal.Notes$LandmarkRecord
com.shatteredpixel.shatteredpixeldungeon.journal.Record <|-- com.shatteredpixel.shatteredpixeldungeon.journal.Notes$LandmarkRecord
com.shatteredpixel.shatteredpixeldungeon.journal.Notes +.. com.shatteredpixel.shatteredpixeldungeon.journal.Notes$KeyRecord
com.shatteredpixel.shatteredpixeldungeon.journal.Record <|-- com.shatteredpixel.shatteredpixeldungeon.journal.Notes$KeyRecord
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfStormClouds
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.Shockwave
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.TrapsRoom
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CloakOfShadows
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CloakOfShadows +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CloakOfShadows$cloakRecharge
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ArtifactBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CloakOfShadows$cloakRecharge
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CloakOfShadows +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CloakOfShadows$cloakStealth
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ArtifactBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CloakOfShadows$cloakStealth
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.DemonSpawnerRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.DemonSpawnerRoom +.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.DemonSpawnerRoom$CustomFloor
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.DemonSpawnerRoom$CustomFloor
com.shatteredpixel.shatteredpixeldungeon.ui.buttons.Button <|-- com.shatteredpixel.shatteredpixeldungeon.ui.buttons.QuickSlotButton
com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfEvasion
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfEvasion +.. com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfEvasion$Evasion
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfEvasion$Evasion
com.shatteredpixel.shatteredpixeldungeon.ui.Tag <|-- com.shatteredpixel.shatteredpixeldungeon.ui.LootIndicator
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.Spell
com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed <|-- com.shatteredpixel.shatteredpixeldungeon.ui.changelist.WndChangesTabbed
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CavesFissureRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.CavesFissureEntranceRoom
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.GnollSapperSprite
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.CurrencyIndicator
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.Endure
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.Endure +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.Endure$EndureTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.Endure$EndureTracker
com.shatteredpixel.shatteredpixeldungeon.effects.particles.Shrinking <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.BlastParticle
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfMagicalSight
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand
com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand$PlaceHolder
com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand$PlaceHolder
com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand$Charger
com.shatteredpixel.shatteredpixeldungeon.items.wands.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand$Charger
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.PatchRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.ChasmRoom
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.PrismaticImage
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.PrismaticImage +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.PrismaticImage$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Wandering <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.PrismaticImage$Wandering
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.TreasuryRoom
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.SpawnerSprite
com.watabou.utils.GameSettings <|-- com.shatteredpixel.shatteredpixeldungeon.SPDSettings
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Wraith
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.SkullsRoom
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.RankingsScene
com.shatteredpixel.shatteredpixeldungeon.scenes.RankingsScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.RankingsScene$Record
com.shatteredpixel.shatteredpixeldungeon.scenes.Button <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.RankingsScene$Record
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.ElementalStrike
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.ElementalStrike +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.ElementalStrike$DirectedPowerTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.ElementalStrike$DirectedPowerTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.ElementalStrike +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.ElementalStrike$ElementalStrikeLuckyTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.ElementalStrike$ElementalStrikeLuckyTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.ElementalStrike +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.ElementalStrike$ElementalStrikeFurrowCounter
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.CounterBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.ElementalStrike$ElementalStrikeFurrowCounter
com.shatteredpixel.shatteredpixeldungeon.items.food.Food <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.MysteryMeat
com.shatteredpixel.shatteredpixeldungeon.items.food.MysteryMeat +.. com.shatteredpixel.shatteredpixeldungeon.items.food.MysteryMeat$PlaceHolder
com.shatteredpixel.shatteredpixeldungeon.items.food.MysteryMeat <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.MysteryMeat$PlaceHolder
com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon$PlaceHolder
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon$PlaceHolder
com.shatteredpixel.shatteredpixeldungeon.actors.Actor <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Pushing
com.shatteredpixel.shatteredpixeldungeon.effects.Pushing +.. com.shatteredpixel.shatteredpixeldungeon.effects.Pushing$Effect
com.shatteredpixel.shatteredpixeldungeon.effects.Visual <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Pushing$Effect
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Bat
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Doom <|.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Corrosion
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Corrosion
com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfSharpshooting
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfSharpshooting +.. com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfSharpshooting$Aim
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfSharpshooting$Aim
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Guard
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Guard +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Guard$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Hunting <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Guard$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Blacksmith
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Blacksmith +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Blacksmith$Quest
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.PhantomPiranhaSprite
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb <|-- com.shatteredpixel.shatteredpixeldungeon.items.bombs.FrostBomb
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Quarterstaff
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Quarterstaff +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Quarterstaff$DefensiveStance
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Quarterstaff$DefensiveStance
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfShroudingFog
com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfMight
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfMight +.. com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfMight$Might
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfMight$Might
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$BurningFist
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$BurningFist
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$SoiledFist
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$SoiledFist
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$RottingFist
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$RottingFist
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$RustedFist
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$RustedFist
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$BrightFist
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$BrightFist
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$BrightFist +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$BrightFist$LightBeam
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$DarkFist
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$DarkFist
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$DarkFist +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist$DarkFist$DarkBolt
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Web
com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage +.. com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage$Sewers
com.shatteredpixel.shatteredpixeldungeon.items.journal.DocumentPage <|-- com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage$Sewers
com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage +.. com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage$Prison
com.shatteredpixel.shatteredpixeldungeon.items.journal.DocumentPage <|-- com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage$Prison
com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage +.. com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage$Caves
com.shatteredpixel.shatteredpixeldungeon.items.journal.DocumentPage <|-- com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage$Caves
com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage +.. com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage$City
com.shatteredpixel.shatteredpixeldungeon.items.journal.DocumentPage <|-- com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage$City
com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage +.. com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage$Halls
com.shatteredpixel.shatteredpixeldungeon.items.journal.DocumentPage <|-- com.shatteredpixel.shatteredpixeldungeon.items.journal.RegionLorePage$Halls
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.BattleAxe
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mimic
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Rat
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Vertigo
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Eye
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Eye +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Eye$DeathGaze
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Eye +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Eye$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Hunting <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Eye$Hunting
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Projecting
com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.LeatherArmor
com.shatteredpixel.shatteredpixeldungeon.actors.Char <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero$Doom
com.shatteredpixel.shatteredpixeldungeon.items.EquipableItem <|-- com.shatteredpixel.shatteredpixeldungeon.items.KindofMisc
com.shatteredpixel.shatteredpixeldungeon.ui.HealthBar <|-- com.shatteredpixel.shatteredpixeldungeon.ui.CharHealthIndicator
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfMetamorphosis
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfMetamorphosis +.. com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfMetamorphosis$WndMetamorphChoose
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.Window <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfMetamorphosis$WndMetamorphChoose
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfMetamorphosis +.. com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfMetamorphosis$WndMetamorphReplace
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.Window <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfMetamorphosis$WndMetamorphReplace
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.ThrowingSpike
com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndBag
com.shatteredpixel.shatteredpixeldungeon.windows.WndBag +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndBag$BagTab
com.shatteredpixel.shatteredpixeldungeon.windows.IconTab <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndBag$BagTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndBag +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndBag$Placeholder
com.shatteredpixel.shatteredpixeldungeon.windows.Item <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndBag$Placeholder
com.shatteredpixel.shatteredpixeldungeon.windows.WndBag +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndBag$ItemSelector
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite$Blue
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite$Blue
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite$Green
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite$Green
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite$Red
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalWispSprite$Red
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretWellRoom
com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoItem <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndUseItem
com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfAccuracy
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfAccuracy +.. com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfAccuracy$Accuracy
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfAccuracy$Accuracy
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollSapper
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollSapper +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollSapper$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Hunting <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollSapper$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollSapper +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollSapper$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Wandering <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollSapper$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.ConfusionGas
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.ShadowClone
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.ShadowClone +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.ShadowClone$ShadowAlly
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.DirectableAlly <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.ShadowClone$ShadowAlly
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.ShadowClone +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.ShadowClone$ShadowSprite
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.ShadowClone$ShadowSprite
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.LockedFloor
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.CursingTrap
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Piranha <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.PhantomPiranha
com.shatteredpixel.shatteredpixeldungeon.effects.particles.Shrinking <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.ElmoParticle
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.FungalSentrySprite
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom
com.shatteredpixel.shatteredpixeldungeon.ui.ScrollPane <|-- com.shatteredpixel.shatteredpixeldungeon.ui.BadgesList
com.shatteredpixel.shatteredpixeldungeon.ui.BadgesList +.. com.shatteredpixel.shatteredpixeldungeon.ui.BadgesList$ListItem
com.shatteredpixel.shatteredpixeldungeon.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.BadgesList$ListItem
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FrostImbue
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.quest.DwarfToken
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfEarthenArmor
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Shopkeeper
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.PhysicalEmpower
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.ShopRoom
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.effects.BadgeBanner
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StatuesRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.StatuesExitRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretChestChasmRoom
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene
com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene$NewsButton
com.shatteredpixel.shatteredpixeldungeon.scenes.StyledButton <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene$NewsButton
com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene$ChangesButton
com.shatteredpixel.shatteredpixeldungeon.scenes.StyledButton <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene$ChangesButton
com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene$SettingsButton
com.shatteredpixel.shatteredpixeldungeon.scenes.StyledButton <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene$SettingsButton
com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene$SupportButton
com.shatteredpixel.shatteredpixeldungeon.scenes.StyledButton <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.TitleScene$SupportButton
com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Displacement
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfMastery
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.GooBossRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.WalledGooRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.SuspiciousChestRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretLarderRoom
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.special.Ankh
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.ConfusionTrap
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RotLasher
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RotLasher +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RotLasher$Waiting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Wandering <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RotLasher$Waiting
com.shatteredpixel.shatteredpixeldungeon.items.spells.Spell <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.BeaconOfReturning
com.shatteredpixel.shatteredpixeldungeon.items.spells.BeaconOfReturning +.. com.shatteredpixel.shatteredpixeldungeon.items.spells.BeaconOfReturning$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.spells.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.BeaconOfReturning$Recipe
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.GrimTrap
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb <|-- com.shatteredpixel.shatteredpixeldungeon.items.bombs.WoollyBomb
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.WellWater
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Beam
com.shatteredpixel.shatteredpixeldungeon.effects.Beam +.. com.shatteredpixel.shatteredpixeldungeon.effects.Beam$DeathRay
com.shatteredpixel.shatteredpixeldungeon.effects.Beam <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Beam$DeathRay
com.shatteredpixel.shatteredpixeldungeon.effects.Beam +.. com.shatteredpixel.shatteredpixeldungeon.effects.Beam$LightRay
com.shatteredpixel.shatteredpixeldungeon.effects.Beam <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Beam$LightRay
com.shatteredpixel.shatteredpixeldungeon.effects.Beam +.. com.shatteredpixel.shatteredpixeldungeon.effects.Beam$HealthRay
com.shatteredpixel.shatteredpixeldungeon.effects.Beam <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Beam$HealthRay
com.shatteredpixel.shatteredpixeldungeon.items.KindOfWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon
com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon$Enchantment
com.shatteredpixel.shatteredpixeldungeon.items.weapon.Bundlable <|.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon$Enchantment
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Vulnerable
com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfWarding
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfWarding +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfWarding$Ward
com.shatteredpixel.shatteredpixeldungeon.items.wands.NPC <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfWarding$Ward
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Tomahawk
com.shatteredpixel.shatteredpixeldungeon.levels.painters.RegularPainter <|-- com.shatteredpixel.shatteredpixeldungeon.levels.painters.HallsPainter
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.EtherealChains
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.EtherealChains +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.EtherealChains$chainsRecharge
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ArtifactBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.EtherealChains$chainsRecharge
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Transmuting
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.RitualRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.RitualEntranceRoom
com.shatteredpixel.shatteredpixeldungeon.plants.Plant <|-- com.shatteredpixel.shatteredpixeldungeon.plants.BlandfruitBush
com.shatteredpixel.shatteredpixeldungeon.plants.BlandfruitBush +.. com.shatteredpixel.shatteredpixeldungeon.plants.BlandfruitBush$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Seed <|-- com.shatteredpixel.shatteredpixeldungeon.plants.BlandfruitBush$Seed
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Blazing
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.SeniorSprite
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndDailies
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.LibraryRingRoom
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Kunai
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.MagicWellRoom
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.buttons.ItemButton
com.watabou.noosa.Visual <|-- com.shatteredpixel.shatteredpixeldungeon.effects.CircleArc
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.Torch
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.StenchGas
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.ThrowingKnife
com.shatteredpixel.shatteredpixeldungeon.items.remains.RemainsItem <|-- com.shatteredpixel.shatteredpixeldungeon.items.remains.SealShard
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Shuriken
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AllyBuff
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ScrollEmpower
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.OptionSlider
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Foliage
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoItem
com.watabou.noosa.MovieClip <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite$Glowing
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.InventoryScroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfUpgrade
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.Archs
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.AlarmTrap
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndList
com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Potential
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Rat <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FetidRat
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FetidRat +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FetidRat$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Wandering <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FetidRat$Wandering
com.shatteredpixel.shatteredpixeldungeon.windows.WndTitledMessage <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndQuest
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.Brew <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.ShockingBrew
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.ShockingBrew +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.ShockingBrew$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.ShockingBrew$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.Stylus
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Daze
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.SlimeSprite
com.shatteredpixel.shatteredpixeldungeon.items.food.Food <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.SupplyRation
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.ConnectionRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.PerimeterRoom
com.shatteredpixel.shatteredpixeldungeon.ui.ScrollPane <|-- com.shatteredpixel.shatteredpixeldungeon.ui.TalentsPane
com.shatteredpixel.shatteredpixeldungeon.ui.TalentsPane +.. com.shatteredpixel.shatteredpixeldungeon.ui.TalentsPane$TalentTierPane
com.shatteredpixel.shatteredpixeldungeon.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.TalentsPane$TalentTierPane
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$FireElemental
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$FireElemental
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$NewbornFireElemental
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FireElemental <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$NewbornFireElemental
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$AllyNewBornElemental
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.NewbornFireElemental <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$AllyNewBornElemental
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$FrostElemental
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$FrostElemental
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$ShockElemental
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$ShockElemental
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$ChaosElemental
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental$ChaosElemental
com.shatteredpixel.shatteredpixeldungeon.levels.features.Doom <|.. com.shatteredpixel.shatteredpixeldungeon.levels.features.Chasm
com.shatteredpixel.shatteredpixeldungeon.levels.features.Chasm +.. com.shatteredpixel.shatteredpixeldungeon.levels.features.Chasm$Falling
com.shatteredpixel.shatteredpixeldungeon.levels.features.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.levels.features.Chasm$Falling
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Ghost
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Ghost +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Ghost$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Wandering <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Ghost$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Ghost +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Ghost$Quest
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfPrismaticImage
com.shatteredpixel.shatteredpixeldungeon.windows.WndTitledMessage <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoTrap
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Bless
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Stamina
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Roots
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.RitualRoom
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Vampiric
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Dread
com.shatteredpixel.shatteredpixeldungeon.items.wands.DamageWand <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfDisintegration
com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Wayward
com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Wayward +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Wayward$WaywardBuff
com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Wayward$WaywardBuff
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.RitualSiteRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.RitualSiteRoom +.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.RitualSiteRoom$RitualMarker
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.RitualSiteRoom$RitualMarker
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Cripple
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.SegmentedLibraryRoom
com.shatteredpixel.shatteredpixeldungeon.items.remains.RemainsItem <|-- com.shatteredpixel.shatteredpixeldungeon.items.remains.BrokenHilt
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.ChangesScene
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Terror
com.shatteredpixel.shatteredpixeldungeon.actors.Actor <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff
com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.tiles.GridTileMap
com.shatteredpixel.shatteredpixeldungeon.items.spells.TargetedSpell <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.WildEnergy
com.shatteredpixel.shatteredpixeldungeon.items.spells.WildEnergy +.. com.shatteredpixel.shatteredpixeldungeon.items.spells.WildEnergy$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.spells.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.WildEnergy$Recipe
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SacrificeRoom
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.SpiritHawk
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.SpiritHawk +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.SpiritHawk$HawkAlly
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.DirectableAlly <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.SpiritHawk$HawkAlly
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.SpiritHawk +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.SpiritHawk$HawkSprite
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.SpiritHawk$HawkSprite
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.Brew <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.AquaBrew
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.AquaBrew +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.AquaBrew$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.AquaBrew$Recipe
com.shatteredpixel.shatteredpixeldungeon.levels.painters.RegularPainter <|-- com.shatteredpixel.shatteredpixeldungeon.levels.painters.CavesPainter
com.watabou.noosa.Gizmo <|-- com.shatteredpixel.shatteredpixeldungeon.effects.IceBlock
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Gloves
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.HornOfPlenty
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.HornOfPlenty +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.HornOfPlenty$hornRecharge
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ArtifactBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.HornOfPlenty$hornRecharge
com.shatteredpixel.shatteredpixeldungeon.levels.SewerLevel <|-- com.shatteredpixel.shatteredpixeldungeon.levels.SewerBossLevel
com.shatteredpixel.shatteredpixeldungeon.items.remains.RemainsItem <|-- com.shatteredpixel.shatteredpixeldungeon.items.remains.BrokenStaff
com.watabou.noosa.Halo <|-- com.shatteredpixel.shatteredpixeldungeon.effects.TorchHalo
com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Obfuscation
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.Toast
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretLibraryRoom
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.WarlockSprite
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndScoreBreakdown
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.RunicBlade
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.RunicBlade +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.RunicBlade$RunicSlashTracker
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.RunicBlade$RunicSlashTracker
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.ChasmBridgeRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.ChasmBridgeExitRoom
com.shatteredpixel.shatteredpixeldungeon.effects.particles.Shrinking <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.ShadowParticle
com.shatteredpixel.shatteredpixeldungeon.items.Recipe +.. com.shatteredpixel.shatteredpixeldungeon.items.Recipe$SimpleRecipe
com.shatteredpixel.shatteredpixeldungeon.items.Recipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.Recipe$SimpleRecipe
com.shatteredpixel.shatteredpixeldungeon.items.wands.DamageWand <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfMagicMissile
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfMagicMissile +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfMagicMissile$MagicCharge
com.shatteredpixel.shatteredpixeldungeon.items.wands.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfMagicMissile$MagicCharge
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.Elixir <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfHoneyedHealing
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfHoneyedHealing +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfHoneyedHealing$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfHoneyedHealing$Recipe
com.shatteredpixel.shatteredpixeldungeon.sprites.MirrorSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.PrismaticSprite
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.CounterBuff
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfShielding
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Doom <|.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Burning
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Burning
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.StorageRoom
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Katana
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.TormentedSpiritSprite
com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.ScaleArmor
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Imp
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Imp +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Imp$Quest
com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfDisarming
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Surprise
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretLaboratoryRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.WaterBridgeRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.WaterBridgeEntranceRoom
com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.DamageWand
com.watabou.noosa.Group <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Identification
com.shatteredpixel.shatteredpixeldungeon.effects.Identification +.. com.shatteredpixel.shatteredpixeldungeon.effects.Identification$Speck
com.shatteredpixel.shatteredpixeldungeon.effects.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Identification$Speck
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.quest.GooBlob
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.AlbinoSprite
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.HallwayRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.HallwayExitRoom
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Spear
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Shadows
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.Elixir <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfArcaneArmor
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfArcaneArmor +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfArcaneArmor$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfArcaneArmor$Recipe
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.ui.HeroIcon
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DemonSpawner
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Doom <|.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Hunger
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Hunger
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CircleWallRoom
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Unstable
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.Brew
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.RotLasherSprite
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.quest.CorpseDust
com.shatteredpixel.shatteredpixeldungeon.items.quest.CorpseDust +.. com.shatteredpixel.shatteredpixeldungeon.items.quest.CorpseDust$DustGhostSpawner
com.shatteredpixel.shatteredpixeldungeon.items.quest.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.quest.CorpseDust$DustGhostSpawner
com.shatteredpixel.shatteredpixeldungeon.items.quest.CorpseDust +.. com.shatteredpixel.shatteredpixeldungeon.items.quest.CorpseDust$DustWraith
com.shatteredpixel.shatteredpixeldungeon.items.quest.Wraith <|-- com.shatteredpixel.shatteredpixeldungeon.items.quest.CorpseDust$DustWraith
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.OozeTrap
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.SpectralNecromancerSprite
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.TippedDart <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.AdrenalineDart
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.GnollGeomancerSprite
com.shatteredpixel.shatteredpixeldungeon.items.remains.RemainsItem <|-- com.shatteredpixel.shatteredpixeldungeon.items.remains.BowFragment
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Recharging
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.WeakeningTrap
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicImmune
com.shatteredpixel.shatteredpixeldungeon.sprites.ScorpioSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.AcidicSprite
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.special.Dewdrop
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.WandmakerSprite
com.shatteredpixel.shatteredpixeldungeon.plants.Plant <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Starflower
com.shatteredpixel.shatteredpixeldungeon.plants.Starflower +.. com.shatteredpixel.shatteredpixeldungeon.plants.Starflower$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Seed <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Starflower$Seed
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.quest.Embers
com.watabou.noosa.particles.Emitter <|-- com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile
com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile +.. com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$MagicParticle
com.shatteredpixel.shatteredpixeldungeon.effects.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$MagicParticle
com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile +.. com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$EarthParticle
com.shatteredpixel.shatteredpixeldungeon.effects.Shrinking <|-- com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$EarthParticle
com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile +.. com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$ShamanParticle
com.shatteredpixel.shatteredpixeldungeon.effects.EarthParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$ShamanParticle
com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile +.. com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$WhiteParticle
com.shatteredpixel.shatteredpixeldungeon.effects.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$WhiteParticle
com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile +.. com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$SlowParticle
com.shatteredpixel.shatteredpixeldungeon.effects.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$SlowParticle
com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile +.. com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$ForceParticle
com.shatteredpixel.shatteredpixeldungeon.effects.Shrinking <|-- com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$ForceParticle
com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile +.. com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$WardParticle
com.shatteredpixel.shatteredpixeldungeon.effects.Shrinking <|-- com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile$WardParticle
com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfForce
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfForce +.. com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfForce$Force
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfForce$Force
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfForce +.. com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfForce$BrawlersStance
com.shatteredpixel.shatteredpixeldungeon.items.rings.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfForce$BrawlersStance
com.shatteredpixel.shatteredpixeldungeon.items.armor.ClassArmor <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.WarriorArmor
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.FetidRatSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.BruteSprite
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.Food
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicalSleep
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Spinner
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Spinner +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Spinner$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Hunting <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Spinner$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Spinner +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Spinner$Fleeing
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Fleeing <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Spinner$Fleeing
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.EyeOfNewt
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfPassage
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Chilling
com.watabou.noosa.Group <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Chains
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.SpinnerSprite
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.LaboratoryRoom
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.TenguSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.TenguSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.TenguSprite$TenguShuriken
com.shatteredpixel.shatteredpixeldungeon.sprites.Item <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.TenguSprite$TenguShuriken
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Healing
com.shatteredpixel.shatteredpixeldungeon.levels.painters.RegularPainter <|-- com.shatteredpixel.shatteredpixeldungeon.levels.painters.SewerPainter
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Action <|.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Combo
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Combo
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Combo +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Combo$ParryTracker
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Combo$ParryTracker
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Combo +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Combo$RiposteTracker
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Combo$RiposteTracker
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfRetribution
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb <|-- com.shatteredpixel.shatteredpixeldungeon.items.bombs.ArcaneBomb
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM200
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM200 +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM200$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Hunting <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM200$Hunting
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket +.. com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket$PlaceHolder
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket$PlaceHolder
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket +.. com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket$UpgradeTrinket
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Recipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket$UpgradeTrinket
com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfAggression
com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfAggression +.. com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfAggression$Aggression
com.shatteredpixel.shatteredpixeldungeon.items.stones.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfAggression$Aggression
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndTextInput
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Snake
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrinketCatalyst
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrinketCatalyst +.. com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrinketCatalyst$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Recipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrinketCatalyst$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrinketCatalyst +.. com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrinketCatalyst$WndTrinket
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Window <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrinketCatalyst$WndTrinket
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrinketCatalyst$WndTrinket +.. com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrinketCatalyst$WndTrinket$RewardWindow
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.WndInfoItem <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrinketCatalyst$WndTrinket$RewardWindow
com.shatteredpixel.shatteredpixeldungeon.plants.Plant <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Icecap
com.shatteredpixel.shatteredpixeldungeon.plants.Icecap +.. com.shatteredpixel.shatteredpixeldungeon.plants.Icecap$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Seed <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Icecap$Seed
com.shatteredpixel.shatteredpixeldungeon.ui.Tag <|-- com.shatteredpixel.shatteredpixeldungeon.ui.ResumeIndicator
com.watabou.noosa.Visual <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Flare
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Javelin
com.shatteredpixel.shatteredpixeldungeon.plants.Plant <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Stormvine
com.shatteredpixel.shatteredpixeldungeon.plants.Stormvine +.. com.shatteredpixel.shatteredpixeldungeon.plants.Stormvine$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Seed <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Stormvine$Seed
com.shatteredpixel.shatteredpixeldungeon.items.journal.DocumentPage <|-- com.shatteredpixel.shatteredpixeldungeon.items.journal.AlchemyPage
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.PylonSprite
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.ExplosiveTrap
com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Flow
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.PitfallTrap
com.shatteredpixel.shatteredpixeldungeon.levels.traps.PitfallTrap +.. com.shatteredpixel.shatteredpixeldungeon.levels.traps.PitfallTrap$DelayedPit
com.shatteredpixel.shatteredpixeldungeon.levels.traps.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.PitfallTrap$DelayedPit
com.watabou.utils.Callback <|.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Warlock
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Warlock
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Warlock +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Warlock$DarkBolt
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.ForceCube
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndKeyBindings
com.shatteredpixel.shatteredpixeldungeon.windows.WndKeyBindings +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndKeyBindings$BindingItem
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndKeyBindings$BindingItem
com.shatteredpixel.shatteredpixeldungeon.windows.WndKeyBindings +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndKeyBindings$WndChangeBinding
com.shatteredpixel.shatteredpixeldungeon.windows.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndKeyBindings$WndChangeBinding
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Burning
com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Burning
com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Soiled
com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Soiled
com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Rotting
com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Rotting
com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Rusted
com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Rusted
com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Bright
com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Bright
com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Dark
com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.FistSprite$Dark
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Chill
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.RatKingSprite
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.ElementalBlast
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.special.Amulet
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.Elixir <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfFeatherFall
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfFeatherFall +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfFeatherFall$FeatherBuff
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfFeatherFall$FeatherBuff
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfFeatherFall +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfFeatherFall$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfFeatherFall$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Swiftness
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.ImprovisedProjectileCooldown
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.LethalMomentumTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.StrikingWaveTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.CounterBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.WandPreservationCounter
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.EmpoweredStrikeTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.ProtectiveShadowsTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.BountyHunterTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.RejuvenatingStepsCooldown
com.shatteredpixel.shatteredpixeldungeon.actors.hero.CounterBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.RejuvenatingStepsFurrow
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.SeerShotCooldown
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.SpiritBladesTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.PatientStrikeTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.AggressiveBarrierCooldown
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.RestoredAgilityTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.LethalHasteCooldown
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.SwiftEquipCooldown
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.DeadlyFollowupTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.PreciseAssaultTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.VariedChargeTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.CombinedLethalityAbilityTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.CombinedLethalityTriggerTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.CombinedEnergyAbilityTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.CounterAbilityTacker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.CounterBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.CachedRationsDropped
com.shatteredpixel.shatteredpixeldungeon.actors.hero.CounterBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.NatureBerriesDropped
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.WarriorFoodImmunity
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.ProvokedAngerTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.LingeringMagicTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.SuckerPunchTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.FollowupStrikeTracker
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Golem
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Golem +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Golem$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Wandering <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Golem$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Golem +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Golem$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Hunting <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Golem$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.LostInventory
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Wraith <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.TormentedSpirit
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.LostBackpack
com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Metabolism
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.WaterBridgeRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.WaterBridgeExitRoom
com.shatteredpixel.shatteredpixeldungeon.actors.Actor <|-- com.shatteredpixel.shatteredpixeldungeon.actors.Char
com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Corrosion
com.shatteredpixel.shatteredpixeldungeon.items.spells.Spell <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.TargetedSpell
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.ScrollPane
com.shatteredpixel.shatteredpixeldungeon.ui.ScrollPane +.. com.shatteredpixel.shatteredpixeldungeon.ui.ScrollPane$PointerController
com.shatteredpixel.shatteredpixeldungeon.ui.ScrollArea <|-- com.shatteredpixel.shatteredpixeldungeon.ui.ScrollPane$PointerController
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Blooming
com.shatteredpixel.shatteredpixeldungeon.ui.RedButton <|-- com.shatteredpixel.shatteredpixeldungeon.ui.CheckBox
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sword
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sword +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sword$CleaveTracker
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sword$CleaveTracker
com.shatteredpixel.shatteredpixeldungeon.plants.Plant <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Fadeleaf
com.shatteredpixel.shatteredpixeldungeon.plants.Fadeleaf +.. com.shatteredpixel.shatteredpixeldungeon.plants.Fadeleaf$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Seed <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Fadeleaf$Seed
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.AlchemistsToolkit
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.AlchemistsToolkit +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.AlchemistsToolkit$kitEnergy
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ArtifactBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.AlchemistsToolkit$kitEnergy
com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesLevel <|-- com.shatteredpixel.shatteredpixeldungeon.levels.MiningLevel
com.shatteredpixel.shatteredpixeldungeon.levels.MiningLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.MiningLevel$BorderTopDarken
com.shatteredpixel.shatteredpixeldungeon.levels.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.MiningLevel$BorderTopDarken
com.shatteredpixel.shatteredpixeldungeon.levels.MiningLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.MiningLevel$BorderWallsDarken
com.shatteredpixel.shatteredpixeldungeon.levels.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.MiningLevel$BorderWallsDarken
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Freezing
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfParalyticGas
com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfClairvoyance
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfLullaby
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed
com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed$Tab
com.shatteredpixel.shatteredpixeldungeon.windows.Button <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed$Tab
com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed$LabeledTab
com.shatteredpixel.shatteredpixeldungeon.windows.Tab <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed$LabeledTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed$IconTab
com.shatteredpixel.shatteredpixeldungeon.windows.Tab <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed$IconTab
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Paralysis
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Paralysis +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Paralysis$ParalysisResist
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Paralysis$ParalysisResist
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose$roseRecharge
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ArtifactBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose$roseRecharge
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose$Petal
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose$Petal
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose$GhostHero
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DirectableAlly <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose$GhostHero
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose$GhostHero +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose$GhostHero$NoRoseDamage
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose$WndGhostHero
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Window <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose$WndGhostHero
com.shatteredpixel.shatteredpixeldungeon.items.wands.DamageWand <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfTransfusion
com.shatteredpixel.shatteredpixeldungeon.ui.ScrollPane <|-- com.shatteredpixel.shatteredpixeldungeon.ui.ScrollingListPane
com.shatteredpixel.shatteredpixeldungeon.ui.ScrollingListPane +.. com.shatteredpixel.shatteredpixeldungeon.ui.ScrollingListPane$ListItem
com.shatteredpixel.shatteredpixeldungeon.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.ScrollingListPane$ListItem
com.shatteredpixel.shatteredpixeldungeon.ui.ScrollingListPane +.. com.shatteredpixel.shatteredpixeldungeon.ui.ScrollingListPane$ListTitle
com.shatteredpixel.shatteredpixeldungeon.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.ScrollingListPane$ListTitle
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.Elixir <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfMight
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfMight +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfMight$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfMight$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfMight +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfMight$HTBoost
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfMight$HTBoost
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicalSight
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.KingSprite
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfSirensSong
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfSirensSong +.. com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfSirensSong$Enthralled
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.AllyBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfSirensSong$Enthralled
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.Brew <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.InfernalBrew
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.InfernalBrew +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.InfernalBrew$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.InfernalBrew$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb <|-- com.shatteredpixel.shatteredpixeldungeon.items.bombs.Flashbang
com.shatteredpixel.shatteredpixeldungeon.levels.RegularLevel <|-- com.shatteredpixel.shatteredpixeldungeon.levels.CityLevel
com.shatteredpixel.shatteredpixeldungeon.levels.CityLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.CityLevel$Smoke
com.shatteredpixel.shatteredpixeldungeon.levels.Emitter <|-- com.shatteredpixel.shatteredpixeldungeon.levels.CityLevel$Smoke
com.shatteredpixel.shatteredpixeldungeon.levels.CityLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.CityLevel$SmokeParticle
com.shatteredpixel.shatteredpixeldungeon.levels.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.levels.CityLevel$SmokeParticle
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.PillarsRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.PillarsEntranceRoom
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb <|-- com.shatteredpixel.shatteredpixeldungeon.items.bombs.Noisemaker
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Noisemaker +.. com.shatteredpixel.shatteredpixeldungeon.items.bombs.Noisemaker$NoisemakerFuse
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Fuse <|-- com.shatteredpixel.shatteredpixeldungeon.items.bombs.Noisemaker$NoisemakerFuse
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.Brew <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.UnstableBrew
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.UnstableBrew +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.UnstableBrew$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.Recipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.UnstableBrew$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.spells.TargetedSpell <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.TelekineticGrab
com.shatteredpixel.shatteredpixeldungeon.items.spells.TelekineticGrab +.. com.shatteredpixel.shatteredpixeldungeon.items.spells.TelekineticGrab$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.spells.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.TelekineticGrab$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.food.Food <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.StewedMeat
com.shatteredpixel.shatteredpixeldungeon.items.food.StewedMeat +.. com.shatteredpixel.shatteredpixeldungeon.items.food.StewedMeat$oneMeat
com.shatteredpixel.shatteredpixeldungeon.items.food.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.StewedMeat$oneMeat
com.shatteredpixel.shatteredpixeldungeon.items.food.StewedMeat +.. com.shatteredpixel.shatteredpixeldungeon.items.food.StewedMeat$twoMeat
com.shatteredpixel.shatteredpixeldungeon.items.food.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.StewedMeat$twoMeat
com.shatteredpixel.shatteredpixeldungeon.items.food.StewedMeat +.. com.shatteredpixel.shatteredpixeldungeon.items.food.StewedMeat$threeMeat
com.shatteredpixel.shatteredpixeldungeon.items.food.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.StewedMeat$threeMeat
com.shatteredpixel.shatteredpixeldungeon.effects.particles.Shrinking <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.WoolParticle
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.AmuletScene
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndSupportPrompt
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.Button
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfMysticalEnergy
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.FlashingTrap
com.shatteredpixel.shatteredpixeldungeon.items.food.Food <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.MeatPie
com.shatteredpixel.shatteredpixeldungeon.items.food.MeatPie +.. com.shatteredpixel.shatteredpixeldungeon.items.food.MeatPie$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.food.Recipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.MeatPie$Recipe
com.shatteredpixel.shatteredpixeldungeon.GamesInProgress +.. com.shatteredpixel.shatteredpixeldungeon.GamesInProgress$Info
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Whip
com.shatteredpixel.shatteredpixeldungeon.items.food.Food <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.Berry
com.shatteredpixel.shatteredpixeldungeon.items.food.Berry +.. com.shatteredpixel.shatteredpixeldungeon.items.food.Berry$SeedCounter
com.shatteredpixel.shatteredpixeldungeon.items.food.CounterBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.Berry$SeedCounter
com.shatteredpixel.shatteredpixeldungeon.items.keys.Key <|-- com.shatteredpixel.shatteredpixeldungeon.items.keys.CrystalKey
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MineSecretRoom
com.watabou.utils.Bundlable <|.. com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfStrength
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Regeneration
com.shatteredpixel.shatteredpixeldungeon.windows.WndTitledMessage <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoSubclass
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Slow
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Swarm
com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Enchanting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Skeleton
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Alchemy
com.watabou.noosa.particles.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.EarthParticle
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.MagicalFireRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.MagicalFireRoom +.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.MagicalFireRoom$EternalFire
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.MagicalFireRoom$EternalFire
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Sleep
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Haste
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfCorrosiveGas
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Blocking
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Blocking +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Blocking$BlockBuff
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.ShieldBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Blocking$BlockBuff
com.shatteredpixel.shatteredpixeldungeon.levels.Level <|-- com.shatteredpixel.shatteredpixeldungeon.levels.RegularLevel
com.shatteredpixel.shatteredpixeldungeon.levels.RegularLevel <|-- com.shatteredpixel.shatteredpixeldungeon.levels.PrisonLevel
com.shatteredpixel.shatteredpixeldungeon.levels.PrisonLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.PrisonLevel$Torch
com.shatteredpixel.shatteredpixeldungeon.levels.Emitter <|-- com.shatteredpixel.shatteredpixeldungeon.levels.PrisonLevel$Torch
com.shatteredpixel.shatteredpixeldungeon.windows.WndOptions <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndOptionsCondensed
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoBuff
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.RatSkull
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Kinetic
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Kinetic +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Kinetic$KineticTracker
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Kinetic$KineticTracker
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Kinetic +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Kinetic$ConservedDamage
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Kinetic$ConservedDamage
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.EquipableItem
com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Stone
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.ExitRoom
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mimic <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GoldenMimic
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.GolemSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite$Blue
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite$Blue
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite$Green
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite$Green
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite$Red
com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.CrystalSpireSprite$Red
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.WellWater <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.WaterOfHealth
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.SuccubusSprite
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Doom <|.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Poison
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Poison
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.NewsScene
com.shatteredpixel.shatteredpixeldungeon.scenes.NewsScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.NewsScene$NewsInfo
com.shatteredpixel.shatteredpixeldungeon.scenes.Component <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.NewsScene$NewsInfo
com.shatteredpixel.shatteredpixeldungeon.scenes.NewsScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.NewsScene$ArticleButton
com.shatteredpixel.shatteredpixeldungeon.scenes.StyledButton <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.NewsScene$ArticleButton
com.shatteredpixel.shatteredpixeldungeon.scenes.NewsScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.NewsScene$WndArticle
com.shatteredpixel.shatteredpixeldungeon.scenes.WndTitledMessage <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.NewsScene$WndArticle
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Monk <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Senior
com.shatteredpixel.shatteredpixeldungeon.plants.Plant <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Swiftthistle
com.shatteredpixel.shatteredpixeldungeon.plants.Swiftthistle +.. com.shatteredpixel.shatteredpixeldungeon.plants.Swiftthistle$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Seed <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Swiftthistle$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Swiftthistle +.. com.shatteredpixel.shatteredpixeldungeon.plants.Swiftthistle$TimeBubble
com.shatteredpixel.shatteredpixeldungeon.plants.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Swiftthistle$TimeBubble
com.watabou.noosa.Scene <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene$Fader
com.shatteredpixel.shatteredpixeldungeon.scenes.ColorBlock <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene$Fader
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene$PixelCamera
com.shatteredpixel.shatteredpixeldungeon.scenes.Camera <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene$PixelCamera
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.SnakeSprite
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$Blazing
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$Blazing
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$Projecting
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$Projecting
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$AntiMagic
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$AntiMagic
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$Giant
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$Giant
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$Blessed
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$Blessed
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$Growing
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy$Growing
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.WellFed
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretGardenRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.LibraryRoom
com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfBlast
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.StormTrap
com.watabou.noosa.Tilemap <|-- com.shatteredpixel.shatteredpixeldungeon.tiles.WallBlockingTilemap
com.shatteredpixel.shatteredpixeldungeon.items.spells.Spell <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.InventorySpell
com.shatteredpixel.shatteredpixeldungeon.items.armor.ClassArmor <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.RogueArmor
com.shatteredpixel.shatteredpixeldungeon.items.wands.DamageWand <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfFireblast
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfFireblast +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfFireblast$FireBlastOnHit
com.shatteredpixel.shatteredpixeldungeon.items.wands.Blazing <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfFireblast$FireBlastOnHit
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Dagger
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll +.. com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll$PlaceHolder
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll$PlaceHolder
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll +.. com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll$ScrollToStone
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Recipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll$ScrollToStone
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.special.BrokenSeal
com.shatteredpixel.shatteredpixeldungeon.items.special.BrokenSeal +.. com.shatteredpixel.shatteredpixeldungeon.items.special.BrokenSeal$WarriorShield
com.shatteredpixel.shatteredpixeldungeon.items.special.ShieldBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.special.BrokenSeal$WarriorShield
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone
com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone +.. com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone$PlaceHolder
com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone$PlaceHolder
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardBridgeRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.WaterBridgeRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.GardenRoom
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.BossHealthBar
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AnkhInvulnerability
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.PitRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CaveRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MineSmallRoom
com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfDeepSleep
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.WellWater <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.WaterOfAwareness
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StatuesRoom
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.effects.CheckedCell
com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonWallsTilemap
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.ArmoryRoom
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.BlobImmunity
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.IconTitle
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Light
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.TrapMechanism
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.SoulMark
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndSadGhost
com.shatteredpixel.shatteredpixeldungeon.windows.WndSadGhost +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndSadGhost$RewardWindow
com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoItem <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndSadGhost$RewardWindow
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator
com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator +.. com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator$BuffButton
com.shatteredpixel.shatteredpixeldungeon.ui.IconButton <|-- com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator$BuffButton
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Action <|.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.SnipersMark
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.SnipersMark
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.RoundShield
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.RoundShield +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.RoundShield$GuardTracker
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.RoundShield$GuardTracker
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Scorpio <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Acidic
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.LifeLink
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.GooWarn
com.watabou.noosa.particles.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.CorrosionParticle
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.HallwayRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.HallwayEntranceRoom
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.YogSprite
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.WandEmpower
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM300
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM300 +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM300$FallingRockBuff
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DelayedRockFall <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM300$FallingRockBuff
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.HoldFast
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CapeOfThorns
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CapeOfThorns +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CapeOfThorns$Thorns
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ArtifactBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CapeOfThorns$Thorns
com.watabou.noosa.particles.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.EnergyParticle
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion$PlaceHolder
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion$PlaceHolder
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion$SeedToPotion
com.shatteredpixel.shatteredpixeldungeon.items.potions.Recipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion$SeedToPotion
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.StatusPane
com.watabou.noosa.ScrollArea <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.CellSelector
com.shatteredpixel.shatteredpixeldungeon.scenes.CellSelector +.. com.shatteredpixel.shatteredpixeldungeon.scenes.CellSelector$Listener
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Flail
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Flail +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Flail$SpinAbilityTracker
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Flail$SpinAbilityTracker
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.ThrowingClub
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Wound
com.shatteredpixel.shatteredpixeldungeon.items.spells.Spell <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.Alchemize
com.shatteredpixel.shatteredpixeldungeon.items.spells.Alchemize +.. com.shatteredpixel.shatteredpixeldungeon.items.spells.Alchemize$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.spells.Recipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.Alchemize$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.spells.Alchemize +.. com.shatteredpixel.shatteredpixeldungeon.items.spells.Alchemize$WndAlchemizeItem
com.shatteredpixel.shatteredpixeldungeon.items.spells.WndInfoItem <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.Alchemize$WndAlchemizeItem
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.RingTunnelRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.RingBridgeRoom
com.shatteredpixel.shatteredpixeldungeon.items.spells.InventorySpell <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.CurseInfusion
com.shatteredpixel.shatteredpixeldungeon.items.spells.CurseInfusion +.. com.shatteredpixel.shatteredpixeldungeon.items.spells.CurseInfusion$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.spells.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.CurseInfusion$Recipe
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.FungalCoreSprite
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.journal.DocumentPage
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.TippedDart <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.PoisonDart
com.shatteredpixel.shatteredpixeldungeon.levels.builders.RegularBuilder <|-- com.shatteredpixel.shatteredpixeldungeon.levels.builders.LineBuilder
com.watabou.utils.Bundlable <|.. com.shatteredpixel.shatteredpixeldungeon.actors.Actor
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndMonkAbilities
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.PatchRoom
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ArtifactRecharge
com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Sacrificial
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.PillarsRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.PillarsExitRoom
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC
com.shatteredpixel.shatteredpixeldungeon.items.journal.DocumentPage <|-- com.shatteredpixel.shatteredpixeldungeon.items.journal.GuidePage
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.Brew <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.BlizzardBrew
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.BlizzardBrew +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.BlizzardBrew$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.BlizzardBrew$Recipe
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndChallenges
com.watabou.noosa.Visual <|-- com.shatteredpixel.shatteredpixeldungeon.ui.KeyDisplay
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.GooBossRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.DiamondGooRoom
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.WornShortsword
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.PatchRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CaveRoom
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FireImbue
com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.MailArmor
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.PoolRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.MinefieldRoom
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.ThrowingHammer
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.WeakFloorRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.WeakFloorRoom +.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.WeakFloorRoom$HiddenWell
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.WeakFloorRoom$HiddenWell
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.Elixir <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfToxicEssence
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfToxicEssence +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfToxicEssence$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfToxicEssence$Recipe
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Statue <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.ArmoredStatue
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Barkskin
com.shatteredpixel.shatteredpixeldungeon.effects.particles.Shrinking <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.PitfallParticle
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndImp
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Shopkeeper <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.ImpShopkeeper
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.tiles.FogOfWar
com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo
com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo$HeroInfoTab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo$HeroInfoTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo$TalentInfoTab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo$TalentInfoTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo$SubclassInfoTab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo$SubclassInfoTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo$ArmorAbilityInfoTab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo$ArmorAbilityInfoTab
com.shatteredpixel.shatteredpixeldungeon.ui.Tag <|-- com.shatteredpixel.shatteredpixeldungeon.ui.tags.AttackIndicator
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RotHeart
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.LotusSprite
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.WarpBeacon
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.WarpBeacon +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.WarpBeacon$WarpBeaconTracker
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.mage.WarpBeacon$WarpBeaconTracker
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AdrenalineSurge
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AscensionChallenge
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AscensionChallenge +.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AscensionChallenge$AscensionBuffBlocker
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AscensionChallenge$AscensionBuffBlocker
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Ripple
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.GnollTricksterSprite
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul$Sleeping
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Sleeping <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul$Sleeping
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Wandering <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul$GhoulLifeLink
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul$GhoulLifeLink
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.QuickRecipe
com.shatteredpixel.shatteredpixeldungeon.ui.QuickRecipe +.. com.shatteredpixel.shatteredpixeldungeon.ui.QuickRecipe$arrow
com.shatteredpixel.shatteredpixeldungeon.ui.IconButton <|-- com.shatteredpixel.shatteredpixeldungeon.ui.QuickRecipe$arrow
com.shatteredpixel.shatteredpixeldungeon.effects.particles.Shrinking <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.LeafParticle
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfMagicMapping
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.DisarmingTrap
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.BlazingTrap
com.watabou.utils.Bundlable <|.. com.shatteredpixel.shatteredpixeldungeon.items.Item
com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon$Charger
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Action <|.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon$Charger
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon$Charger
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.EmptyRoom
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sickle
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sickle +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sickle$HarvestBleedTracker
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sickle$HarvestBleedTracker
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Hunting <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$BombAbility
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$BombAbility
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$BombAbility +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$BombAbility$BombItem
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Item <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$BombAbility$BombItem
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$FireAbility
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$FireAbility
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$FireAbility +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$FireAbility$FireBlob
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$FireAbility$FireBlob
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$ShockerAbility
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$ShockerAbility
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$ShockerAbility +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$ShockerAbility$ShockerBlob
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$ShockerAbility$ShockerBlob
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$ShockerAbility +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$ShockerAbility$ShockerItem
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Item <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu$ShockerAbility$ShockerItem
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.ConnectionRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.MazeConnectionRoom
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Crossbow
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Crossbow +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Crossbow$ChargedShot
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Crossbow$ChargedShot
com.shatteredpixel.shatteredpixeldungeon.sprites.Listener <|.. com.shatteredpixel.shatteredpixeldungeon.sprites.MissileSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.MissileSprite
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Shocking
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer$SummoningBlockDamage
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Hunting <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer$NecroSkeleton
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Skeleton <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer$NecroSkeleton
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer$NecroSkeleton +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer$NecroSkeleton$NecroSkeletonSprite
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.SkeletonSprite <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer$NecroSkeleton$NecroSkeletonSprite
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.effects.SpellSprite
com.shatteredpixel.shatteredpixeldungeon.plants.Plant <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Sungrass
com.shatteredpixel.shatteredpixeldungeon.plants.Sungrass +.. com.shatteredpixel.shatteredpixeldungeon.plants.Sungrass$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Seed <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Sungrass$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Sungrass +.. com.shatteredpixel.shatteredpixeldungeon.plants.Sungrass$Health
com.shatteredpixel.shatteredpixeldungeon.plants.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Sungrass$Health
com.watabou.noosa.particles.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.PurpleParticle
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.InventoryScroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfRemoveCurse
com.shatteredpixel.shatteredpixeldungeon.actors.Char <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$AiState
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Sleeping
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.AiState <|.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Sleeping
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.AiState <|.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.AiState <|.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Fleeing
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.AiState <|.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Fleeing
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Passive
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.AiState <|.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob$Passive
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.GatewayTrap
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Greatshield
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfDivination
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfDivination +.. com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfDivination$WndDivination
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.Window <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfDivination$WndDivination
com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Dewcatcher
com.shatteredpixel.shatteredpixeldungeon.items.wands.Plant <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Dewcatcher
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Dewcatcher +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Dewcatcher$Seed
com.shatteredpixel.shatteredpixeldungeon.items.wands.Seed <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Dewcatcher$Seed
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Seedpod
com.shatteredpixel.shatteredpixeldungeon.items.wands.Plant <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Seedpod
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Seedpod +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Seedpod$Seed
com.shatteredpixel.shatteredpixeldungeon.items.wands.Seed <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Seedpod$Seed
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Lotus
com.shatteredpixel.shatteredpixeldungeon.items.wands.NPC <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfRegrowth$Lotus
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MagesStaff
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MagesStaff +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MagesStaff$StaffParticle
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MagesStaff$StaffParticle
com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag <|-- com.shatteredpixel.shatteredpixeldungeon.items.bags.ScrollHolder
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfHaste
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.GooBossRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.ThickPillarsGooRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRunestoneRoom
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.RenderedTextBlock
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.PillarsRoom
com.shatteredpixel.shatteredpixeldungeon.windows.WndTitledMessage <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoMob
com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoMob +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoMob$MobTitle
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoMob$MobTitle
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Wandmaker
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Wandmaker +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Wandmaker$Quest
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.GreatCrabSprite
com.shatteredpixel.shatteredpixeldungeon.levels.Level <|-- com.shatteredpixel.shatteredpixeldungeon.levels.DeadEndLevel
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.BlacksmithSprite
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.special.EnergyCrystal
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Glaive
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.TippedDart <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.IncendiaryDart
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Gnoll
com.shatteredpixel.shatteredpixeldungeon.items.food.Food <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.FrozenCarpaccio
com.shatteredpixel.shatteredpixeldungeon.plants.Plant <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Sorrowmoss
com.shatteredpixel.shatteredpixeldungeon.plants.Sorrowmoss +.. com.shatteredpixel.shatteredpixeldungeon.plants.Sorrowmoss$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Seed <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Sorrowmoss$Seed
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.CrystalPathRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Node <|.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room
com.watabou.utils.Bundlable <|.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room
com.watabou.utils.Rect <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room +.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room$Door
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Bundlable <|.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room$Door
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Point <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room$Door
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.GooSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.GooSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.GooSprite$GooParticle
com.shatteredpixel.shatteredpixeldungeon.sprites.Shrinking <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.GooSprite$GooParticle
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfInvisibility
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Greataxe
com.watabou.input.GameAction <|-- com.shatteredpixel.shatteredpixeldungeon.SPDAction
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Adrenaline
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mimic <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalMimic
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalMimic +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalMimic$Fleeing
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Fleeing <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalMimic$Fleeing
com.shatteredpixel.shatteredpixeldungeon.items.EquipableItem <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor
com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor +.. com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor$Glyph
com.shatteredpixel.shatteredpixeldungeon.items.armor.Bundlable <|.. com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor$Glyph
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StatuesRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.StatuesEntranceRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SentryRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SentryRoom +.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SentryRoom$Sentry
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.NPC <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SentryRoom$Sentry
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SentryRoom +.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SentryRoom$SentrySprite
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SentryRoom$SentrySprite
com.shatteredpixel.shatteredpixeldungeon.levels.traps.PoisonDartTrap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.TenguDartTrap
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.StatueSprite
com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Thorns
com.shatteredpixel.shatteredpixeldungeon.items.EquipableItem <|-- com.shatteredpixel.shatteredpixeldungeon.items.KindOfWeapon
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.BurningTrap
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.ParalyticGas
com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.tiles.TerrainFeaturesTilemap
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.Gold
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.BlacksmithRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.BlacksmithRoom +.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.BlacksmithRoom$QuestEntrance
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.BlacksmithRoom$QuestEntrance
com.watabou.noosa.particles.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.FlowParticle
com.shatteredpixel.shatteredpixeldungeon.effects.particles.FlowParticle +.. com.shatteredpixel.shatteredpixeldungeon.effects.particles.FlowParticle$Flow
com.shatteredpixel.shatteredpixeldungeon.effects.particles.Emitter <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.FlowParticle$Flow
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Electricity
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FungalCore
com.shatteredpixel.shatteredpixeldungeon.items.spells.TargetedSpell <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.PhaseShift
com.shatteredpixel.shatteredpixeldungeon.items.spells.PhaseShift +.. com.shatteredpixel.shatteredpixeldungeon.items.spells.PhaseShift$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.spells.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.PhaseShift$Recipe
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.CausticSlimeSprite
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndTitledMessage
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.ShockingTrap
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer$Sleeping
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Sleeping <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer$Sleeping
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Hunting <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer$Boulder
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Item <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer$Boulder
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer$GnollRockFall
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DelayedRockFall <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer$GnollRockFall
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer$RockArmor
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.ShieldBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer$RockArmor
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.RatKing
com.shatteredpixel.shatteredpixeldungeon.items.food.Food <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.SmallRation
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.DM200Sprite
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.GhoulSprite
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.ui.TalentIcon
com.shatteredpixel.shatteredpixeldungeon.items.KindofMisc <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring
com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring +.. com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring$RingBuff
com.shatteredpixel.shatteredpixeldungeon.items.rings.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring$RingBuff
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Brute <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.ArmoredBrute
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.ArmoredBrute +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.ArmoredBrute$ArmoredRage
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.BruteRage <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.ArmoredBrute$ArmoredRage
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.quest.CeremonialCandle
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.HeroSelectScene
com.shatteredpixel.shatteredpixeldungeon.scenes.HeroSelectScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.HeroSelectScene$HeroBtn
com.shatteredpixel.shatteredpixeldungeon.scenes.StyledButton <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.HeroSelectScene$HeroBtn
com.shatteredpixel.shatteredpixeldungeon.scenes.HeroSelectScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.HeroSelectScene$GameOptions
com.shatteredpixel.shatteredpixeldungeon.scenes.Component <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.HeroSelectScene$GameOptions
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Levitation
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.NewbornElementalSprite
com.shatteredpixel.shatteredpixeldungeon.items.armor.ClassArmor <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.HuntressArmor
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Amok
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfHealing
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.DM300Sprite
com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfFuror
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfFuror +.. com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfFuror$Furor
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfFuror$Furor
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndCombo
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.ui.Compass
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.DM100Sprite
com.shatteredpixel.shatteredpixeldungeon.ui.Button <|-- com.shatteredpixel.shatteredpixeldungeon.ui.IconButton
com.watabou.noosa.Group <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Lightning
com.shatteredpixel.shatteredpixeldungeon.effects.Lightning +.. com.shatteredpixel.shatteredpixeldungeon.effects.Lightning$Arc
com.shatteredpixel.shatteredpixeldungeon.effects.Group <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Lightning$Arc
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.RunestoneRoom
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ShieldedSprite
com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.ClassArmor
com.shatteredpixel.shatteredpixeldungeon.items.armor.ClassArmor +.. com.shatteredpixel.shatteredpixeldungeon.items.armor.ClassArmor$Charger
com.shatteredpixel.shatteredpixeldungeon.items.armor.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.ClassArmor$Charger
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite$Golden
com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite$Golden
com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite$Crystal
com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite$Crystal
com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite$Ebony
com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.MimicSprite$Ebony
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb <|-- com.shatteredpixel.shatteredpixeldungeon.items.bombs.ShockBomb
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.Dart <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.TippedDart
com.shatteredpixel.shatteredpixeldungeon.items.food.Food <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.PhantomMeat
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndStory
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.EyeSprite
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.effects.TargetedCell
com.shatteredpixel.shatteredpixeldungeon.levels.RegularLevel <|-- com.shatteredpixel.shatteredpixeldungeon.levels.HallsLevel
com.shatteredpixel.shatteredpixeldungeon.levels.HallsLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.HallsLevel$Stream
com.shatteredpixel.shatteredpixeldungeon.levels.Group <|-- com.shatteredpixel.shatteredpixeldungeon.levels.HallsLevel$Stream
com.shatteredpixel.shatteredpixeldungeon.levels.HallsLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.HallsLevel$FireParticle
com.shatteredpixel.shatteredpixeldungeon.levels.Shrinking <|-- com.shatteredpixel.shatteredpixeldungeon.levels.HallsLevel$FireParticle
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.RevealedArea
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.ConnectionRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.TunnelRoom
com.watabou.noosa.Group <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Degradation
com.shatteredpixel.shatteredpixeldungeon.effects.Degradation +.. com.shatteredpixel.shatteredpixeldungeon.effects.Degradation$Speck
com.shatteredpixel.shatteredpixeldungeon.effects.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Degradation$Speck
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.HeavyBoomerang
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.HeavyBoomerang +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.HeavyBoomerang$CircleBack
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.HeavyBoomerang$CircleBack
com.shatteredpixel.shatteredpixeldungeon.ui.Tag <|-- com.shatteredpixel.shatteredpixeldungeon.ui.DangerIndicator
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.SmokeScreen
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.FishingSpear
com.watabou.noosa.particles.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.ShaftParticle
com.shatteredpixel.shatteredpixeldungeon.plants.Plant <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Blindweed
com.shatteredpixel.shatteredpixeldungeon.plants.Blindweed +.. com.shatteredpixel.shatteredpixeldungeon.plants.Blindweed$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Seed <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Blindweed$Seed
com.shatteredpixel.shatteredpixeldungeon.levels.painters.RegularPainter <|-- com.shatteredpixel.shatteredpixeldungeon.levels.painters.PrisonPainter
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.ThrowingStone
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndChooseAbility
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RipperDemon
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RipperDemon +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RipperDemon$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Hunting <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RipperDemon$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Doom
com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Friendly
com.shatteredpixel.shatteredpixeldungeon.ui.RenderedTextBlock <|-- com.shatteredpixel.shatteredpixeldungeon.effects.FloatingText
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.RatSprite
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfTeleportation
com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag <|-- com.shatteredpixel.shatteredpixeldungeon.items.bags.VelvetPouch
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretArtilleryRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.ShopRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.ImpShopRoom
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Speed
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.RatKingRoom
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfPurity
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndQuickBag
com.shatteredpixel.shatteredpixeldungeon.ui.Button <|-- com.shatteredpixel.shatteredpixeldungeon.ui.buttons.StyledButton
com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoItem <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndTradeItem
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.ui.BusyIndicator
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Fireball
com.shatteredpixel.shatteredpixeldungeon.effects.Fireball +.. com.shatteredpixel.shatteredpixeldungeon.effects.Fireball$Flame
com.shatteredpixel.shatteredpixeldungeon.effects.Image <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Fireball$Flame
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.ExitRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.SewerBossExitRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.SewerBossExitRoom +.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.SewerBossExitRoom$SewerExit
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.SewerBossExitRoom$SewerExit
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.SewerBossExitRoom +.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.SewerBossExitRoom$SewerExitOverhang
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.SewerBossExitRoom$SewerExitOverhang
com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfCorruption
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.StartScene
com.shatteredpixel.shatteredpixeldungeon.scenes.StartScene +.. com.shatteredpixel.shatteredpixeldungeon.scenes.StartScene$SaveSlotButton
com.shatteredpixel.shatteredpixeldungeon.scenes.Button <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.StartScene$SaveSlotButton
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.EnhancedRings
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardBridgeRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.CrystalChoiceRoom
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.TippedDart <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.RotDart
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.DisintegrationTrap
com.shatteredpixel.shatteredpixeldungeon.levels.painters.CavesPainter <|-- com.shatteredpixel.shatteredpixeldungeon.levels.painters.MiningLevelPainter
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Necromancer <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.SpectralNecromancer
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Action <|.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Preparation
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Preparation
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.UndeadSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ThiefSprite
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.quest.MetalShard
com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Stench
com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.ClothArmor
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.Waterskin
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.keys.Key
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sai
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sai +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sai$ComboStrikeTracker
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sai$ComboStrikeTracker
com.watabou.noosa.particles.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.SparkParticle
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.RingRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.ToxicGasRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.ToxicGasRoom +.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.ToxicGasRoom$ToxicGasSeed
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.ToxicGasRoom$ToxicGasSeed
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.ToxicGasRoom +.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.ToxicGasRoom$ToxicVent
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.ToxicGasRoom$ToxicVent
com.shatteredpixel.shatteredpixeldungeon.items.spells.Spell <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.UnstableSpell
com.shatteredpixel.shatteredpixeldungeon.items.spells.UnstableSpell +.. com.shatteredpixel.shatteredpixeldungeon.items.spells.UnstableSpell$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.spells.Recipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.UnstableSpell$Recipe
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.ChasmRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.ChasmExitRoom
com.shatteredpixel.shatteredpixeldungeon.effects.particles.Shrinking <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.ChallengeParticle
com.shatteredpixel.shatteredpixeldungeon.items.food.Food <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.Pasty
com.shatteredpixel.shatteredpixeldungeon.items.food.Pasty +.. com.shatteredpixel.shatteredpixeldungeon.items.food.Pasty$FishLeftover
com.shatteredpixel.shatteredpixeldungeon.items.food.Food <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.Pasty$FishLeftover
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ShieldBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Barrier
com.shatteredpixel.shatteredpixeldungeon.items.wands.DamageWand <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfFrost
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.SewerPipeRoom
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Action <|.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Momentum
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Momentum
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfRecharging
com.watabou.noosa.particles.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.RainbowParticle
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfToxicGas
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CircleBasinRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.CircleBasinExitRoom
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfTerror
com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndHero
com.shatteredpixel.shatteredpixeldungeon.windows.WndHero +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndHero$StatsTab
com.shatteredpixel.shatteredpixeldungeon.windows.Group <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndHero$StatsTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndHero +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndHero$TalentsTab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndHero$TalentsTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndHero +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndHero$BuffsTab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndHero$BuffsTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndHero$BuffsTab +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndHero$BuffsTab$BuffSlot
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndHero$BuffsTab$BuffSlot
com.shatteredpixel.shatteredpixeldungeon.items.keys.Key <|-- com.shatteredpixel.shatteredpixeldungeon.items.keys.SkeletonKey
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Succubus
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretHoardRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.GooBossRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.ThinPillarsGooRoom
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Rat <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Albino
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndBadge
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoCell
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Doom <|.. com.shatteredpixel.shatteredpixeldungeon.actors.blobs.ToxicGas
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.ToxicGas
com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Displacing
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CaveRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MineEntrance
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MineEntrance +.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MineEntrance$QuestExit
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MineEntrance$QuestExit
com.shatteredpixel.shatteredpixeldungeon.items.bags.Iterable <|.. com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag
com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag +.. com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag$ItemIterator
com.shatteredpixel.shatteredpixeldungeon.items.bags.Iterator <|.. com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag$ItemIterator
com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.DiscardedItemSprite
com.shatteredpixel.shatteredpixeldungeon.windows.WndTitledMessage <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoArmorAbility
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StudyRoom
com.shatteredpixel.shatteredpixeldungeon.windows.WndTitledMessage <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndHardNotification
com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking
com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$RankingTab
com.shatteredpixel.shatteredpixeldungeon.windows.IconTab <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$RankingTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$StatsTab
com.shatteredpixel.shatteredpixeldungeon.windows.Group <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$StatsTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$TalentsTab
com.shatteredpixel.shatteredpixeldungeon.windows.Group <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$TalentsTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$ItemsTab
com.shatteredpixel.shatteredpixeldungeon.windows.Group <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$ItemsTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$BadgesTab
com.shatteredpixel.shatteredpixeldungeon.windows.Group <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$BadgesTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$ChallengesTab
com.shatteredpixel.shatteredpixeldungeon.windows.Group <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$ChallengesTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$ItemButton
com.shatteredpixel.shatteredpixeldungeon.windows.Button <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$ItemButton
com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$QuickSlotButton
com.shatteredpixel.shatteredpixeldungeon.windows.ItemSlot <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndRanking$QuickSlotButton
com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.PlateArmor
com.shatteredpixel.shatteredpixeldungeon.items.wands.DamageWand <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfPrismaticLight
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.FrostTrap
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb <|-- com.shatteredpixel.shatteredpixeldungeon.items.bombs.ShrapnelBomb
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.Tooltip
com.shatteredpixel.shatteredpixeldungeon.items.remains.RemainsItem <|-- com.shatteredpixel.shatteredpixeldungeon.items.remains.CloakScrap
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Fire
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.TippedDart <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.ChillingDart
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.PrismaticGuard
com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Overgrowth
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Scimitar
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Scimitar +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Scimitar$SwordDance
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Scimitar$SwordDance
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Lucky
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Lucky +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Lucky$LuckProc
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Lucky$LuckProc
com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Repulsion
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.WornDartTrap
com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfShock
com.shatteredpixel.shatteredpixeldungeon.levels.Level <|-- com.shatteredpixel.shatteredpixeldungeon.levels.LastLevel
com.shatteredpixel.shatteredpixeldungeon.levels.LastLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.LastLevel$CustomFloor
com.shatteredpixel.shatteredpixeldungeon.levels.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.LastLevel$CustomFloor
com.shatteredpixel.shatteredpixeldungeon.levels.LastLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.LastLevel$CenterPieceVisuals
com.shatteredpixel.shatteredpixeldungeon.levels.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.LastLevel$CenterPieceVisuals
com.shatteredpixel.shatteredpixeldungeon.levels.LastLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.LastLevel$CenterPieceWalls
com.shatteredpixel.shatteredpixeldungeon.levels.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.LastLevel$CenterPieceWalls
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Longsword
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.InventoryPane
com.shatteredpixel.shatteredpixeldungeon.ui.InventoryPane +.. com.shatteredpixel.shatteredpixeldungeon.ui.InventoryPane$InventoryPaneSlot
com.shatteredpixel.shatteredpixeldungeon.ui.InventorySlot <|-- com.shatteredpixel.shatteredpixeldungeon.ui.InventoryPane$InventoryPaneSlot
com.shatteredpixel.shatteredpixeldungeon.ui.InventoryPane +.. com.shatteredpixel.shatteredpixeldungeon.ui.InventoryPane$BagButton
com.shatteredpixel.shatteredpixeldungeon.ui.IconButton <|-- com.shatteredpixel.shatteredpixeldungeon.ui.InventoryPane$BagButton
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Grim
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Grim +.. com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Grim$GrimTracker
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Grim$GrimTracker
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Rapier
com.watabou.noosa.Game <|-- com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Gnoll <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollTrickster
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollTrickster +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollTrickster$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Wandering <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollTrickster$Wandering
com.watabou.utils.Callback <|.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM100
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM100
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM100 +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM100$LightningBolt
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.RockfallTrap
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfSnapFreeze
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.HallwayRoom
com.watabou.noosa.Gizmo <|-- com.shatteredpixel.shatteredpixeldungeon.effects.DarkBlock
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mimic <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.EbonyMimic
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Statue
com.shatteredpixel.shatteredpixeldungeon.actors.Actor <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Swap
com.shatteredpixel.shatteredpixeldungeon.effects.Swap +.. com.shatteredpixel.shatteredpixeldungeon.effects.Swap$Effect
com.shatteredpixel.shatteredpixeldungeon.effects.Visual <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Swap$Effect
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.GooBossRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.GooBossRoom +.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.GooBossRoom$GooNest
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.GooBossRoom$GooNest
com.shatteredpixel.shatteredpixeldungeon.Assets +.. com.shatteredpixel.shatteredpixeldungeon.Assets$Effects
com.shatteredpixel.shatteredpixeldungeon.Assets +.. com.shatteredpixel.shatteredpixeldungeon.Assets$Environment
com.shatteredpixel.shatteredpixeldungeon.Assets +.. com.shatteredpixel.shatteredpixeldungeon.Assets$Fonts
com.shatteredpixel.shatteredpixeldungeon.Assets +.. com.shatteredpixel.shatteredpixeldungeon.Assets$Interfaces
com.shatteredpixel.shatteredpixeldungeon.Assets +.. com.shatteredpixel.shatteredpixeldungeon.Assets$Messages
com.shatteredpixel.shatteredpixeldungeon.Assets +.. com.shatteredpixel.shatteredpixeldungeon.Assets$Music
com.shatteredpixel.shatteredpixeldungeon.Assets +.. com.shatteredpixel.shatteredpixeldungeon.Assets$Sounds
com.shatteredpixel.shatteredpixeldungeon.Assets +.. com.shatteredpixel.shatteredpixeldungeon.Assets$Splashes
com.shatteredpixel.shatteredpixeldungeon.Assets +.. com.shatteredpixel.shatteredpixeldungeon.Assets$Sprites
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.WelcomeScene
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.TeleportationTrap
com.shatteredpixel.shatteredpixeldungeon.ui.Listener <|.. com.shatteredpixel.shatteredpixeldungeon.ui.GameLog
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.GameLog
com.shatteredpixel.shatteredpixeldungeon.ui.GameLog +.. com.shatteredpixel.shatteredpixeldungeon.ui.GameLog$Entry
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.SkeletonSprite
com.shatteredpixel.shatteredpixeldungeon.levels.builders.RegularBuilder <|-- com.shatteredpixel.shatteredpixeldungeon.levels.builders.LoopBuilder
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Bleeding
com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfEnergy
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfEnergy +.. com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfEnergy$Energy
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfEnergy$Energy
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM200 <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM201
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM201 +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM201$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Hunting <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM201$Hunting
com.shatteredpixel.shatteredpixeldungeon.items.wands.DamageWand <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth$RockArmor
com.shatteredpixel.shatteredpixeldungeon.items.wands.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth$RockArmor
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth$EarthGuardian
com.shatteredpixel.shatteredpixeldungeon.items.wands.NPC <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth$EarthGuardian
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth$EarthGuardian +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth$EarthGuardian$Wandering
com.shatteredpixel.shatteredpixeldungeon.items.wands.Wandering <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth$EarthGuardian$Wandering
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.GuardSprite
com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag <|-- com.shatteredpixel.shatteredpixeldungeon.items.bags.MagicalHolster
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StripedRoom
com.shatteredpixel.shatteredpixeldungeon.levels.RegularLevel <|-- com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesLevel
com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesLevel$Vein
com.shatteredpixel.shatteredpixeldungeon.levels.caves.Group <|-- com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesLevel$Vein
com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesLevel$Sparkle
com.shatteredpixel.shatteredpixeldungeon.levels.caves.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.levels.caves.CavesLevel$Sparkle
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoTalent
com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoTalent +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoTalent$TalentButtonCallback
com.shatteredpixel.shatteredpixeldungeon.windows.Callback <|.. com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoTalent$TalentButtonCallback
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.BeeSprite
com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfArcana
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfArcana +.. com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfArcana$Arcana
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfArcana$Arcana
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfEnchantment
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfEnchantment +.. com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfEnchantment$WndEnchantSelect
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.WndOptions <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfEnchantment$WndEnchantSelect
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfEnchantment +.. com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfEnchantment$WndGlyphSelect
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.WndOptions <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfEnchantment$WndGlyphSelect
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ScorpioSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.ScorpioSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.ScorpioSprite$ScorpioShot
com.shatteredpixel.shatteredpixeldungeon.sprites.Item <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ScorpioSprite$ScorpioShot
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CellBlockRoom
com.shatteredpixel.shatteredpixeldungeon.plants.Plant <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Firebloom
com.shatteredpixel.shatteredpixeldungeon.plants.Firebloom +.. com.shatteredpixel.shatteredpixeldungeon.plants.Firebloom$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Seed <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Firebloom$Seed
com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Annoying
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.EarthGuardianSprite
com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.tiles.RaisedTerrainTilemap
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.SmokeBomb
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.SmokeBomb +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.SmokeBomb$NinjaLog
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.NPC <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.SmokeBomb$NinjaLog
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.SmokeBomb +.. com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.SmokeBomb$NinjaLogSprite
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.SmokeBomb$NinjaLogSprite
com.watabou.noosa.Tilemap <|-- com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalSpire
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalSpire +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalSpire$SpireSpike
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.GnollGuardSprite
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Drowsy
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene
com.shatteredpixel.shatteredpixeldungeon.ui.HealthBar <|-- com.shatteredpixel.shatteredpixeldungeon.ui.TargetHealthIndicator
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Blindness
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.WraithSprite
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.DistortionTrap
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.TippedDart <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.ShockingDart
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.ChasmRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.ChasmEntranceRoom
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite$Red
com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite$Red
com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite$Blue
com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite$Blue
com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite$Purple
com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ShamanSprite$Purple
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.DimensionalSundial
com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.AntiMagic
com.shatteredpixel.shatteredpixeldungeon.items.keys.Key <|-- com.shatteredpixel.shatteredpixeldungeon.items.keys.GoldenKey
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman$EarthenBolt
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman$RedShaman
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman$RedShaman
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman$BlueShaman
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman$BlueShaman
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman$PurpleShaman
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman$PurpleShaman
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.PlatformRoom
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb <|-- com.shatteredpixel.shatteredpixeldungeon.items.bombs.Firebomb
com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings
com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$DisplayTab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$DisplayTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$UITab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$UITab
com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$InputTab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$InputTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$DataTab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$DataTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$AudioTab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$AudioTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$LangsTab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndSettings$LangsTab
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Thief <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Bandit
com.shatteredpixel.shatteredpixeldungeon.ui.Button <|-- com.shatteredpixel.shatteredpixeldungeon.ui.ItemSlot
com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoItem <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndEnergizeItem
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.SegmentedRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.FissureRoom
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.ToxicTrap
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.ui.BuffIcon
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.LiquidMetal
com.shatteredpixel.shatteredpixeldungeon.items.LiquidMetal +.. com.shatteredpixel.shatteredpixeldungeon.items.LiquidMetal$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.Recipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.LiquidMetal$Recipe
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.GhostSprite
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.EntranceRoom
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.FlockTrap
com.shatteredpixel.shatteredpixeldungeon.effects.particles.Shrinking <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.BloodParticle
com.shatteredpixel.shatteredpixeldungeon.ui.Button <|-- com.shatteredpixel.shatteredpixeldungeon.ui.buttons.TalentButton
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DelayedRockFall
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MassGraveRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MassGraveRoom +.. com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MassGraveRoom$Bones
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MassGraveRoom$Bones
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.DM201Sprite
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalGuardian
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalGuardian +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalGuardian$Sleeping
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Sleeping <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalGuardian$Sleeping
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Frost
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.SwarmSprite
com.shatteredpixel.shatteredpixeldungeon.items.food.Food <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.Blandfruit
com.shatteredpixel.shatteredpixeldungeon.items.food.Blandfruit +.. com.shatteredpixel.shatteredpixeldungeon.items.food.Blandfruit$CookFruit
com.shatteredpixel.shatteredpixeldungeon.items.food.Recipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.Blandfruit$CookFruit
com.shatteredpixel.shatteredpixeldungeon.items.food.Blandfruit +.. com.shatteredpixel.shatteredpixeldungeon.items.food.Blandfruit$Chunks
com.shatteredpixel.shatteredpixeldungeon.items.food.Food <|-- com.shatteredpixel.shatteredpixeldungeon.items.food.Blandfruit$Chunks
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.CryptRoom
com.shatteredpixel.shatteredpixeldungeon.ui.ItemSlot <|-- com.shatteredpixel.shatteredpixeldungeon.ui.InventorySlot
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.EntranceRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.SewerBossEntranceRoom
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndGameInProgress
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Degrade
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Foresight
com.shatteredpixel.shatteredpixeldungeon.levels.Level <|-- com.shatteredpixel.shatteredpixeldungeon.levels.CityBossLevel
com.shatteredpixel.shatteredpixeldungeon.levels.CityBossLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.CityBossLevel$CustomGroundVisuals
com.shatteredpixel.shatteredpixeldungeon.levels.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.CityBossLevel$CustomGroundVisuals
com.shatteredpixel.shatteredpixeldungeon.levels.CityBossLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.CityBossLevel$CustomWallVisuals
com.shatteredpixel.shatteredpixeldungeon.levels.CustomTilemap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.CityBossLevel$CustomWallVisuals
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.KingsCrown
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardBridgeRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.ChasmBridgeRoom
com.shatteredpixel.shatteredpixeldungeon.ui.Button <|-- com.shatteredpixel.shatteredpixeldungeon.ui.Tag
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.FungalSpinnerSprite
com.shatteredpixel.shatteredpixeldungeon.levels.painters.RegularPainter <|-- com.shatteredpixel.shatteredpixeldungeon.levels.painters.CityPainter
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.ui.RadialMenu
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.InventoryScroll
com.shatteredpixel.shatteredpixeldungeon.levels.RegularLevel <|-- com.shatteredpixel.shatteredpixeldungeon.levels.LastShopLevel
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndMessage
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Fury
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndResurrect
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.RotGardenRoom
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.PinCushion
com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility <|-- com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.SpectralBlades
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MindVision
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.LloydsBeacon
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.LloydsBeacon +.. com.shatteredpixel.shatteredpixeldungeon.items.artifacts.LloydsBeacon$beaconRecharge
com.shatteredpixel.shatteredpixeldungeon.items.artifacts.ArtifactBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.artifacts.LloydsBeacon$beaconRecharge
com.shatteredpixel.shatteredpixeldungeon.levels.traps.TeleportationTrap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.WarpingTrap
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.PatchRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.RuinsRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.PerimeterRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.WalkwayRoom
com.shatteredpixel.shatteredpixeldungeon.ui.IconButton <|-- com.shatteredpixel.shatteredpixeldungeon.ui.buttons.ExitButton
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.PiranhaSprite
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.DirectableAlly
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.DirectableAlly +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.DirectableAlly$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Wandering <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.DirectableAlly$Wandering
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.DirectableAlly +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.DirectableAlly$Hunting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Hunting <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.DirectableAlly$Hunting
com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfFlock
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility
com.watabou.noosa.particles.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.WindParticle
com.shatteredpixel.shatteredpixeldungeon.effects.particles.WindParticle +.. com.shatteredpixel.shatteredpixeldungeon.effects.particles.WindParticle$Wind
com.shatteredpixel.shatteredpixeldungeon.effects.particles.Emitter <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.WindParticle$Wind
com.shatteredpixel.shatteredpixeldungeon.levels.builders.Builder <|-- com.shatteredpixel.shatteredpixeldungeon.levels.builders.RegularBuilder
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.effects.Speck
com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet +.. com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet$Icons
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndDocument
com.watabou.noosa.Halo <|-- com.shatteredpixel.shatteredpixeldungeon.effects.ShieldHalo
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.CrystalVaultRoom
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb +.. com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb$ConjuredBomb
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb <|-- com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb$ConjuredBomb
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb +.. com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb$Fuse
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Actor <|-- com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb$Fuse
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb +.. com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb$DoubleBomb
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb <|-- com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb$DoubleBomb
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb +.. com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb$EnhanceBomb
com.shatteredpixel.shatteredpixeldungeon.items.bombs.Recipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb$EnhanceBomb
com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Inferno
com.watabou.noosa.Image <|-- com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon
com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon +.. com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon$Sleep
com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon <|-- com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon$Sleep
com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon +.. com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon$Alert
com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon <|-- com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon$Alert
com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon +.. com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon$Lost
com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon <|-- com.shatteredpixel.shatteredpixeldungeon.effects.EmoIcon$Lost
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Mace
com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Affection
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.InventoryScroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfIdentify
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Shortsword
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.SummoningTrap
com.watabou.utils.Bundlable <|.. com.shatteredpixel.shatteredpixeldungeon.items.Heap
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FungalSentry
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FungalSentry +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FungalSentry$Waiting
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Wandering <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FungalSentry$Waiting
com.watabou.utils.Bundlable <|.. com.shatteredpixel.shatteredpixeldungeon.tiles.CustomTilemap
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.ChillingTrap
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.ThrowingSpear
com.watabou.noosa.NinePatch <|-- com.shatteredpixel.shatteredpixeldungeon.effects.ShadowBox
com.watabou.noosa.particles.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.effects.particles.SnowParticle
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret.SecretMazeRoom
com.shatteredpixel.shatteredpixeldungeon.plants.Plant <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Rotberry
com.shatteredpixel.shatteredpixeldungeon.plants.Rotberry +.. com.shatteredpixel.shatteredpixeldungeon.plants.Rotberry$Seed
com.shatteredpixel.shatteredpixeldungeon.plants.Seed <|-- com.shatteredpixel.shatteredpixeldungeon.plants.Rotberry$Seed
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfFrost
com.shatteredpixel.shatteredpixeldungeon.items.spells.InventorySpell <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.MagicalInfusion
com.shatteredpixel.shatteredpixeldungeon.items.spells.MagicalInfusion +.. com.shatteredpixel.shatteredpixeldungeon.items.spells.MagicalInfusion$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.spells.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.spells.MagicalInfusion$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.Multiplicity
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Slime <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CausticSlime
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Awareness
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.BanditSprite
com.shatteredpixel.shatteredpixeldungeon.levels.traps.RockfallTrap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.GnollRockfallTrap
com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.curses.AntiEntropy
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ImpSprite
com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Enchantment <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Corrupting
com.shatteredpixel.shatteredpixeldungeon.items.wands.DamageWand <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLightning
com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLightning +.. com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLightning$LightningOnHit
com.shatteredpixel.shatteredpixeldungeon.items.wands.Shocking <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLightning$LightningOnHit
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.PoisonDartTrap
com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfHaste
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfHaste +.. com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfHaste$Haste
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfHaste$Haste
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfCleansing
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfCleansing +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfCleansing$Cleanse
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfCleansing$Cleanse
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.TippedDart <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.ParalyticDart
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Monk
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Monk +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Monk$Focus
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Monk$Focus
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalWisp
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalWisp +.. com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalWisp$LightBeam
com.shatteredpixel.shatteredpixeldungeon.sprites.Listener <|.. com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.Listener <|.. com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite
com.watabou.noosa.MovieClip <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite$JumpTweener
com.shatteredpixel.shatteredpixeldungeon.sprites.Tweener <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite$JumpTweener
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.MirrorSprite
com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor.Glyph <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Viscosity
com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Viscosity +.. com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Viscosity$ViscosityTracker
com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Viscosity$ViscosityTracker
com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Viscosity +.. com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Viscosity$DeferedDamage
com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.armor.glyphs.Viscosity$DeferedDamage
com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll <|-- com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfPsionicBlast
com.shatteredpixel.shatteredpixeldungeon.levels.RegularLevel <|-- com.shatteredpixel.shatteredpixeldungeon.levels.SewerLevel
com.shatteredpixel.shatteredpixeldungeon.levels.SewerLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.SewerLevel$Sink
com.shatteredpixel.shatteredpixeldungeon.levels.Emitter <|-- com.shatteredpixel.shatteredpixeldungeon.levels.SewerLevel$Sink
com.shatteredpixel.shatteredpixeldungeon.levels.SewerLevel +.. com.shatteredpixel.shatteredpixeldungeon.levels.SewerLevel$WaterParticle
com.shatteredpixel.shatteredpixeldungeon.levels.PixelParticle <|-- com.shatteredpixel.shatteredpixeldungeon.levels.SewerLevel$WaterParticle
com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal
com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$GuideTab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$GuideTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$AlchemyTab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$AlchemyTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$NotesTab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$NotesTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$CatalogTab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$CatalogTab
com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$LoreTab
com.shatteredpixel.shatteredpixeldungeon.windows.Component <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndJournal$LoreTab
com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Spinner <|-- com.shatteredpixel.shatteredpixeldungeon.actors.mobs.FungalSpinner
com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion$PotionToExotic
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.Recipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion$PotionToExotic
com.shatteredpixel.shatteredpixeldungeon.items.stones.InventoryStone <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfEnchantment
com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfTenacity
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfTenacity +.. com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfTenacity$Tenacity
com.shatteredpixel.shatteredpixeldungeon.items.rings.RingBuff <|-- com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfTenacity$Tenacity
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Hex
com.shatteredpixel.shatteredpixeldungeon.items.stones.Runestone <|-- com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfBlink
com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap <|-- com.shatteredpixel.shatteredpixeldungeon.levels.traps.GeyserTrap
com.shatteredpixel.shatteredpixeldungeon.windows.WndTitledMessage <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoPlant
com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag <|-- com.shatteredpixel.shatteredpixeldungeon.items.bags.PotionBandolier
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfDivineInspiration
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfDivineInspiration +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfDivineInspiration$DivineInspirationTracker
com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfDivineInspiration$DivineInspirationTracker
com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.WarScythe
com.shatteredpixel.shatteredpixeldungeon.ui.Window <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndWandmaker
com.shatteredpixel.shatteredpixeldungeon.windows.WndWandmaker +.. com.shatteredpixel.shatteredpixeldungeon.windows.WndWandmaker$RewardWindow
com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoItem <|-- com.shatteredpixel.shatteredpixeldungeon.windows.WndWandmaker$RewardWindow
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.MimicTooth
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.RitualRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.RitualExitRoom
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite
com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite$Fire
com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite$Fire
com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite$NewbornFire
com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite$NewbornFire
com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite$Frost
com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite$Frost
com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite$Shock
com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite$Shock
com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite +.. com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite$Chaos
com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.ElementalSprite$Chaos
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.special.ArcaneResin
com.shatteredpixel.shatteredpixeldungeon.items.special.ArcaneResin +.. com.shatteredpixel.shatteredpixeldungeon.items.special.ArcaneResin$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.special.Recipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.special.ArcaneResin$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.Item <|-- com.shatteredpixel.shatteredpixeldungeon.items.remains.RemainsItem
com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene <|-- com.shatteredpixel.shatteredpixeldungeon.scenes.InterlevelScene
com.shatteredpixel.shatteredpixeldungeon.sprites.MobSprite <|-- com.shatteredpixel.shatteredpixeldungeon.sprites.BatSprite
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.TippedDart <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.BlindingDart
com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand <|-- com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfCorrosion
com.shatteredpixel.shatteredpixeldungeon.items.trinkets.Trinket <|-- com.shatteredpixel.shatteredpixeldungeon.items.trinkets.ThirteenLeafClover
com.watabou.noosa.particles.Emitter <|-- com.shatteredpixel.shatteredpixeldungeon.effects.BlobEmitter
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Action <|.. com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Berserk
com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Berserk
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom
com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.CaveRoom <|-- com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MineLargeRoom
com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.TippedDart <|-- com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.CleansingDart
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.Elixir <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfAquaticRejuvenation
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfAquaticRejuvenation +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfAquaticRejuvenation$AquaHealing
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.Buff <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfAquaticRejuvenation$AquaHealing
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfAquaticRejuvenation +.. com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfAquaticRejuvenation$Recipe
com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.SimpleRecipe <|-- com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfAquaticRejuvenation$Recipe
com.watabou.noosa.ui.Component <|-- com.shatteredpixel.shatteredpixeldungeon.ui.changelist.ChangeInfo
@enduml